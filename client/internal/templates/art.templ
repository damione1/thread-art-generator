package templates

import (
	"github.com/Damione1/thread-art-generator/client/internal/services"
	"github.com/Damione1/thread-art-generator/core/pb"
	"github.com/Damione1/thread-art-generator/core/resource"
	"github.com/axzilla/templui/component/alert"
	"github.com/axzilla/templui/component/button"
	"github.com/axzilla/templui/component/form"
	"github.com/axzilla/templui/component/input"
)

// extractArtID extracts the art ID from a resource name like "users/{user}/arts/{art}"
func extractArtID(resourceName string) string {
	artResource, err := resource.ParseResourceName(resourceName)
	if err != nil {
		return ""
	}

	art, ok := artResource.(*resource.Art)
	if !ok {
		return ""
	}

	return art.ArtID
}

// ArtPage renders the art details page with upload functionality
// data: PageData containing user info and other template data
// art: The art resource to display
templ ArtPage(data *PageData, art *pb.Art) {
	@Layout(data) {
		<div class="max-w-4xl mx-auto px-4 py-8">
			<div class="mb-6">
				<a href="/dashboard" class="text-primary-400 hover:text-primary-300 transition duration-300 flex items-center gap-2 mb-4">
					<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
					</svg>
					Back to Dashboard
				</a>
				<h1 class="text-3xl font-bold text-slate-200">{ art.GetTitle() }</h1>
				<div class="flex items-center gap-4 mt-2">
					<span class="text-sm text-slate-400">
						Created { art.GetCreateTime().AsTime().Format("January 2, 2006") }
					</span>
					<span
						class={
							"px-2 py-1 rounded text-xs font-medium",
							templ.KV("bg-yellow-900/30 text-yellow-400", art.GetStatus() == pb.ArtStatus_ART_STATUS_PENDING_IMAGE),
							templ.KV("bg-blue-900/30 text-blue-400", art.GetStatus() == pb.ArtStatus_ART_STATUS_PROCESSING),
							templ.KV("bg-green-900/30 text-green-400", art.GetStatus() == pb.ArtStatus_ART_STATUS_COMPLETE),
							templ.KV("bg-red-900/30 text-red-400", art.GetStatus() == pb.ArtStatus_ART_STATUS_FAILED),
						}
					>
						{ string(art.GetStatus()) }
					</span>
				</div>
			</div>
			<div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
				<!-- Image Section -->
				<div class="bg-dark-200 rounded-lg shadow-lg p-6 border border-dark-400/30">
					<h2 class="text-xl font-semibold text-slate-200 mb-4">Image</h2>
					if art.GetStatus() == pb.ArtStatus_ART_STATUS_PENDING_IMAGE {
						@ImageUploadDropzone(extractArtID(art.GetName()))
					} else if art.GetStatus() == pb.ArtStatus_ART_STATUS_COMPLETE && art.GetImageUrl() != "" {
						<div class="space-y-4">
							<img
								src={ art.GetImageUrl() }
								alt={ art.GetTitle() }
								class="w-full rounded-lg shadow-lg"
							/>
							<p class="text-sm text-slate-400">Image uploaded successfully</p>
						</div>
					} else {
						<div class="flex items-center justify-center h-64 bg-dark-300 rounded-lg">
							<div class="text-center">
								<svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 text-slate-500 mx-auto mb-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
								</svg>
								<p class="text-slate-400">No image available</p>
							</div>
						</div>
					}
				</div>
				<!-- Details Section -->
				<div class="bg-dark-200 rounded-lg shadow-lg p-6 border border-dark-400/30">
					<h2 class="text-xl font-semibold text-slate-200 mb-4">Details</h2>
					<div class="space-y-4">
						<div>
							<label class="block text-sm font-medium text-slate-300 mb-1">Title</label>
							<p class="text-slate-200">{ art.GetTitle() }</p>
						</div>
						<div>
							<label class="block text-sm font-medium text-slate-300 mb-1">Status</label>
							<p class="text-slate-200">{ string(art.GetStatus()) }</p>
						</div>
						<div>
							<label class="block text-sm font-medium text-slate-300 mb-1">Created</label>
							<p class="text-slate-200">{ art.GetCreateTime().AsTime().Format("January 2, 2006 at 3:04 PM") }</p>
						</div>
						if art.GetUpdateTime() != nil {
							<div>
								<label class="block text-sm font-medium text-slate-300 mb-1">Last Updated</label>
								<p class="text-slate-200">{ art.GetUpdateTime().AsTime().Format("January 2, 2006 at 3:04 PM") }</p>
							</div>
						}
					</div>
				</div>
			</div>
		</div>
	}
}

// ImageUploadDropzone renders a dropzone for image upload
templ ImageUploadDropzone(artId string) {
	<div
		id="upload-dropzone"
		class="border-2 border-dashed border-dark-400 rounded-lg p-8 text-center hover:border-primary-500 transition-colors duration-300 cursor-pointer"
		x-data={ "imageUpload('" + artId + "')" }
		@drop.prevent="handleDrop($event)"
		@dragover.prevent="dragOver = true"
		@dragleave.prevent="dragOver = false"
		:class="{ 'border-primary-500 bg-primary-900/10': dragOver }"
	>
		<div x-show="!uploading && !uploaded">
			<svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 text-slate-400 mx-auto mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
				<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"></path>
			</svg>
			<h3 class="text-lg font-medium text-slate-200 mb-2">Upload Image</h3>
			<p class="text-slate-400 mb-4">Drag and drop an image here, or click to select</p>
			<input
				type="file"
				id="file-input"
				class="hidden"
				accept="image/*"
				@change="handleFileSelect($event)"
				x-ref="fileInput"
			/>
			<button
				type="button"
				class="px-4 py-2 bg-primary-600 text-white rounded-lg hover:bg-primary-500 transition-colors duration-300"
				@click="$refs.fileInput.click()"
			>
				Select Image
			</button>
		</div>
		<div x-show="uploading" class="space-y-4">
			<svg class="animate-spin h-8 w-8 text-primary-500 mx-auto" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
				<circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
				<path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
			</svg>
			<p class="text-slate-300">Uploading image...</p>
			<div class="w-full bg-dark-300 rounded-full h-2">
				<div class="bg-primary-500 h-2 rounded-full transition-all duration-300" :style="`width: ${uploadProgress}%`"></div>
			</div>
		</div>
		<div x-show="uploaded" class="space-y-4">
			<svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-green-500 mx-auto" fill="none" viewBox="0 0 24 24" stroke="currentColor">
				<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
			</svg>
			<p class="text-green-400">Image uploaded successfully!</p>
			<button
				type="button"
				class="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-500 transition-colors duration-300"
				@click="refreshPage()"
			>
				Refresh Page
			</button>
		</div>
		<div x-show="error" class="space-y-4">
			<svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-red-500 mx-auto" fill="none" viewBox="0 0 24 24" stroke="currentColor">
				<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
			</svg>
			<p class="text-red-400" x-text="errorMessage"></p>
			<button
				type="button"
				class="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-500 transition-colors duration-300"
				@click="resetUpload()"
			>
				Try Again
			</button>
		</div>
	</div>
	<script>
		function imageUpload(artId) {
			return {
				dragOver: false,
				uploading: false,
				uploaded: false,
				error: false,
				errorMessage: '',
				uploadProgress: 0,

				handleDrop(event) {
					this.dragOver = false;
					const files = event.dataTransfer.files;
					if (files.length > 0) {
						this.uploadFile(files[0]);
					}
				},

				handleFileSelect(event) {
					const files = event.target.files;
					if (files.length > 0) {
						this.uploadFile(files[0]);
					}
				},

				async uploadFile(file) {
					// Validate file type
					if (!file.type.startsWith('image/')) {
						this.showError('Please select an image file');
						return;
					}

					// Validate file size (10MB limit)
					if (file.size > 10 * 1024 * 1024) {
						this.showError('File size must be less than 10MB');
						return;
					}

					this.uploading = true;
					this.error = false;
					this.uploadProgress = 0;

					try {
						// Get upload URL with file validation parameters
						const uploadUrlResponse = await fetch(`/api/get-upload-url/${encodeURIComponent(artId)}`, {
							method: 'POST',
							headers: {
								'Content-Type': 'application/json',
							},
							body: JSON.stringify({
								content_type: file.type,
								file_size: file.size
							})
						});

						if (!uploadUrlResponse.ok) {
							throw new Error('Failed to get upload URL');
						}

						const uploadData = await uploadUrlResponse.json();

						// Upload file to signed URL with matching content type
						const uploadResponse = await fetch(uploadData.upload_url, {
							method: 'PUT',
							body: file,
							headers: {
								'Content-Type': file.type,
							},
						});

						if (!uploadResponse.ok) {
							throw new Error('Failed to upload image');
						}

						this.uploadProgress = 100;

						// Confirm upload
						const confirmResponse = await fetch(`/api/confirm-upload/${encodeURIComponent(artId)}`, {
							method: 'POST',
							headers: {
								'Content-Type': 'application/json',
							},
						});

						if (!confirmResponse.ok) {
							throw new Error('Failed to confirm upload');
						}

						this.uploading = false;
						this.uploaded = true;

					} catch (error) {
						this.uploading = false;
						this.showError(error.message || 'Upload failed');
					}
				},

				showError(message) {
					this.error = true;
					this.errorMessage = message;
					this.uploading = false;
					this.uploaded = false;
				},

				resetUpload() {
					this.error = false;
					this.errorMessage = '';
					this.uploading = false;
					this.uploaded = false;
					this.uploadProgress = 0;
				},

				refreshPage() {
					window.location.reload();
				}
			}
		}
	</script>
}

// NewArtPage renders the page to create a new art
// data: PageData containing user info and other template data
// formData: Form data with validation errors and previous input values
templ NewArtPage(data *PageData, formData *services.ArtFormData) {
	@Layout(data) {
		<div class="max-w-4xl mx-auto px-4 py-8">
			<h1 class="text-3xl font-bold text-slate-200 mb-6">Create New Art</h1>
			<div class="bg-dark-200 rounded-lg shadow-lg p-6 border border-dark-400/30">
				@NewArtForm(formData)
			</div>
		</div>
	}
}

// ErrorAlert renders a reusable error alert component using templUI
templ ErrorAlert(errors []string) {
	if len(errors) > 0 {
		<div class="w-full mb-4">
			@alert.Alert(alert.Props{Variant: alert.VariantDestructive}) {
				<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
					<path d="m21.73 18-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3Z"></path>
					<path d="M12 9v4"></path>
					<path d="m12 17 .01 0"></path>
				</svg>
				@alert.Title() {
					Error
				}
				@alert.Description() {
					<ul class="list-disc pl-5 space-y-1">
						for _, err := range errors {
							<li>{ err }</li>
						}
					</ul>
				}
			}
		</div>
	}
}

// SuccessAlert renders a success alert component using templUI
templ SuccessAlert(message string) {
	if message != "" {
		<div class="w-full mb-4">
			@alert.Alert() {
				<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
					<path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path>
					<polyline points="22,4 12,14.01 9,11.01"></polyline>
				</svg>
				@alert.Title() {
					Success
				}
				@alert.Description() {
					{ message }
				}
			}
		</div>
	}
}

// InfoAlert renders an info alert component using templUI
templ InfoAlert(message string) {
	if message != "" {
		<div class="w-full mb-4">
			@alert.Alert() {
				<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
					<circle cx="12" cy="12" r="10"></circle>
					<path d="m9 12 2 2 4-4"></path>
				</svg>
				@alert.Title() {
					Information
				}
				@alert.Description() {
					{ message }
				}
			}
		</div>
	}
}

// NewArtForm renders the form for creating new art
// formData: Form data containing values and validation errors
templ NewArtForm(formData *services.ArtFormData) {
	<form
		hx-post="/dashboard/arts/new"
		hx-swap="outerHTML"
		hx-indicator="#submit-spinner"
		class="space-y-6 w-full"
	>
		@ErrorAlert(formData.Errors["_form"])
		@form.Item() {
			@form.Label(form.LabelProps{
				For: "title",
			}) {
				Title
			}
			@input.Input(input.Props{
				ID:          "title",
				Type:        input.TypeText,
				Name:        "title",
				Placeholder: "Enter a title for your art",
				Value:       formData.Title,
				HasError:    len(formData.Errors["art.title"]) > 0,
				Required:    true,
			})
			@form.Description() {
				Enter a descriptive title for your thread art project
			}
			if len(formData.Errors["art.title"]) > 0 {
				for _, err := range formData.Errors["art.title"] {
					@form.Message(form.MessageProps{
						Variant: form.MessageVariantError,
					}) {
						{ err }
					}
				}
			}
		}
		<div class="flex justify-end mt-6">
			@button.Button(button.Props{
				Type:    "submit",
				Variant: button.VariantDefault,
			}) {
				<span id="submit-spinner" class="htmx-indicator">
					<svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
						<circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
						<path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
					</svg>
				</span>
				Create Art
			}
		</div>
	</form>
}
