package templates

import (
	"fmt"
	"github.com/Damione1/thread-art-generator/core/pb"
	"github.com/axzilla/templui/component/button"
	"github.com/axzilla/templui/component/separator"
)

// CompositionTimeline renders a timeline of compositions for an art
templ CompositionTimeline(userID, artID string, compositions []*pb.Composition) {
	<div class="bg-dark-200 rounded-lg shadow-lg p-6 border border-dark-400/30">
		<div class="flex justify-between items-center mb-6">
			<h2 class="text-xl font-semibold text-slate-200">Composition History</h2>
			@button.Button(button.Props{}) {
				<a href={ templ.SafeURL("/dashboard/arts/" + artID + "/composition/new") } class="flex items-center gap-2">
					@MaterialIcon("add", "")
					Create New Composition
				</a>
			}
		</div>
		if len(compositions) == 0 {
			<!-- Empty state -->
			<div class="text-center py-12">
				@MaterialIcon("description", "h-16 w-16 text-slate-500 mx-auto mb-4")
				<h3 class="text-lg font-medium text-slate-300 mb-2">No compositions yet</h3>
				<p class="text-slate-400 mb-6">Start by creating your first composition with custom parameters.</p>
				@button.Button(button.Props{}) {
					<a href={ templ.SafeURL("/dashboard/arts/" + artID + "/composition/new") } class="flex items-center gap-2">
						@MaterialIcon("add", "")
						Create Your First Composition
					</a>
				}
			</div>
		} else {
			<!-- Timeline -->
			<div class="space-y-4">
				for i, composition := range compositions {
					@CompositionCard(userID, artID, composition, i == 0)
					if i < len(compositions) - 1 {
						<div class="flex justify-center py-2">
							@separator.Separator()
						</div>
					}
				}
			</div>
		}
	</div>
}

// CompositionCard renders a single composition card in the timeline
templ CompositionCard(userID, artID string, composition *pb.Composition, isLatest bool) {
	<div class="relative bg-dark-300 rounded-lg border border-dark-400/30 p-4 hover:border-dark-400/50 transition-colors">
		<!-- Latest badge -->
		if isLatest {
			<div class="absolute -top-2 left-4">
				<span class="bg-primary-600 text-white px-2 py-1 rounded-full text-xs font-medium">Latest</span>
			</div>
		}
		<div class="flex items-start justify-between">
			<!-- Left side: Status and basic info -->
			<div class="flex-1">
				<div class="flex items-center gap-3 mb-3">
					@CompositionStatusBadge(composition.GetStatus())
					<span class="text-sm text-slate-400">
						{ composition.GetCreateTime().AsTime().Format("Jan 2, 2006 at 3:04 PM") }
					</span>
				</div>
				<!-- Key parameters preview -->
				<div class="grid grid-cols-2 md:grid-cols-4 gap-3 text-sm">
					<div>
						<span class="text-slate-400">Nails:</span>
						<span class="text-slate-200 ml-1">{ fmt.Sprint(composition.GetNailsQuantity()) }</span>
					</div>
					<div>
						<span class="text-slate-400">Paths:</span>
						<span class="text-slate-200 ml-1">{ fmt.Sprint(composition.GetMaxPaths()) }</span>
					</div>
					<div>
						<span class="text-slate-400">Size:</span>
						<span class="text-slate-200 ml-1">{ fmt.Sprint(composition.GetImgSize()) }px</span>
					</div>
					if composition.GetStatus() == pb.CompositionStatus_COMPOSITION_STATUS_COMPLETE && composition.GetTotalLines() > 0 {
						<div>
							<span class="text-slate-400">Lines:</span>
							<span class="text-slate-200 ml-1">{ fmt.Sprint(composition.GetTotalLines()) }</span>
						</div>
					}
				</div>
				<!-- Results summary for completed compositions -->
				if composition.GetStatus() == pb.CompositionStatus_COMPOSITION_STATUS_COMPLETE {
					<div class="mt-3 flex items-center gap-4 text-sm">
						if composition.GetThreadLength() > 0 {
							<span class="text-green-400">
								{ fmt.Sprintf("%.1fm thread", float32(composition.GetThreadLength())/1000) }
							</span>
						}
					</div>
				}
			</div>
			<!-- Right side: Preview and actions -->
			<div class="flex items-center gap-3 ml-4">
				<!-- Small preview for completed compositions -->
				if composition.GetStatus() == pb.CompositionStatus_COMPOSITION_STATUS_COMPLETE && composition.GetPreviewUrl() != "" {
					<img
						src={ composition.GetPreviewUrl() }
						alt="Composition preview"
						class="w-16 h-16 rounded-lg object-cover border border-dark-400/50"
					/>
				}
				<!-- Action buttons -->
				<div class="flex flex-col gap-2">
					<!-- View details button -->
					@button.Button(button.Props{
						Variant: button.VariantOutline,
						Class:   "text-xs px-2 py-1",
					}) {
						<a href={ templ.SafeURL("/dashboard/arts/" + artID + "/composition/" + extractCompositionID(composition.GetName())) } class="flex items-center gap-1">
							@MaterialIcon("visibility", "")
							View
						</a>
					}
					<!-- New composition from settings button -->
					@button.Button(button.Props{
						Variant: button.VariantGhost,
						Class:   "text-xs px-2 py-1",
					}) {
						<a href={ templ.SafeURL("/dashboard/arts/" + artID + "/composition/new?from=" + extractCompositionID(composition.GetName())) } class="flex items-center gap-1" title="Create new composition with these settings">
							@MaterialIcon("content_copy", "")
							Copy
						</a>
					}
					<!-- Delete button for failed compositions -->
					if composition.GetStatus() == pb.CompositionStatus_COMPOSITION_STATUS_FAILED {
						@button.Button(button.Props{
							Variant: button.VariantDestructive,
							Class:   "text-xs px-2 py-1",
						}) {
							<button
								type="button"
								class="flex items-center gap-1"
								hx-delete={ "/dashboard/arts/" + artID + "/composition/" + extractCompositionID(composition.GetName()) }
								hx-confirm="Are you sure you want to delete this failed composition?"
								hx-target="closest .bg-dark-300"
								hx-swap="outerHTML"
								title="Delete this failed composition"
							>
								@MaterialIcon("delete", "")
								Delete
							</button>
						}
					}
				</div>
			</div>
		</div>
	</div>
}
