name: Infrastructure Plan

on:
  pull_request:
    paths:
      - 'terraform/**'
    branches: [main, master, develop]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: us-central1

jobs:
  terraform-plan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      pull-requests: write
    strategy:
      matrix:
        environment: [staging]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "~1.5"

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v1

      - name: Terraform Init
        working-directory: terraform/environments/${{ matrix.environment }}
        run: terraform init

      - name: Terraform Validate
        working-directory: terraform/environments/${{ matrix.environment }}
        run: terraform validate

      - name: Terraform Format Check
        working-directory: terraform/environments/${{ matrix.environment }}
        run: terraform fmt -check -recursive

      - name: Terraform Plan
        id: plan
        working-directory: terraform/environments/${{ matrix.environment }}
        run: |
          terraform plan -no-color -out=tfplan
          terraform show -no-color tfplan > plan.txt
          
          # Extract plan summary
          echo "### Terraform Plan Summary" > plan_summary.txt
          echo "" >> plan_summary.txt
          
          # Count changes
          adds=$(grep -c "will be created" plan.txt || echo "0")
          changes=$(grep -c "will be updated" plan.txt || echo "0")
          destroys=$(grep -c "will be destroyed" plan.txt || echo "0")
          
          echo "- **Resources to add**: $adds" >> plan_summary.txt
          echo "- **Resources to change**: $changes" >> plan_summary.txt
          echo "- **Resources to destroy**: $destroys" >> plan_summary.txt
          echo "" >> plan_summary.txt
          
          if [ "$destroys" -gt 0 ]; then
            echo "⚠️ **WARNING: This plan will destroy resources!**" >> plan_summary.txt
            echo "" >> plan_summary.txt
          fi

      - name: Security Scan
        working-directory: terraform/environments/${{ matrix.environment }}
        run: |
          # Install tfsec if available
          if command -v tfsec &> /dev/null; then
            echo "Running security scan with tfsec..."
            tfsec . --format json > tfsec_results.json || true
            
            # Check for critical/high severity issues
            critical_issues=$(jq '.results[]? | select(.severity == "CRITICAL")' tfsec_results.json | jq -s length)
            high_issues=$(jq '.results[]? | select(.severity == "HIGH")' tfsec_results.json | jq -s length)
            
            echo "Security scan results:" > security_summary.txt
            echo "- Critical issues: $critical_issues" >> security_summary.txt
            echo "- High severity issues: $high_issues" >> security_summary.txt
            
            if [ "$critical_issues" -gt 0 ] || [ "$high_issues" -gt 0 ]; then
              echo "⚠️ Security issues found! Please review before merging." >> security_summary.txt
            else
              echo "✅ No critical or high severity security issues found." >> security_summary.txt
            fi
          else
            echo "✅ tfsec not available - skipping security scan" > security_summary.txt
          fi

      - name: Cost Estimation
        working-directory: terraform/environments/${{ matrix.environment }}
        run: |
          # Install infracost if available
          if command -v infracost &> /dev/null; then
            echo "Generating cost estimate..."
            infracost breakdown --path . --format json > infracost.json || true
            
            # Extract monthly cost
            monthly_cost=$(jq -r '.totalMonthlyCost // "0"' infracost.json)
            currency=$(jq -r '.currency // "USD"' infracost.json)
            
            echo "### Cost Estimate" > cost_summary.txt
            echo "" >> cost_summary.txt
            echo "- **Estimated monthly cost**: $currency $monthly_cost" >> cost_summary.txt
            echo "" >> cost_summary.txt
            
            # Check if over budget
            if (( $(echo "$monthly_cost > 50" | bc -l) )); then
              echo "⚠️ **WARNING: Estimated cost exceeds $50 budget!**" >> cost_summary.txt
            else
              echo "✅ Estimated cost is within $50 budget." >> cost_summary.txt
            fi
          else
            echo "### Cost Estimate" > cost_summary.txt
            echo "" >> cost_summary.txt
            echo "infracost not available - manual cost review recommended" >> cost_summary.txt
          fi

      - name: Comment PR with Plan
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            const envDir = `terraform/environments/${{ matrix.environment }}`;
            
            // Read plan summary
            let planSummary = '';
            const planSummaryPath = path.join(envDir, 'plan_summary.txt');
            if (fs.existsSync(planSummaryPath)) {
              planSummary = fs.readFileSync(planSummaryPath, 'utf8');
            }
            
            // Read security summary
            let securitySummary = '';
            const securitySummaryPath = path.join(envDir, 'security_summary.txt');
            if (fs.existsSync(securitySummaryPath)) {
              securitySummary = fs.readFileSync(securitySummaryPath, 'utf8');
            }
            
            // Read cost summary
            let costSummary = '';
            const costSummaryPath = path.join(envDir, 'cost_summary.txt');
            if (fs.existsSync(costSummaryPath)) {
              costSummary = fs.readFileSync(costSummaryPath, 'utf8');
            }
            
            // Read full plan
            let fullPlan = '';
            const planPath = path.join(envDir, 'plan.txt');
            if (fs.existsSync(planPath)) {
              fullPlan = fs.readFileSync(planPath, 'utf8');
              // Truncate if too long
              if (fullPlan.length > 60000) {
                fullPlan = fullPlan.substring(0, 60000) + '\n... (truncated)';
              }
            }
            
            const body = `## Terraform Plan - ${{ matrix.environment }} 📋
            
            ${planSummary}
            
            ### Security Analysis 🔒
            ${securitySummary}
            
            ${costSummary}
            
            <details>
            <summary>Show Full Plan</summary>
            
            \`\`\`hcl
            ${fullPlan}
            \`\`\`
            
            </details>
            
            ---
            **Environment**: ${{ matrix.environment }}  
            **Plan Status**: ${{ steps.plan.outcome }}  
            **Commit**: ${{ github.sha }}
            `;
            
            // Find existing comment
            const comments = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            
            const existingComment = comments.data.find(comment => 
              comment.body.includes(`## Terraform Plan - ${{ matrix.environment }}`)
            );
            
            if (existingComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                comment_id: existingComment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            }

  validation-summary:
    runs-on: ubuntu-latest
    needs: terraform-plan
    if: always()
    steps:
      - name: Validation Summary
        run: |
          echo "## Infrastructure Validation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.terraform-plan.result }}" == "success" ]]; then
            echo "✅ **All validation checks passed**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "The infrastructure changes are ready for review." >> $GITHUB_STEP_SUMMARY
            echo "Once approved, merge to deploy to staging." >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Validation checks failed**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Please fix the issues before merging:" >> $GITHUB_STEP_SUMMARY
            echo "- Check Terraform syntax and validation" >> $GITHUB_STEP_SUMMARY
            echo "- Review security scan results" >> $GITHUB_STEP_SUMMARY
            echo "- Verify cost estimates are within budget" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Review the plan comments on this PR" >> $GITHUB_STEP_SUMMARY
          echo "2. Verify security and cost implications" >> $GITHUB_STEP_SUMMARY
          echo "3. Get approval from infrastructure team" >> $GITHUB_STEP_SUMMARY
          echo "4. Merge to automatically deploy changes" >> $GITHUB_STEP_SUMMARY