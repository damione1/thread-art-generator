FROM golang:1.24.0 as go-tools

# Install system dependencies
RUN apt-get update && apt-get install -y unzip curl jq

# Install specific version of protoc
RUN PROTOC_VERSION="25.3" && \
    PROTOC_ZIP=protoc-${PROTOC_VERSION}-linux-x86_64.zip && \
    curl -OL https://github.com/protocolbuffers/protobuf/releases/download/v${PROTOC_VERSION}/${PROTOC_ZIP} && \
    unzip -o ${PROTOC_ZIP} -d /usr/local bin/protoc && \
    unzip -o ${PROTOC_ZIP} -d /usr/local 'include/*' && \
    rm -f ${PROTOC_ZIP}

# Install Go proto tools with specific versions
RUN go install github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-grpc-gateway@v2.20.0 && \
    go install google.golang.org/protobuf/cmd/protoc-gen-go@v1.36.6 && \
    go install github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2@v2.20.0 && \
    go install github.com/bufbuild/connect-go/cmd/protoc-gen-connect-go@v1.4.0

# Install Buf CLI
RUN go install github.com/bufbuild/buf/cmd/buf@latest

FROM node:20 as ts-tools

# Update npm to latest version
RUN npm install -g npm@latest

# Install TS proto tools with specific versions
RUN npm install -g \
    @bufbuild/protoc-gen-es@1.4.1 \
    @connectrpc/protoc-gen-connect-es@1.1.3 \
    @bufbuild/protobuf@1.4.1 \
    @connectrpc/connect@1.1.3 \
    @connectrpc/connect-web@1.1.3

# Final stage
FROM ubuntu:latest

# Install curl and unzip for potential downloads
RUN apt-get update && apt-get install -y curl unzip

# Copy protoc and includes from go-tools stage
COPY --from=go-tools /usr/local/bin/protoc /usr/local/bin/
COPY --from=go-tools /usr/local/include /usr/local/include

# Copy Go tools from go-tools stage
COPY --from=go-tools /go/bin/* /usr/local/bin/

# Copy NodeJS and its plugins
COPY --from=ts-tools /usr/local/bin /usr/local/bin
COPY --from=ts-tools /usr/local/lib /usr/local/lib

# Set working directory
WORKDIR /app/proto

# Create proto directories
RUN mkdir -p /app/core/pb /app/web/src/lib/pb /app/api/openapi

# Create a wrapper script that ensures we're in the right directory
RUN echo '#!/bin/sh' > /usr/local/bin/generate-protos.sh && \
    echo 'cd /app/proto && buf generate "$@"' >> /usr/local/bin/generate-protos.sh && \
    chmod +x /usr/local/bin/generate-protos.sh

# Set the entrypoint to our wrapper script
ENTRYPOINT ["/usr/local/bin/generate-protos.sh"]
