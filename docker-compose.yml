services:
  migrations:
    image: migrations-image
    depends_on:
      - db
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}

  api:
    image: api-image
    ports:
      - "9090:9090"
      - "9091:9091"
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      HTTP_SERVER_PORT: ${HTTP_SERVER_PORT}
      GRPC_SERVER_PORT: ${GRPC_SERVER_PORT}
      TOKEN_SYMMETRIC_KEY: ${TOKEN_SYMMETRIC_KEY}
      ACCESS_TOKEN_DURATION: ${ACCESS_TOKEN_DURATION}
      REFRESH_TOKEN_DURATION: ${REFRESH_TOKEN_DURATION}
      ENVIRONMENT: ${ENVIRONMENT}
      SENDINBLUE_API_KEY: ${SENDINBLUE_API_KEY}
      FRONTEND_URL: ${FRONTEND_URL}
      AUTH0_DOMAIN: ${AUTH0_DOMAIN}
      AUTH0_AUDIENCE: ${AUTH0_AUDIENCE}
      AUTH0_CLIENT_ID: ${AUTH0_CLIENT_ID}
      AUTH0_CLIENT_SECRET: ${AUTH0_CLIENT_SECRET}
    depends_on:
      - db
      - migrations
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`tag.local`)"
      - "traefik.http.routers.api.entrypoints=websecure"
      - "traefik.http.routers.api.tls=true"
      - "traefik.http.services.api.loadbalancer.server.port=9090"

  db:
    image: postgres:latest
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - threadmachine:/var/lib/postgresql/data
    container_name: db
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5

  go-proto-generator:
    build:
      context: .
      dockerfile: Infra/Dockerfiles/Dockerfile-go-proto
    command: make build-go-proto
    volumes:
      - ./:/app

  generate-models:
    build:
      context: .
      dockerfile: Infra/Dockerfiles/Dockerfile-db-models
    depends_on:
      - db
      - migrations
    command: sqlboiler psql --add-global-variants --wipe
    volumes:
      - ./:/app
    container_name: "generate-models"
    restart: "no"
    environment:
      PSQL_DBNAME: ${POSTGRES_DB}
      PSQL_USER: ${POSTGRES_USER}
      PSQL_PASSWORD: ${POSTGRES_PASSWORD}
      PSQL_HOST: db

  minio:
    image: "bitnami/minio:latest"
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_DEFAULT_BUCKETS: local-bucket

  traefik:
    image: traefik-image
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080" # Traefik dashboard
    volumes:
      - ./traefik:/etc/traefik
      - ./certs:/certs
      - /var/run/docker.sock:/var/run/docker.sock:ro
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.file.directory=/etc/traefik"
      - "--providers.file.watch=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
    container_name: traefik

volumes:
  threadmachine:
