services:
  migrations:
    image: migrations-image
    depends_on:
      - db
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}

  api:
    image: api-image
    ports:
      - "9090:9090"
      - "9091:9091"
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      HTTP_SERVER_PORT: ${HTTP_SERVER_PORT}
      GRPC_SERVER_PORT: ${GRPC_SERVER_PORT}
      TOKEN_SYMMETRIC_KEY: ${TOKEN_SYMMETRIC_KEY}
      ACCESS_TOKEN_DURATION: ${ACCESS_TOKEN_DURATION}
      REFRESH_TOKEN_DURATION: ${REFRESH_TOKEN_DURATION}
      ENVIRONMENT: ${ENVIRONMENT}
      SENDINBLUE_API_KEY: ${SENDINBLUE_API_KEY}
      NEXTAUTH_URL: ${NEXTAUTH_URL}
    depends_on:
      - db
      - migrations
  db:
    image: postgres:latest
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - threadmachine:/var/lib/postgresql/data
    container_name: db
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5

  go-proto-generator:
    build:
      context: .
      dockerfile: Infra/Dockerfiles/Dockerfile-go-proto
    command: make build-go-proto
    volumes:
      - ./:/app

  generate-models:
    build:
      context: .
      dockerfile: Infra/Dockerfiles/Dockerfile-db-models
    depends_on:
      - db
      - migrations
    command: sqlboiler psql --add-global-variants --wipe
    volumes:
      - ./:/app
    container_name: "generate-models"
    restart: "no"
    environment:
      PSQL_DBNAME: ${POSTGRES_DB}
      PSQL_USER: ${POSTGRES_USER}
      PSQL_PASSWORD: ${POSTGRES_PASSWORD}
      PSQL_HOST: db

  minio:
    image: "bitnami/minio:latest"
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_DEFAULT_BUCKETS: local-bucket

    # worker:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   command: worker  # Overriding the default CMD in the Dockerfile
  #   ports:
  #     - '8080:8080'
  #   environment:
  #     - QUEUE_HOST=rabbitmq
  #   depends_on:
  #     - rabbitmq

  web:
    build:
      context: .
      dockerfile: Infra/Dockerfiles/Dockerfile-web
    ports:
      - "3000:3000"
    volumes:
      - ./web:/app
      - /app/node_modules
    environment:
      NEXTAUTH_URL: ${NEXTAUTH_URL}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      NEXT_PUBLIC_GRPC_API: ${GRPC_API}
      NEXT_PUBLIC_HTTP_API: ${HTTP_API}

  # rabbitmq:
  #   image: rabbitmq:management
  #   ports:
  #     - "15672:15672"
  #     - "5672:5672"

volumes:
  threadmachine:
