services:
  api:
    image: api-image
    ports:
      - "9090:9090" # HTTP server port for Connect
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      HTTP_SERVER_PORT: ${HTTP_SERVER_PORT:-9090}
      GRPC_SERVER_PORT: ${GRPC_SERVER_PORT}
      TOKEN_SYMMETRIC_KEY: ${TOKEN_SYMMETRIC_KEY}
      INTERNAL_API_KEY: ${INTERNAL_API_KEY:-dev-api-key-12345}
      ENVIRONMENT: ${ENVIRONMENT}
      SENDINBLUE_API_KEY: ${SENDINBLUE_API_KEY}
      FRONTEND_URL: ${FRONTEND_URL}
      # Firebase configuration
      FIREBASE_PROJECT_ID: ${FIREBASE_PROJECT_ID}
      FIREBASE_AUTH_EMULATOR_HOST: ${FIREBASE_AUTH_EMULATOR_HOST}
      # Storage configuration
      STORAGE_PROVIDER: ${STORAGE_PROVIDER}
      STORAGE_BUCKET: ${STORAGE_BUCKET}
      STORAGE_REGION: ${STORAGE_REGION}
      STORAGE_INTERNAL_ENDPOINT: ${STORAGE_INTERNAL_ENDPOINT}
      STORAGE_EXTERNAL_ENDPOINT: ${STORAGE_EXTERNAL_ENDPOINT}
      STORAGE_USE_SSL: ${STORAGE_USE_SSL}
      STORAGE_FORCE_EXTERNAL_SSL: ${STORAGE_FORCE_EXTERNAL_SSL}
      STORAGE_ACCESS_KEY: ${STORAGE_ACCESS_KEY}
      STORAGE_SECRET_KEY: ${STORAGE_SECRET_KEY}
      # Queue configuration
      RABBITMQ_URL: ${RABBITMQ_URL}
      QUEUE_COMPOSITION_PROCESSING: ${QUEUE_COMPOSITION_PROCESSING}
    depends_on:
      - db
      - rabbitmq

  # Worker service for processing compositions
  worker:
    image: worker-image
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      ENVIRONMENT: ${ENVIRONMENT}
      # Storage configuration
      STORAGE_PROVIDER: ${STORAGE_PROVIDER}
      STORAGE_BUCKET: ${STORAGE_BUCKET}
      STORAGE_REGION: ${STORAGE_REGION}
      STORAGE_INTERNAL_ENDPOINT: ${STORAGE_INTERNAL_ENDPOINT}
      STORAGE_EXTERNAL_ENDPOINT: ${STORAGE_EXTERNAL_ENDPOINT}
      STORAGE_USE_SSL: ${STORAGE_USE_SSL}
      STORAGE_FORCE_EXTERNAL_SSL: ${STORAGE_FORCE_EXTERNAL_SSL}
      STORAGE_ACCESS_KEY: ${STORAGE_ACCESS_KEY}
      STORAGE_SECRET_KEY: ${STORAGE_SECRET_KEY}
      # Queue configuration
      RABBITMQ_URL: ${RABBITMQ_URL}
      QUEUE_COMPOSITION_PROCESSING: ${QUEUE_COMPOSITION_PROCESSING}
    depends_on:
      - db
      - rabbitmq
      - api
    restart: unless-stopped

  # Go+HTMX Frontend service
  client:
    image: frontend-image
    ports:
      - "8080:8080"
    environment:
      - FRONTEND_PORT=8080
      - API_URL=${API_URL:-http://api:9090}
      - FRONTEND_URL=${FRONTEND_URL}
      - REDIS_ADDR=redis:6379
      - COOKIE_HASH_KEY=${COOKIE_HASH_KEY:-ADefaultHashKeyFor32BytesSecureHashing}
      - COOKIE_BLOCK_KEY=${COOKIE_BLOCK_KEY:-ADefaultBlockKeyShould32BytesLength}
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - COOKIE_DOMAIN=${COOKIE_DOMAIN:-}
      - FIREBASE_AUTH_EMULATOR_HOST=${FIREBASE_AUTH_EMULATOR_HOST}
      - FIREBASE_PROJECT_ID=${FIREBASE_PROJECT_ID}
    volumes:
      - ./client/internal:/app/client/internal
      - ./client/public:/app/client/public
      - ./client/cmd:/app/client/cmd
      - ./build/frontend:/app/frontend
    depends_on:
      - api
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  # Redis for session storage
  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./Infra/redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  # RabbitMQ service for queue
  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672" # AMQP port
      - "15672:15672" # Management UI port
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    container_name: rabbitmq
    restart: unless-stopped

  db:
    image: postgres:latest
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - threadmachine:/var/lib/postgresql/data
    container_name: db
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5

  minio:
    image: "bitnami/minio:latest"
    container_name: minio
    ports:
      - "9000:9000" # For API operations
      - "9001:9001" # For MinIO Console UI
    environment:
      MINIO_ROOT_USER: ${STORAGE_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${STORAGE_SECRET_KEY}
      MINIO_DEFAULT_BUCKETS: ${STORAGE_BUCKET}
      # Allow direct access without forcing SSL
      MINIO_SERVER_URL: http://localhost:9000
      MINIO_BROWSER_REDIRECT_URL: http://localhost:9001
      # Allow anonymous access for GET operations
      MINIO_BROWSER_LOGIN_ANIMATION: off
      MINIO_ANONYMOUS_POLICY: download
    volumes:
      - ./infra/minio/data:/data
      - ./infra/minio/config:/root/.minio
    depends_on:
      - db
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

volumes:
  threadmachine:
  rabbitmq_data:
  redis_data:

networks:
  default:
    name: thread-art-network
