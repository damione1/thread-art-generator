version: "3.9"

services:
  migrations:
    build:
      context: .
      dockerfile: Infra/Dockerfiles/Dockerfile-migrations
    depends_on:
      - db
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
  api:
    build:
      context: .
      dockerfile: Infra/Dockerfiles/Dockerfile-api
    ports:
      - "9090:9090"
      - "9091:9091"
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      HTTP_SERVER_ADDRESS: ${HTTP_SERVER_ADDRESS}
      GRPC_SERVER_ADDRESS: ${GRPC_SERVER_ADDRESS}
      TOKEN_SYMMETRIC_KEY: ${TOKEN_SYMMETRIC_KEY}
    depends_on:
      - db
      - migrations

  # worker:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   command: worker  # Overriding the default CMD in the Dockerfile
  #   ports:
  #     - '8080:8080'
  #   environment:
  #     - QUEUE_HOST=rabbitmq
  #   depends_on:
  #     - rabbitmq

  # front-end:
  #   build:
  #     context: frontend
  #   container_name: front-end
  #   working_dir: /usr/src/app
  #   volumes:
  #     - ./frontend:/usr/src/app
  #     - /usr/src/app/node_modules
  #   tty: true
  #   ports:
  #     - "5173:5173"
  #   command: npm run dev
  db:
    image: postgres:latest
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - threadmachine:/var/lib/postgresql/data
    container_name: db
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5
  adminer:
    image: adminer:latest
    restart: always
    depends_on:
      - db
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: db
      ADMINER_DEFAULT_USER: ${POSTGRES_USER}
      ADMINER_DEFAULT_PASSWORD: ${POSTGRES_PASSWORD}
      ADMINER_DEFAULT_TYPE: postgresql
      ADMINER_DEFAULT_PORT: 5432
      ADMINER_DEFAULT_DB: ${POSTGRES_DB}
      ADMINER_DESIGN: galkaev

  go-proto-generator:
    build:
      context: .
      dockerfile: Infra/Dockerfiles/Dockerfile-proto
    command: make build-go-proto
    volumes:
      - ./:/app
    profiles:
      - manual

  web-proto-generator:
    build:
      context: .
      dockerfile: Infra/Dockerfiles/Dockerfile-proto
    command: make build-web-proto
    volumes:
      - ./:/app
    container_name: web-proto-generator
    profiles:
      - manual

  generate-models:
    build:
      context: .
      dockerfile: Dockerfile-db-models
    depends_on:
      - db
    command: sqlboiler psql --add-global-variants --wipe
    volumes:
      - ./:/app
    container_name: "generate-models"
    restart: "no"
    profiles:
      - manual
    environment:
      PSQL_DBNAME: ${POSTGRES_DB}
      PSQL_USER: ${POSTGRES_USER}
      PSQL_PASSWORD: ${POSTGRES_PASSWORD}
      PSQL_HOST: db

  # rabbitmq:
  #   image: rabbitmq:management
  #   ports:
  #     - '15672:15672'
  #     - '5672:5672'

volumes:
  threadmachine:
