syntax = "proto3";

package pb;
import "google/protobuf/timestamp.proto";
import "google/protobuf/field_mask.proto";
import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "buf/validate/validate.proto";

option go_package = "thread-art-generator/core/proto;pb";

// Status of the art
enum ArtStatus {
    // Default unspecified status
    ART_STATUS_UNSPECIFIED = 0;
    // Art is created but image is pending upload
    ART_STATUS_PENDING_IMAGE = 1;
    // Image is uploaded and being processed
    ART_STATUS_PROCESSING = 2;
    // Art is complete with processed image
    ART_STATUS_COMPLETE = 3;
    // Processing failed
    ART_STATUS_FAILED = 4;
    // Art is archived/hidden but not deleted
    ART_STATUS_ARCHIVED = 5;
}

message Art {
    option (google.api.resource) = {
        type: "art.example.com/Art"
        pattern: "users/{user}/arts/{art}"
    };

    // The name of the Art resource.
    // For example: "users/123/arts/456"
    string name = 1 [
        (google.api.field_behavior) = OUTPUT_ONLY,
        (google.api.resource_reference) = {type: "art.example.com/Art"}
        ];

    // Title is the art's title.
    string title = 2 [
        (google.api.field_behavior) = REQUIRED,
        (buf.validate.field).cel = {
            id: "art.title.required",
            message: "Title is required",
            expression: "this.size() > 0"
        }
    ];

    // ImageURL is the art's image URL.
    string image_url = 3 [
        (google.api.field_behavior) = OUTPUT_ONLY,
        (buf.validate.field).cel = {
            id: "art.image_url.uri_when_present",
            message: "Image URL must be a valid URI when present",
            expression: "this == '' || this.matches('^https?://.+')"
        }
    ];

    // Status of the art
    ArtStatus status = 4 [(google.api.field_behavior) = OUTPUT_ONLY];

    // The name of the User resource who is the author of the art.
    // For example: "users/456"
    string author = 5 [
        (google.api.field_behavior) = OUTPUT_ONLY,
        (google.api.resource_reference).type = "art.example.com/User"
    ];

    // CreatedAt is the art's creation time. Output only.
    google.protobuf.Timestamp create_time = 6 [(google.api.field_behavior) = OUTPUT_ONLY];

    // UpdatedAt is the art's last update time.
    google.protobuf.Timestamp update_time = 7 [(google.api.field_behavior) = OUTPUT_ONLY];
}

message CreateArtRequest {
    // The parent which owns the arts.
    // For example: "users/456"
    string parent = 1 [
        (google.api.field_behavior) = REQUIRED,
        (google.api.resource_reference).type = "art.example.com/User",
        (buf.validate.field).cel = {
            id: "get_user.name.format",
            message: "User resource name is required and must start with 'users/'",
            expression: "this.size() > 0 && this.startsWith('users/')"
        }
    ];

    // The art to create.
    Art art = 2 [
        (google.api.field_behavior) = REQUIRED,
        (buf.validate.field).required = true
    ];
}

message UpdateArtRequest {
    // The Art resource to update.
    Art art = 1 [
        (google.api.field_behavior) = REQUIRED,
        (buf.validate.field).required = true
    ];

    // The update mask applies to the resource.
    google.protobuf.FieldMask update_mask = 2 [
        (buf.validate.field).required = true
    ];
}

message GetArtRequest {
    // The name of the Art resource.
    // For example: "users/{user}/arts/{art}"
    string name = 1 [
        (google.api.field_behavior) = REQUIRED,
        (google.api.resource_reference) = {type: "art.example.com/Art"},
        (buf.validate.field).cel = {
            id: "get_art.name.format",
            message: "Art resource name is required and must follow pattern 'users/*/arts/*'",
            expression: "this.size() > 0 && this.matches('^users/[^/]+/arts/[^/]+$')"
        }
    ];
}

message ListArtsRequest {
    // The parent which owns the arts.
    // For example: "users/456"
    string parent = 1 [
        (google.api.field_behavior) = REQUIRED,
        (google.api.resource_reference) = {type: "art.example.com/User"},
        (buf.validate.field).cel = {
            id: "list_arts.parent.format",
            message: "Parent resource name is required and must start with 'users/'",
            expression: "this.size() > 0 && this.startsWith('users/')"
        }
    ];

    // The maximum number of arts to return. The service may return fewer than this value.
    int32 page_size = 2 [
        (buf.validate.field).int32 = {gt: 0, lte: 100}
    ];

    // A page token, received from a previous `ListArts` call.
    string page_token = 3;
}

message ListArtsResponse {
    // The arts returned.
    repeated Art arts = 1;

    // A token to retrieve next page of results.
    // Pass this value in ListArtsRequest.page_token field in the subsequent call to `ListArts` method to retrieve the next page of results.
    string next_page_token = 2;
}

message DeleteArtRequest {
    // The name of the Art resource.
    // For example: "users/123/arts/456"
    string name = 1 [
        (google.api.field_behavior) = REQUIRED,
        (google.api.resource_reference) = {type: "art.example.com/Art"},
        (buf.validate.field).cel = {
            id: "delete_art.name.format",
            message: "Art resource name is required and must follow pattern 'users/*/arts/*'",
            expression: "this.size() > 0 && this.matches('^users/[^/]+/arts/[^/]+$')"
        }
    ];
}

message GetArtUploadUrlRequest {
    // The name of the Art resource to upload an image for.
    // For example: "users/123/arts/456"
    string name = 1 [
        (google.api.field_behavior) = REQUIRED,
        (google.api.resource_reference) = {type: "art.example.com/Art"},
        (buf.validate.field).cel = {
            id: "get_art_upload_url.name.format",
            message: "Art resource name is required and must follow pattern 'users/*/arts/*'",
            expression: "this.size() > 0 && this.matches('^users/[^/]+/arts/[^/]+$')"
        }
    ];
}

message GetArtUploadUrlResponse {
    // The signed URL to upload the art image to
    string upload_url = 1;

    // The expiration time for the signed URL
    google.protobuf.Timestamp expiration_time = 2;
}

message ConfirmArtImageUploadRequest {
    // The name of the Art resource that has been uploaded.
    // For example: "users/123/arts/456"
    string name = 1 [
        (google.api.field_behavior) = REQUIRED,
        (google.api.resource_reference) = {type: "art.example.com/Art"},
        (buf.validate.field).cel = {
            id: "confirm_art_image_upload.name.format",
            message: "Art resource name is required and must follow pattern 'users/*/arts/*'",
            expression: "this.size() > 0 && this.matches('^users/[^/]+/arts/[^/]+$')"
        }
    ];
}
