syntax = "proto3";

package pb;
import "user.proto";
import "art.proto";
import "media.proto";
import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/descriptor.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "thread-art-generator/pkg/proto;pb";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Thread art Generator API"
    version: "0.0.1"
    contact: {
      name: "Damien Goehrig"
      url: "github.com/Damione1/thread-art-generator"
      email: "thread-art-generator@damiengoehrig.ca"
    }
  }
  security_definitions: {
    security: {
      key: "Bearer"
      value: {
        type: TYPE_API_KEY
        in: IN_HEADER
        name: "Authorization"
        description: "Access token obtained from the login endpoint. Bearer authentication should be used with the format: 'Bearer {access_token}'."
      }
    }
  }
  security: {
    security_requirement: { key: "Bearer" value: {} }
  }
  tags: {
    name: "Authentication"
    description: "Endpoints for authentication"
  }
  tags: {
    name: "Users"
    description: "Endpoints for user management"
  }
  tags: {
    name: "Arts"
    description: "Endpoints for art management"
  }
};

service ArtGeneratorService {
  rpc CreateSession (CreateSessionRequest) returns (CreateSessionResponse) {
    option (google.api.http) = {
      post: "/v1/sessions"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Log in a user"
      description: "Authenticate a user with their email and password and return an access token."
      security: {};
      tags: "Authentication";
    };
  }

  rpc DeleteSession (DeleteSessionRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/sessions/{refresh_token}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Logout a user"
      description: "Delete a user's session, effectively logging them out."
      tags: "Users";
    };
  }

  rpc RefreshToken (RefreshTokenRequest) returns (RefreshTokenResponse) {
    option (google.api.http) = {
      post: "/v1/tokens:refresh"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Refresh a user's token"
      description: "Refresh a user's authentication token."
      tags: "Users";
    };
  }

  rpc UpdateUser (UpdateUserRequest) returns (User) {
    option (google.api.http) = {
      patch: "/v1/users/{user.name}"
      body: "user"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Update a user's information"
      description: "Modify the information of a specific user."
      tags: "Users";
    };
  }

  rpc GetUser (GetUserRequest) returns (User) {
    option (google.api.http) = {
      get: "/v1/users/{name}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get a user's information"
      description: "Retrieve information for a specific user by their ID."
      tags: "Users";
    };
  }

  rpc ListUsers (ListUsersRequest) returns (ListUsersResponse) {
    option (google.api.http) = {
      get: "/v1/users"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List all users"
      description: "Retrieve a list of all users in the system."
      tags: "Users";
    };
  }

  rpc CreateUser (CreateUserRequest) returns (User) {
    option (google.api.http) = {
      post: "/v1/users"
      body: "user"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Create a new user"
      description: "Create a new user in the system."
      tags: "Users";
    };
  }

  rpc DeleteUser (DeleteUserRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/users/{name}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Delete a user"
      description: "Remove a specific user from the system."
      tags: "Users";
    };
  }

  rpc ResetPassword (ResetPasswordRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/users/{email}:resetPassword"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Reset a user's password"
      description: "Send a password reset email to a user's registered email address."
      tags: "Users";
    };
  }


  rpc CreateArt (CreateArtRequest) returns (Art) {
    option (google.api.http) = {
      post: "/v1/{parent=users/*}/arts"
      body: "art"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Create a new art"
      description: "Create a new art to the system."
      tags: "Arts";
    };
    option (google.api.method_signature) = "parent,art";
  }

  rpc GetArt (GetArtRequest) returns (Art) {
    option (google.api.http) = {
      get: "/v1/{name=authors/*/arts/*}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get a arts's information"
      description: "Retrieve information for a specific art by its ID."
      tags: "Arts";
    };
    option (google.api.method_signature) = "name";
  }

  rpc UpdateArt (UpdateArtRequest) returns (Art) {
    option (google.api.http) = {
      patch: "/v1/{art.name=users/*/arts/*}"
      body: "art"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Update a post's information"
      description: "Modify the information of a specific art."
      tags: "Arts";
    };
    option (google.api.method_signature) = "art,update_mask";
  }

  rpc ListArts (ListArtsRequest) returns (ListArtsResponse) {
    option (google.api.http) = {
      get: "/v1/{parent=users/*}/arts"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List all arts"
      description: "Retrieve a list of all arts in the system."
      tags: "Arts";
    };
    option (google.api.method_signature) = "parent";
  }

  rpc DeleteArt (DeleteArtRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/{name=users/*/arts/*}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Delete an art"
      description: "Remove a specific art from the system."
      tags: "Arts";
    };
    option (google.api.method_signature) = "name";
  }

  rpc CreateMedia (CreateMediaRequest) returns (Media) {
    option (google.api.http) = {
      post: "/v1/{parent=users/*}/medias"
      body: "media"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Create a new media"
      description: "Create a new media to the system."
      tags: "Medias";
    };
    option (google.api.method_signature) = "parent,media";
  }

  rpc GetMedia (GetMediaRequest) returns (Media) {
    option (google.api.http) = {
      get: "/v1/{name=authors/*/medias/*}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get a medias's information"
      description: "Retrieve information for a specific media by its ID."
      tags: "Medias";
    };
    option (google.api.method_signature) = "name";
  }

  rpc DeleteMedia (DeleteMediaRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/{name=users/*/medias/*}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Delete an media"
      description: "Remove a specific media from the system."
      tags: "Medias";
    };
    option (google.api.method_signature) = "name";
  }
}
