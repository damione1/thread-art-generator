/**
 * @fileoverview gRPC-Web generated client stub for pb
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.26.1
// source: services.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as google_protobuf_empty_pb from 'google-protobuf/google/protobuf/empty_pb'; // proto import: "google/protobuf/empty.proto"
import * as art_pb from './art_pb'; // proto import: "art.proto"
import * as user_pb from './user_pb'; // proto import: "user.proto"


export class ArtGeneratorServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorCreateSession = new grpcWeb.MethodDescriptor(
    '/pb.ArtGeneratorService/CreateSession',
    grpcWeb.MethodType.UNARY,
    user_pb.CreateSessionRequest,
    user_pb.CreateSessionResponse,
    (request: user_pb.CreateSessionRequest) => {
      return request.serializeBinary();
    },
    user_pb.CreateSessionResponse.deserializeBinary
  );

  createSession(
    request: user_pb.CreateSessionRequest,
    metadata?: grpcWeb.Metadata | null): Promise<user_pb.CreateSessionResponse>;

  createSession(
    request: user_pb.CreateSessionRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: user_pb.CreateSessionResponse) => void): grpcWeb.ClientReadableStream<user_pb.CreateSessionResponse>;

  createSession(
    request: user_pb.CreateSessionRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: user_pb.CreateSessionResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/pb.ArtGeneratorService/CreateSession',
        request,
        metadata || {},
        this.methodDescriptorCreateSession,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/pb.ArtGeneratorService/CreateSession',
    request,
    metadata || {},
    this.methodDescriptorCreateSession);
  }

  methodDescriptorDeleteSession = new grpcWeb.MethodDescriptor(
    '/pb.ArtGeneratorService/DeleteSession',
    grpcWeb.MethodType.UNARY,
    user_pb.DeleteSessionRequest,
    google_protobuf_empty_pb.Empty,
    (request: user_pb.DeleteSessionRequest) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  deleteSession(
    request: user_pb.DeleteSessionRequest,
    metadata?: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  deleteSession(
    request: user_pb.DeleteSessionRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  deleteSession(
    request: user_pb.DeleteSessionRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/pb.ArtGeneratorService/DeleteSession',
        request,
        metadata || {},
        this.methodDescriptorDeleteSession,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/pb.ArtGeneratorService/DeleteSession',
    request,
    metadata || {},
    this.methodDescriptorDeleteSession);
  }

  methodDescriptorRefreshToken = new grpcWeb.MethodDescriptor(
    '/pb.ArtGeneratorService/RefreshToken',
    grpcWeb.MethodType.UNARY,
    user_pb.RefreshTokenRequest,
    user_pb.RefreshTokenResponse,
    (request: user_pb.RefreshTokenRequest) => {
      return request.serializeBinary();
    },
    user_pb.RefreshTokenResponse.deserializeBinary
  );

  refreshToken(
    request: user_pb.RefreshTokenRequest,
    metadata?: grpcWeb.Metadata | null): Promise<user_pb.RefreshTokenResponse>;

  refreshToken(
    request: user_pb.RefreshTokenRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: user_pb.RefreshTokenResponse) => void): grpcWeb.ClientReadableStream<user_pb.RefreshTokenResponse>;

  refreshToken(
    request: user_pb.RefreshTokenRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: user_pb.RefreshTokenResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/pb.ArtGeneratorService/RefreshToken',
        request,
        metadata || {},
        this.methodDescriptorRefreshToken,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/pb.ArtGeneratorService/RefreshToken',
    request,
    metadata || {},
    this.methodDescriptorRefreshToken);
  }

  methodDescriptorUpdateUser = new grpcWeb.MethodDescriptor(
    '/pb.ArtGeneratorService/UpdateUser',
    grpcWeb.MethodType.UNARY,
    user_pb.UpdateUserRequest,
    user_pb.User,
    (request: user_pb.UpdateUserRequest) => {
      return request.serializeBinary();
    },
    user_pb.User.deserializeBinary
  );

  updateUser(
    request: user_pb.UpdateUserRequest,
    metadata?: grpcWeb.Metadata | null): Promise<user_pb.User>;

  updateUser(
    request: user_pb.UpdateUserRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: user_pb.User) => void): grpcWeb.ClientReadableStream<user_pb.User>;

  updateUser(
    request: user_pb.UpdateUserRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: user_pb.User) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/pb.ArtGeneratorService/UpdateUser',
        request,
        metadata || {},
        this.methodDescriptorUpdateUser,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/pb.ArtGeneratorService/UpdateUser',
    request,
    metadata || {},
    this.methodDescriptorUpdateUser);
  }

  methodDescriptorGetUser = new grpcWeb.MethodDescriptor(
    '/pb.ArtGeneratorService/GetUser',
    grpcWeb.MethodType.UNARY,
    user_pb.GetUserRequest,
    user_pb.User,
    (request: user_pb.GetUserRequest) => {
      return request.serializeBinary();
    },
    user_pb.User.deserializeBinary
  );

  getUser(
    request: user_pb.GetUserRequest,
    metadata?: grpcWeb.Metadata | null): Promise<user_pb.User>;

  getUser(
    request: user_pb.GetUserRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: user_pb.User) => void): grpcWeb.ClientReadableStream<user_pb.User>;

  getUser(
    request: user_pb.GetUserRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: user_pb.User) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/pb.ArtGeneratorService/GetUser',
        request,
        metadata || {},
        this.methodDescriptorGetUser,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/pb.ArtGeneratorService/GetUser',
    request,
    metadata || {},
    this.methodDescriptorGetUser);
  }

  methodDescriptorListUsers = new grpcWeb.MethodDescriptor(
    '/pb.ArtGeneratorService/ListUsers',
    grpcWeb.MethodType.UNARY,
    user_pb.ListUsersRequest,
    user_pb.ListUsersResponse,
    (request: user_pb.ListUsersRequest) => {
      return request.serializeBinary();
    },
    user_pb.ListUsersResponse.deserializeBinary
  );

  listUsers(
    request: user_pb.ListUsersRequest,
    metadata?: grpcWeb.Metadata | null): Promise<user_pb.ListUsersResponse>;

  listUsers(
    request: user_pb.ListUsersRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: user_pb.ListUsersResponse) => void): grpcWeb.ClientReadableStream<user_pb.ListUsersResponse>;

  listUsers(
    request: user_pb.ListUsersRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: user_pb.ListUsersResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/pb.ArtGeneratorService/ListUsers',
        request,
        metadata || {},
        this.methodDescriptorListUsers,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/pb.ArtGeneratorService/ListUsers',
    request,
    metadata || {},
    this.methodDescriptorListUsers);
  }

  methodDescriptorCreateUser = new grpcWeb.MethodDescriptor(
    '/pb.ArtGeneratorService/CreateUser',
    grpcWeb.MethodType.UNARY,
    user_pb.CreateUserRequest,
    user_pb.User,
    (request: user_pb.CreateUserRequest) => {
      return request.serializeBinary();
    },
    user_pb.User.deserializeBinary
  );

  createUser(
    request: user_pb.CreateUserRequest,
    metadata?: grpcWeb.Metadata | null): Promise<user_pb.User>;

  createUser(
    request: user_pb.CreateUserRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: user_pb.User) => void): grpcWeb.ClientReadableStream<user_pb.User>;

  createUser(
    request: user_pb.CreateUserRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: user_pb.User) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/pb.ArtGeneratorService/CreateUser',
        request,
        metadata || {},
        this.methodDescriptorCreateUser,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/pb.ArtGeneratorService/CreateUser',
    request,
    metadata || {},
    this.methodDescriptorCreateUser);
  }

  methodDescriptorDeleteUser = new grpcWeb.MethodDescriptor(
    '/pb.ArtGeneratorService/DeleteUser',
    grpcWeb.MethodType.UNARY,
    user_pb.DeleteUserRequest,
    google_protobuf_empty_pb.Empty,
    (request: user_pb.DeleteUserRequest) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  deleteUser(
    request: user_pb.DeleteUserRequest,
    metadata?: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  deleteUser(
    request: user_pb.DeleteUserRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  deleteUser(
    request: user_pb.DeleteUserRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/pb.ArtGeneratorService/DeleteUser',
        request,
        metadata || {},
        this.methodDescriptorDeleteUser,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/pb.ArtGeneratorService/DeleteUser',
    request,
    metadata || {},
    this.methodDescriptorDeleteUser);
  }

  methodDescriptorResetPassword = new grpcWeb.MethodDescriptor(
    '/pb.ArtGeneratorService/ResetPassword',
    grpcWeb.MethodType.UNARY,
    user_pb.ResetPasswordRequest,
    google_protobuf_empty_pb.Empty,
    (request: user_pb.ResetPasswordRequest) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  resetPassword(
    request: user_pb.ResetPasswordRequest,
    metadata?: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  resetPassword(
    request: user_pb.ResetPasswordRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  resetPassword(
    request: user_pb.ResetPasswordRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/pb.ArtGeneratorService/ResetPassword',
        request,
        metadata || {},
        this.methodDescriptorResetPassword,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/pb.ArtGeneratorService/ResetPassword',
    request,
    metadata || {},
    this.methodDescriptorResetPassword);
  }

  methodDescriptorValidateEmail = new grpcWeb.MethodDescriptor(
    '/pb.ArtGeneratorService/ValidateEmail',
    grpcWeb.MethodType.UNARY,
    user_pb.ValidateEmailRequest,
    google_protobuf_empty_pb.Empty,
    (request: user_pb.ValidateEmailRequest) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  validateEmail(
    request: user_pb.ValidateEmailRequest,
    metadata?: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  validateEmail(
    request: user_pb.ValidateEmailRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  validateEmail(
    request: user_pb.ValidateEmailRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/pb.ArtGeneratorService/ValidateEmail',
        request,
        metadata || {},
        this.methodDescriptorValidateEmail,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/pb.ArtGeneratorService/ValidateEmail',
    request,
    metadata || {},
    this.methodDescriptorValidateEmail);
  }

  methodDescriptorSendValidationEmail = new grpcWeb.MethodDescriptor(
    '/pb.ArtGeneratorService/SendValidationEmail',
    grpcWeb.MethodType.UNARY,
    user_pb.SendValidationEmailRequest,
    google_protobuf_empty_pb.Empty,
    (request: user_pb.SendValidationEmailRequest) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  sendValidationEmail(
    request: user_pb.SendValidationEmailRequest,
    metadata?: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  sendValidationEmail(
    request: user_pb.SendValidationEmailRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  sendValidationEmail(
    request: user_pb.SendValidationEmailRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/pb.ArtGeneratorService/SendValidationEmail',
        request,
        metadata || {},
        this.methodDescriptorSendValidationEmail,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/pb.ArtGeneratorService/SendValidationEmail',
    request,
    metadata || {},
    this.methodDescriptorSendValidationEmail);
  }

  methodDescriptorCreateArt = new grpcWeb.MethodDescriptor(
    '/pb.ArtGeneratorService/CreateArt',
    grpcWeb.MethodType.UNARY,
    art_pb.CreateArtRequest,
    art_pb.Art,
    (request: art_pb.CreateArtRequest) => {
      return request.serializeBinary();
    },
    art_pb.Art.deserializeBinary
  );

  createArt(
    request: art_pb.CreateArtRequest,
    metadata?: grpcWeb.Metadata | null): Promise<art_pb.Art>;

  createArt(
    request: art_pb.CreateArtRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: art_pb.Art) => void): grpcWeb.ClientReadableStream<art_pb.Art>;

  createArt(
    request: art_pb.CreateArtRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: art_pb.Art) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/pb.ArtGeneratorService/CreateArt',
        request,
        metadata || {},
        this.methodDescriptorCreateArt,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/pb.ArtGeneratorService/CreateArt',
    request,
    metadata || {},
    this.methodDescriptorCreateArt);
  }

  methodDescriptorGetArt = new grpcWeb.MethodDescriptor(
    '/pb.ArtGeneratorService/GetArt',
    grpcWeb.MethodType.UNARY,
    art_pb.GetArtRequest,
    art_pb.Art,
    (request: art_pb.GetArtRequest) => {
      return request.serializeBinary();
    },
    art_pb.Art.deserializeBinary
  );

  getArt(
    request: art_pb.GetArtRequest,
    metadata?: grpcWeb.Metadata | null): Promise<art_pb.Art>;

  getArt(
    request: art_pb.GetArtRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: art_pb.Art) => void): grpcWeb.ClientReadableStream<art_pb.Art>;

  getArt(
    request: art_pb.GetArtRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: art_pb.Art) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/pb.ArtGeneratorService/GetArt',
        request,
        metadata || {},
        this.methodDescriptorGetArt,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/pb.ArtGeneratorService/GetArt',
    request,
    metadata || {},
    this.methodDescriptorGetArt);
  }

  methodDescriptorUpdateArt = new grpcWeb.MethodDescriptor(
    '/pb.ArtGeneratorService/UpdateArt',
    grpcWeb.MethodType.UNARY,
    art_pb.UpdateArtRequest,
    art_pb.Art,
    (request: art_pb.UpdateArtRequest) => {
      return request.serializeBinary();
    },
    art_pb.Art.deserializeBinary
  );

  updateArt(
    request: art_pb.UpdateArtRequest,
    metadata?: grpcWeb.Metadata | null): Promise<art_pb.Art>;

  updateArt(
    request: art_pb.UpdateArtRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: art_pb.Art) => void): grpcWeb.ClientReadableStream<art_pb.Art>;

  updateArt(
    request: art_pb.UpdateArtRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: art_pb.Art) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/pb.ArtGeneratorService/UpdateArt',
        request,
        metadata || {},
        this.methodDescriptorUpdateArt,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/pb.ArtGeneratorService/UpdateArt',
    request,
    metadata || {},
    this.methodDescriptorUpdateArt);
  }

  methodDescriptorListArts = new grpcWeb.MethodDescriptor(
    '/pb.ArtGeneratorService/ListArts',
    grpcWeb.MethodType.UNARY,
    art_pb.ListArtsRequest,
    art_pb.ListArtsResponse,
    (request: art_pb.ListArtsRequest) => {
      return request.serializeBinary();
    },
    art_pb.ListArtsResponse.deserializeBinary
  );

  listArts(
    request: art_pb.ListArtsRequest,
    metadata?: grpcWeb.Metadata | null): Promise<art_pb.ListArtsResponse>;

  listArts(
    request: art_pb.ListArtsRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: art_pb.ListArtsResponse) => void): grpcWeb.ClientReadableStream<art_pb.ListArtsResponse>;

  listArts(
    request: art_pb.ListArtsRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: art_pb.ListArtsResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/pb.ArtGeneratorService/ListArts',
        request,
        metadata || {},
        this.methodDescriptorListArts,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/pb.ArtGeneratorService/ListArts',
    request,
    metadata || {},
    this.methodDescriptorListArts);
  }

  methodDescriptorDeleteArt = new grpcWeb.MethodDescriptor(
    '/pb.ArtGeneratorService/DeleteArt',
    grpcWeb.MethodType.UNARY,
    art_pb.DeleteArtRequest,
    google_protobuf_empty_pb.Empty,
    (request: art_pb.DeleteArtRequest) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  deleteArt(
    request: art_pb.DeleteArtRequest,
    metadata?: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  deleteArt(
    request: art_pb.DeleteArtRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  deleteArt(
    request: art_pb.DeleteArtRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/pb.ArtGeneratorService/DeleteArt',
        request,
        metadata || {},
        this.methodDescriptorDeleteArt,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/pb.ArtGeneratorService/DeleteArt',
    request,
    metadata || {},
    this.methodDescriptorDeleteArt);
  }

}

