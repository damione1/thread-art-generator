// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none"
// @generated from file google/rpc/context/audit_context.proto (package google.rpc.context, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Struct } from "../../protobuf/struct_pb";

/**
 * `AuditContext` provides information that is needed for audit logging.
 *
 * @generated from message google.rpc.context.AuditContext
 */
export class AuditContext extends Message<AuditContext> {
  /**
   * Serialized audit log.
   *
   * @generated from field: bytes audit_log = 1;
   */
  auditLog = new Uint8Array(0);

  /**
   * An API request message that is scrubbed based on the method annotation.
   * This field should only be filled if audit_log field is present.
   * Service Control will use this to assemble a complete log for Cloud Audit
   * Logs and Google internal audit logs.
   *
   * @generated from field: google.protobuf.Struct scrubbed_request = 2;
   */
  scrubbedRequest?: Struct;

  /**
   * An API response message that is scrubbed based on the method annotation.
   * This field should only be filled if audit_log field is present.
   * Service Control will use this to assemble a complete log for Cloud Audit
   * Logs and Google internal audit logs.
   *
   * @generated from field: google.protobuf.Struct scrubbed_response = 3;
   */
  scrubbedResponse?: Struct;

  /**
   * Number of scrubbed response items.
   *
   * @generated from field: int32 scrubbed_response_item_count = 4;
   */
  scrubbedResponseItemCount = 0;

  /**
   * Audit resource name which is scrubbed.
   *
   * @generated from field: string target_resource = 5;
   */
  targetResource = "";

  constructor(data?: PartialMessage<AuditContext>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.rpc.context.AuditContext";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "audit_log", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "scrubbed_request", kind: "message", T: Struct },
    { no: 3, name: "scrubbed_response", kind: "message", T: Struct },
    { no: 4, name: "scrubbed_response_item_count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "target_resource", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AuditContext {
    return new AuditContext().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AuditContext {
    return new AuditContext().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AuditContext {
    return new AuditContext().fromJsonString(jsonString, options);
  }

  static equals(a: AuditContext | PlainMessage<AuditContext> | undefined, b: AuditContext | PlainMessage<AuditContext> | undefined): boolean {
    return proto3.util.equals(AuditContext, a, b);
  }
}

