// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.4.1 with parameter "target=ts,import_extension=none"
// @generated from file google/rpc/http.proto (package google.rpc, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * Represents an HTTP request.
 *
 * @generated from message google.rpc.HttpRequest
 */
export class HttpRequest extends Message<HttpRequest> {
  /**
   * The HTTP request method.
   *
   * @generated from field: string method = 1;
   */
  method = "";

  /**
   * The HTTP request URI.
   *
   * @generated from field: string uri = 2;
   */
  uri = "";

  /**
   * The HTTP request headers. The ordering of the headers is significant.
   * Multiple headers with the same key may present for the request.
   *
   * @generated from field: repeated google.rpc.HttpHeader headers = 3;
   */
  headers: HttpHeader[] = [];

  /**
   * The HTTP request body. If the body is not expected, it should be empty.
   *
   * @generated from field: bytes body = 4;
   */
  body = new Uint8Array(0);

  constructor(data?: PartialMessage<HttpRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.rpc.HttpRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "method", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "headers", kind: "message", T: HttpHeader, repeated: true },
    { no: 4, name: "body", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HttpRequest {
    return new HttpRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HttpRequest {
    return new HttpRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HttpRequest {
    return new HttpRequest().fromJsonString(jsonString, options);
  }

  static equals(a: HttpRequest | PlainMessage<HttpRequest> | undefined, b: HttpRequest | PlainMessage<HttpRequest> | undefined): boolean {
    return proto3.util.equals(HttpRequest, a, b);
  }
}

/**
 * Represents an HTTP response.
 *
 * @generated from message google.rpc.HttpResponse
 */
export class HttpResponse extends Message<HttpResponse> {
  /**
   * The HTTP status code, such as 200 or 404.
   *
   * @generated from field: int32 status = 1;
   */
  status = 0;

  /**
   * The HTTP reason phrase, such as "OK" or "Not Found".
   *
   * @generated from field: string reason = 2;
   */
  reason = "";

  /**
   * The HTTP response headers. The ordering of the headers is significant.
   * Multiple headers with the same key may present for the response.
   *
   * @generated from field: repeated google.rpc.HttpHeader headers = 3;
   */
  headers: HttpHeader[] = [];

  /**
   * The HTTP response body. If the body is not expected, it should be empty.
   *
   * @generated from field: bytes body = 4;
   */
  body = new Uint8Array(0);

  constructor(data?: PartialMessage<HttpResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.rpc.HttpResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "reason", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "headers", kind: "message", T: HttpHeader, repeated: true },
    { no: 4, name: "body", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HttpResponse {
    return new HttpResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HttpResponse {
    return new HttpResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HttpResponse {
    return new HttpResponse().fromJsonString(jsonString, options);
  }

  static equals(a: HttpResponse | PlainMessage<HttpResponse> | undefined, b: HttpResponse | PlainMessage<HttpResponse> | undefined): boolean {
    return proto3.util.equals(HttpResponse, a, b);
  }
}

/**
 * Represents an HTTP header.
 *
 * @generated from message google.rpc.HttpHeader
 */
export class HttpHeader extends Message<HttpHeader> {
  /**
   * The HTTP header key. It is case insensitive.
   *
   * @generated from field: string key = 1;
   */
  key = "";

  /**
   * The HTTP header value.
   *
   * @generated from field: string value = 2;
   */
  value = "";

  constructor(data?: PartialMessage<HttpHeader>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.rpc.HttpHeader";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HttpHeader {
    return new HttpHeader().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HttpHeader {
    return new HttpHeader().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HttpHeader {
    return new HttpHeader().fromJsonString(jsonString, options);
  }

  static equals(a: HttpHeader | PlainMessage<HttpHeader> | undefined, b: HttpHeader | PlainMessage<HttpHeader> | undefined): boolean {
    return proto3.util.equals(HttpHeader, a, b);
  }
}

