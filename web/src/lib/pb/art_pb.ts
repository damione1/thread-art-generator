// @generated by protoc-gen-es v1.4.1 with parameter "target=ts,import_extension=none"
// @generated from file art.proto (package pb, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { FieldMask, Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * Status of the art
 *
 * @generated from enum pb.ArtStatus
 */
export enum ArtStatus {
  /**
   * Default unspecified status
   *
   * @generated from enum value: ART_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Art is created but image is pending upload
   *
   * @generated from enum value: ART_STATUS_PENDING_IMAGE = 1;
   */
  PENDING_IMAGE = 1,

  /**
   * Image is uploaded and being processed
   *
   * @generated from enum value: ART_STATUS_PROCESSING = 2;
   */
  PROCESSING = 2,

  /**
   * Art is complete with processed image
   *
   * @generated from enum value: ART_STATUS_COMPLETE = 3;
   */
  COMPLETE = 3,

  /**
   * Processing failed
   *
   * @generated from enum value: ART_STATUS_FAILED = 4;
   */
  FAILED = 4,

  /**
   * Art is archived/hidden but not deleted
   *
   * @generated from enum value: ART_STATUS_ARCHIVED = 5;
   */
  ARCHIVED = 5,
}
// Retrieve enum metadata with: proto3.getEnumType(ArtStatus)
proto3.util.setEnumType(ArtStatus, "pb.ArtStatus", [
  { no: 0, name: "ART_STATUS_UNSPECIFIED" },
  { no: 1, name: "ART_STATUS_PENDING_IMAGE" },
  { no: 2, name: "ART_STATUS_PROCESSING" },
  { no: 3, name: "ART_STATUS_COMPLETE" },
  { no: 4, name: "ART_STATUS_FAILED" },
  { no: 5, name: "ART_STATUS_ARCHIVED" },
]);

/**
 * Status of the composition
 *
 * @generated from enum pb.CompositionStatus
 */
export enum CompositionStatus {
  /**
   * Default unspecified status
   *
   * @generated from enum value: COMPOSITION_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Composition created but waiting to be processed
   *
   * @generated from enum value: COMPOSITION_STATUS_PENDING = 1;
   */
  PENDING = 1,

  /**
   * Composition is currently being processed
   *
   * @generated from enum value: COMPOSITION_STATUS_PROCESSING = 2;
   */
  PROCESSING = 2,

  /**
   * Composition has been successfully processed
   *
   * @generated from enum value: COMPOSITION_STATUS_COMPLETE = 3;
   */
  COMPLETE = 3,

  /**
   * Composition processing failed
   *
   * @generated from enum value: COMPOSITION_STATUS_FAILED = 4;
   */
  FAILED = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(CompositionStatus)
proto3.util.setEnumType(CompositionStatus, "pb.CompositionStatus", [
  { no: 0, name: "COMPOSITION_STATUS_UNSPECIFIED" },
  { no: 1, name: "COMPOSITION_STATUS_PENDING" },
  { no: 2, name: "COMPOSITION_STATUS_PROCESSING" },
  { no: 3, name: "COMPOSITION_STATUS_COMPLETE" },
  { no: 4, name: "COMPOSITION_STATUS_FAILED" },
]);

/**
 * @generated from message pb.Art
 */
export class Art extends Message<Art> {
  /**
   * The name of the Art resource.
   * For example: "users/123/arts/456"
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * Title is the art's title.
   *
   * @generated from field: string title = 2;
   */
  title = "";

  /**
   * ImageURL is the art's image URL.
   *
   * @generated from field: string image_url = 3;
   */
  imageUrl = "";

  /**
   * Status of the art
   *
   * @generated from field: pb.ArtStatus status = 4;
   */
  status = ArtStatus.UNSPECIFIED;

  /**
   * The name of the User resource who is the author of the art.
   * For example: "users/456"
   *
   * @generated from field: string author = 5;
   */
  author = "";

  /**
   * CreatedAt is the art's creation time. Output only.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 6;
   */
  createTime?: Timestamp;

  /**
   * UpdatedAt is the art's last update time.
   *
   * @generated from field: google.protobuf.Timestamp update_time = 7;
   */
  updateTime?: Timestamp;

  constructor(data?: PartialMessage<Art>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pb.Art";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "image_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "status", kind: "enum", T: proto3.getEnumType(ArtStatus) },
    { no: 5, name: "author", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "create_time", kind: "message", T: Timestamp },
    { no: 7, name: "update_time", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Art {
    return new Art().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Art {
    return new Art().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Art {
    return new Art().fromJsonString(jsonString, options);
  }

  static equals(a: Art | PlainMessage<Art> | undefined, b: Art | PlainMessage<Art> | undefined): boolean {
    return proto3.util.equals(Art, a, b);
  }
}

/**
 * Composition represents a configuration for creating a thread art
 *
 * @generated from message pb.Composition
 */
export class Composition extends Message<Composition> {
  /**
   * The name of the Composition resource.
   * For example: "users/123/arts/456/compositions/789"
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * Status of the composition
   *
   * @generated from field: pb.CompositionStatus status = 3;
   */
  status = CompositionStatus.UNSPECIFIED;

  /**
   * Number of nails to use in the circle
   *
   * @generated from field: int32 nails_quantity = 4;
   */
  nailsQuantity = 0;

  /**
   * Image size in pixels
   *
   * @generated from field: int32 img_size = 5;
   */
  imgSize = 0;

  /**
   * Maximum number of paths to generate
   *
   * @generated from field: int32 max_paths = 6;
   */
  maxPaths = 0;

  /**
   * Starting nail position
   *
   * @generated from field: int32 starting_nail = 7;
   */
  startingNail = 0;

  /**
   * Minimum difference between connected nails
   *
   * @generated from field: int32 minimum_difference = 8;
   */
  minimumDifference = 0;

  /**
   * Brightness factor for thread lines
   *
   * @generated from field: int32 brightness_factor = 9;
   */
  brightnessFactor = 0;

  /**
   * Image contrast adjustment
   *
   * @generated from field: float image_contrast = 10;
   */
  imageContrast = 0;

  /**
   * Physical radius of the final artwork in mm
   *
   * @generated from field: float physical_radius = 11;
   */
  physicalRadius = 0;

  /**
   * URL to the preview image of the composition result
   *
   * @generated from field: string preview_url = 12;
   */
  previewUrl = "";

  /**
   * URL to download the GCode file
   *
   * @generated from field: string gcode_url = 13;
   */
  gcodeUrl = "";

  /**
   * URL to download the paths list file
   *
   * @generated from field: string pathlist_url = 14;
   */
  pathlistUrl = "";

  /**
   * Thread length in meters
   *
   * @generated from field: int32 thread_length = 15;
   */
  threadLength = 0;

  /**
   * Total number of lines
   *
   * @generated from field: int32 total_lines = 16;
   */
  totalLines = 0;

  /**
   * Error message if processing failed
   *
   * @generated from field: string error_message = 17;
   */
  errorMessage = "";

  /**
   * Creation time
   *
   * @generated from field: google.protobuf.Timestamp create_time = 18;
   */
  createTime?: Timestamp;

  /**
   * Last update time
   *
   * @generated from field: google.protobuf.Timestamp update_time = 19;
   */
  updateTime?: Timestamp;

  constructor(data?: PartialMessage<Composition>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pb.Composition";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "status", kind: "enum", T: proto3.getEnumType(CompositionStatus) },
    { no: 4, name: "nails_quantity", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "img_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "max_paths", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: "starting_nail", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 8, name: "minimum_difference", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 9, name: "brightness_factor", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 10, name: "image_contrast", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 11, name: "physical_radius", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 12, name: "preview_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "gcode_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "pathlist_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 15, name: "thread_length", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 16, name: "total_lines", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 17, name: "error_message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 18, name: "create_time", kind: "message", T: Timestamp },
    { no: 19, name: "update_time", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Composition {
    return new Composition().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Composition {
    return new Composition().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Composition {
    return new Composition().fromJsonString(jsonString, options);
  }

  static equals(a: Composition | PlainMessage<Composition> | undefined, b: Composition | PlainMessage<Composition> | undefined): boolean {
    return proto3.util.equals(Composition, a, b);
  }
}

/**
 * @generated from message pb.CreateCompositionRequest
 */
export class CreateCompositionRequest extends Message<CreateCompositionRequest> {
  /**
   * The parent which owns the composition.
   * For example: "users/123/arts/456"
   *
   * @generated from field: string parent = 1;
   */
  parent = "";

  /**
   * The composition to create.
   *
   * @generated from field: pb.Composition composition = 2;
   */
  composition?: Composition;

  constructor(data?: PartialMessage<CreateCompositionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pb.CreateCompositionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "parent", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "composition", kind: "message", T: Composition },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateCompositionRequest {
    return new CreateCompositionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateCompositionRequest {
    return new CreateCompositionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateCompositionRequest {
    return new CreateCompositionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateCompositionRequest | PlainMessage<CreateCompositionRequest> | undefined, b: CreateCompositionRequest | PlainMessage<CreateCompositionRequest> | undefined): boolean {
    return proto3.util.equals(CreateCompositionRequest, a, b);
  }
}

/**
 * @generated from message pb.GetCompositionRequest
 */
export class GetCompositionRequest extends Message<GetCompositionRequest> {
  /**
   * The name of the Composition resource.
   * For example: "users/123/arts/456/compositions/789"
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<GetCompositionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pb.GetCompositionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCompositionRequest {
    return new GetCompositionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCompositionRequest {
    return new GetCompositionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCompositionRequest {
    return new GetCompositionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetCompositionRequest | PlainMessage<GetCompositionRequest> | undefined, b: GetCompositionRequest | PlainMessage<GetCompositionRequest> | undefined): boolean {
    return proto3.util.equals(GetCompositionRequest, a, b);
  }
}

/**
 * @generated from message pb.UpdateCompositionRequest
 */
export class UpdateCompositionRequest extends Message<UpdateCompositionRequest> {
  /**
   * The Composition resource to update.
   *
   * @generated from field: pb.Composition composition = 1;
   */
  composition?: Composition;

  /**
   * The update mask applies to the resource.
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 2;
   */
  updateMask?: FieldMask;

  constructor(data?: PartialMessage<UpdateCompositionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pb.UpdateCompositionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "composition", kind: "message", T: Composition },
    { no: 2, name: "update_mask", kind: "message", T: FieldMask },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateCompositionRequest {
    return new UpdateCompositionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateCompositionRequest {
    return new UpdateCompositionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateCompositionRequest {
    return new UpdateCompositionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateCompositionRequest | PlainMessage<UpdateCompositionRequest> | undefined, b: UpdateCompositionRequest | PlainMessage<UpdateCompositionRequest> | undefined): boolean {
    return proto3.util.equals(UpdateCompositionRequest, a, b);
  }
}

/**
 * @generated from message pb.ListCompositionsRequest
 */
export class ListCompositionsRequest extends Message<ListCompositionsRequest> {
  /**
   * The parent which owns the compositions.
   * For example: "users/123/arts/456"
   *
   * @generated from field: string parent = 1;
   */
  parent = "";

  /**
   * The maximum number of compositions to return.
   * The service may return fewer than this value.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize = 0;

  /**
   * A page token, received from a previous `ListCompositions` call.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken = "";

  constructor(data?: PartialMessage<ListCompositionsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pb.ListCompositionsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "parent", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListCompositionsRequest {
    return new ListCompositionsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListCompositionsRequest {
    return new ListCompositionsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListCompositionsRequest {
    return new ListCompositionsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListCompositionsRequest | PlainMessage<ListCompositionsRequest> | undefined, b: ListCompositionsRequest | PlainMessage<ListCompositionsRequest> | undefined): boolean {
    return proto3.util.equals(ListCompositionsRequest, a, b);
  }
}

/**
 * @generated from message pb.ListCompositionsResponse
 */
export class ListCompositionsResponse extends Message<ListCompositionsResponse> {
  /**
   * The compositions returned.
   *
   * @generated from field: repeated pb.Composition compositions = 1;
   */
  compositions: Composition[] = [];

  /**
   * A token to retrieve next page of results.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListCompositionsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pb.ListCompositionsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "compositions", kind: "message", T: Composition, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListCompositionsResponse {
    return new ListCompositionsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListCompositionsResponse {
    return new ListCompositionsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListCompositionsResponse {
    return new ListCompositionsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListCompositionsResponse | PlainMessage<ListCompositionsResponse> | undefined, b: ListCompositionsResponse | PlainMessage<ListCompositionsResponse> | undefined): boolean {
    return proto3.util.equals(ListCompositionsResponse, a, b);
  }
}

/**
 * @generated from message pb.DeleteCompositionRequest
 */
export class DeleteCompositionRequest extends Message<DeleteCompositionRequest> {
  /**
   * The name of the Composition resource.
   * For example: "users/123/arts/456/compositions/789"
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<DeleteCompositionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pb.DeleteCompositionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteCompositionRequest {
    return new DeleteCompositionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteCompositionRequest {
    return new DeleteCompositionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteCompositionRequest {
    return new DeleteCompositionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteCompositionRequest | PlainMessage<DeleteCompositionRequest> | undefined, b: DeleteCompositionRequest | PlainMessage<DeleteCompositionRequest> | undefined): boolean {
    return proto3.util.equals(DeleteCompositionRequest, a, b);
  }
}

/**
 * @generated from message pb.CreateArtRequest
 */
export class CreateArtRequest extends Message<CreateArtRequest> {
  /**
   * The parent which owns the arts.
   * For example: "users/456"
   *
   * @generated from field: string parent = 1;
   */
  parent = "";

  /**
   * The art to create.
   *
   * @generated from field: pb.Art art = 2;
   */
  art?: Art;

  constructor(data?: PartialMessage<CreateArtRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pb.CreateArtRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "parent", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "art", kind: "message", T: Art },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateArtRequest {
    return new CreateArtRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateArtRequest {
    return new CreateArtRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateArtRequest {
    return new CreateArtRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateArtRequest | PlainMessage<CreateArtRequest> | undefined, b: CreateArtRequest | PlainMessage<CreateArtRequest> | undefined): boolean {
    return proto3.util.equals(CreateArtRequest, a, b);
  }
}

/**
 * @generated from message pb.UpdateArtRequest
 */
export class UpdateArtRequest extends Message<UpdateArtRequest> {
  /**
   * The Art resource to update.
   *
   * @generated from field: pb.Art art = 1;
   */
  art?: Art;

  /**
   * The update mask applies to the resource.
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 2;
   */
  updateMask?: FieldMask;

  constructor(data?: PartialMessage<UpdateArtRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pb.UpdateArtRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "art", kind: "message", T: Art },
    { no: 2, name: "update_mask", kind: "message", T: FieldMask },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateArtRequest {
    return new UpdateArtRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateArtRequest {
    return new UpdateArtRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateArtRequest {
    return new UpdateArtRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateArtRequest | PlainMessage<UpdateArtRequest> | undefined, b: UpdateArtRequest | PlainMessage<UpdateArtRequest> | undefined): boolean {
    return proto3.util.equals(UpdateArtRequest, a, b);
  }
}

/**
 * @generated from message pb.GetArtRequest
 */
export class GetArtRequest extends Message<GetArtRequest> {
  /**
   * The name of the Art resource.
   * For example: "users/{user}/arts/{art}"
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<GetArtRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pb.GetArtRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetArtRequest {
    return new GetArtRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetArtRequest {
    return new GetArtRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetArtRequest {
    return new GetArtRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetArtRequest | PlainMessage<GetArtRequest> | undefined, b: GetArtRequest | PlainMessage<GetArtRequest> | undefined): boolean {
    return proto3.util.equals(GetArtRequest, a, b);
  }
}

/**
 * @generated from message pb.ListArtsRequest
 */
export class ListArtsRequest extends Message<ListArtsRequest> {
  /**
   * The parent which owns the arts.
   * For example: "users/456"
   *
   * @generated from field: string parent = 1;
   */
  parent = "";

  /**
   * The maximum number of arts to return. The service may return fewer than this value.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize = 0;

  /**
   * A page token, received from a previous `ListArts` call.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken = "";

  /**
   * The order by which to sort the arts.
   *
   * @generated from field: string order_by = 4;
   */
  orderBy = "";

  /**
   * The order direction.
   *
   * @generated from field: string order_direction = 5;
   */
  orderDirection = "";

  constructor(data?: PartialMessage<ListArtsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pb.ListArtsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "parent", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "order_by", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "order_direction", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListArtsRequest {
    return new ListArtsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListArtsRequest {
    return new ListArtsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListArtsRequest {
    return new ListArtsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListArtsRequest | PlainMessage<ListArtsRequest> | undefined, b: ListArtsRequest | PlainMessage<ListArtsRequest> | undefined): boolean {
    return proto3.util.equals(ListArtsRequest, a, b);
  }
}

/**
 * @generated from message pb.ListArtsResponse
 */
export class ListArtsResponse extends Message<ListArtsResponse> {
  /**
   * The arts returned.
   *
   * @generated from field: repeated pb.Art arts = 1;
   */
  arts: Art[] = [];

  /**
   * A token to retrieve next page of results.
   * Pass this value in ListArtsRequest.page_token field in the subsequent call to `ListArts` method to retrieve the next page of results.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListArtsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pb.ListArtsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "arts", kind: "message", T: Art, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListArtsResponse {
    return new ListArtsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListArtsResponse {
    return new ListArtsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListArtsResponse {
    return new ListArtsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListArtsResponse | PlainMessage<ListArtsResponse> | undefined, b: ListArtsResponse | PlainMessage<ListArtsResponse> | undefined): boolean {
    return proto3.util.equals(ListArtsResponse, a, b);
  }
}

/**
 * @generated from message pb.DeleteArtRequest
 */
export class DeleteArtRequest extends Message<DeleteArtRequest> {
  /**
   * The name of the Art resource.
   * For example: "users/123/arts/456"
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<DeleteArtRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pb.DeleteArtRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteArtRequest {
    return new DeleteArtRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteArtRequest {
    return new DeleteArtRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteArtRequest {
    return new DeleteArtRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteArtRequest | PlainMessage<DeleteArtRequest> | undefined, b: DeleteArtRequest | PlainMessage<DeleteArtRequest> | undefined): boolean {
    return proto3.util.equals(DeleteArtRequest, a, b);
  }
}

/**
 * @generated from message pb.GetArtUploadUrlRequest
 */
export class GetArtUploadUrlRequest extends Message<GetArtUploadUrlRequest> {
  /**
   * The name of the Art resource to upload an image for.
   * For example: "users/123/arts/456"
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<GetArtUploadUrlRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pb.GetArtUploadUrlRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetArtUploadUrlRequest {
    return new GetArtUploadUrlRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetArtUploadUrlRequest {
    return new GetArtUploadUrlRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetArtUploadUrlRequest {
    return new GetArtUploadUrlRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetArtUploadUrlRequest | PlainMessage<GetArtUploadUrlRequest> | undefined, b: GetArtUploadUrlRequest | PlainMessage<GetArtUploadUrlRequest> | undefined): boolean {
    return proto3.util.equals(GetArtUploadUrlRequest, a, b);
  }
}

/**
 * @generated from message pb.GetArtUploadUrlResponse
 */
export class GetArtUploadUrlResponse extends Message<GetArtUploadUrlResponse> {
  /**
   * The signed URL to upload the art image to
   *
   * @generated from field: string upload_url = 1;
   */
  uploadUrl = "";

  /**
   * The expiration time for the signed URL
   *
   * @generated from field: google.protobuf.Timestamp expiration_time = 2;
   */
  expirationTime?: Timestamp;

  constructor(data?: PartialMessage<GetArtUploadUrlResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pb.GetArtUploadUrlResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "upload_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "expiration_time", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetArtUploadUrlResponse {
    return new GetArtUploadUrlResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetArtUploadUrlResponse {
    return new GetArtUploadUrlResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetArtUploadUrlResponse {
    return new GetArtUploadUrlResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetArtUploadUrlResponse | PlainMessage<GetArtUploadUrlResponse> | undefined, b: GetArtUploadUrlResponse | PlainMessage<GetArtUploadUrlResponse> | undefined): boolean {
    return proto3.util.equals(GetArtUploadUrlResponse, a, b);
  }
}

/**
 * @generated from message pb.ConfirmArtImageUploadRequest
 */
export class ConfirmArtImageUploadRequest extends Message<ConfirmArtImageUploadRequest> {
  /**
   * The name of the Art resource that has been uploaded.
   * For example: "users/123/arts/456"
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<ConfirmArtImageUploadRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pb.ConfirmArtImageUploadRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConfirmArtImageUploadRequest {
    return new ConfirmArtImageUploadRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConfirmArtImageUploadRequest {
    return new ConfirmArtImageUploadRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConfirmArtImageUploadRequest {
    return new ConfirmArtImageUploadRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ConfirmArtImageUploadRequest | PlainMessage<ConfirmArtImageUploadRequest> | undefined, b: ConfirmArtImageUploadRequest | PlainMessage<ConfirmArtImageUploadRequest> | undefined): boolean {
    return proto3.util.equals(ConfirmArtImageUploadRequest, a, b);
  }
}

