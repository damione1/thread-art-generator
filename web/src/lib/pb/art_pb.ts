// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none"
// @generated from file art.proto (package pb, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Timestamp } from "./google/protobuf/timestamp_pb";
import { FieldMask } from "./google/protobuf/field_mask_pb";

/**
 * @generated from message pb.Art
 */
export class Art extends Message<Art> {
  /**
   * The name of the Art resource.
   * For example: "arts/123"
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * Title is the art's title.
   *
   * @generated from field: string title = 2;
   */
  title = "";

  /**
   * ImageURL is the art's image URL.
   *
   * @generated from field: string image_url = 3;
   */
  imageUrl = "";

  /**
   * The name of the User resource who is the author of the art.
   * For example: "users/456"
   *
   * @generated from field: string author = 4;
   */
  author = "";

  /**
   * CreatedAt is the art's creation time. Output only.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 5;
   */
  createTime?: Timestamp;

  /**
   * UpdatedAt is the art's last update time.
   *
   * @generated from field: google.protobuf.Timestamp update_time = 6;
   */
  updateTime?: Timestamp;

  constructor(data?: PartialMessage<Art>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pb.Art";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "image_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "author", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "create_time", kind: "message", T: Timestamp },
    { no: 6, name: "update_time", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Art {
    return new Art().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Art {
    return new Art().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Art {
    return new Art().fromJsonString(jsonString, options);
  }

  static equals(a: Art | PlainMessage<Art> | undefined, b: Art | PlainMessage<Art> | undefined): boolean {
    return proto3.util.equals(Art, a, b);
  }
}

/**
 * @generated from message pb.CreateArtRequest
 */
export class CreateArtRequest extends Message<CreateArtRequest> {
  /**
   * The parent which owns the arts.
   * For example: "users/456"
   *
   * @generated from field: string parent = 1;
   */
  parent = "";

  /**
   * The art to create.
   *
   * @generated from field: pb.Art art = 2;
   */
  art?: Art;

  constructor(data?: PartialMessage<CreateArtRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pb.CreateArtRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "parent", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "art", kind: "message", T: Art },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateArtRequest {
    return new CreateArtRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateArtRequest {
    return new CreateArtRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateArtRequest {
    return new CreateArtRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateArtRequest | PlainMessage<CreateArtRequest> | undefined, b: CreateArtRequest | PlainMessage<CreateArtRequest> | undefined): boolean {
    return proto3.util.equals(CreateArtRequest, a, b);
  }
}

/**
 * @generated from message pb.UpdateArtRequest
 */
export class UpdateArtRequest extends Message<UpdateArtRequest> {
  /**
   * The Art resource to update.
   *
   * @generated from field: pb.Art art = 1;
   */
  art?: Art;

  /**
   * The update mask applies to the resource.
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 2;
   */
  updateMask?: FieldMask;

  constructor(data?: PartialMessage<UpdateArtRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pb.UpdateArtRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "art", kind: "message", T: Art },
    { no: 2, name: "update_mask", kind: "message", T: FieldMask },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateArtRequest {
    return new UpdateArtRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateArtRequest {
    return new UpdateArtRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateArtRequest {
    return new UpdateArtRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateArtRequest | PlainMessage<UpdateArtRequest> | undefined, b: UpdateArtRequest | PlainMessage<UpdateArtRequest> | undefined): boolean {
    return proto3.util.equals(UpdateArtRequest, a, b);
  }
}

/**
 * @generated from message pb.GetArtRequest
 */
export class GetArtRequest extends Message<GetArtRequest> {
  /**
   * The name of the Art resource.
   * For example: "users/{user}/arts/{art}"
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<GetArtRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pb.GetArtRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetArtRequest {
    return new GetArtRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetArtRequest {
    return new GetArtRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetArtRequest {
    return new GetArtRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetArtRequest | PlainMessage<GetArtRequest> | undefined, b: GetArtRequest | PlainMessage<GetArtRequest> | undefined): boolean {
    return proto3.util.equals(GetArtRequest, a, b);
  }
}

/**
 * @generated from message pb.ListArtsRequest
 */
export class ListArtsRequest extends Message<ListArtsRequest> {
  /**
   * The parent which owns the arts.
   * For example: "users/456"
   *
   * @generated from field: string parent = 1;
   */
  parent = "";

  /**
   * The maximum number of arts to return. The service may return fewer than this value.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize = 0;

  /**
   * A page token, received from a previous `ListArts` call.
   *
   * @generated from field: int32 page_token = 3;
   */
  pageToken = 0;

  constructor(data?: PartialMessage<ListArtsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pb.ListArtsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "parent", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "page_token", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListArtsRequest {
    return new ListArtsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListArtsRequest {
    return new ListArtsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListArtsRequest {
    return new ListArtsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListArtsRequest | PlainMessage<ListArtsRequest> | undefined, b: ListArtsRequest | PlainMessage<ListArtsRequest> | undefined): boolean {
    return proto3.util.equals(ListArtsRequest, a, b);
  }
}

/**
 * @generated from message pb.ListArtsResponse
 */
export class ListArtsResponse extends Message<ListArtsResponse> {
  /**
   * The arts returned.
   *
   * @generated from field: repeated pb.Art arts = 1;
   */
  arts: Art[] = [];

  /**
   * A token to retrieve next page of results.
   * Pass this value in ListArtsRequest.page_token field in the subsequent call to `ListArts` method to retrieve the next page of results.
   *
   * @generated from field: int32 next_page_token = 2;
   */
  nextPageToken = 0;

  constructor(data?: PartialMessage<ListArtsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pb.ListArtsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "arts", kind: "message", T: Art, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListArtsResponse {
    return new ListArtsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListArtsResponse {
    return new ListArtsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListArtsResponse {
    return new ListArtsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListArtsResponse | PlainMessage<ListArtsResponse> | undefined, b: ListArtsResponse | PlainMessage<ListArtsResponse> | undefined): boolean {
    return proto3.util.equals(ListArtsResponse, a, b);
  }
}

/**
 * @generated from message pb.DeleteArtRequest
 */
export class DeleteArtRequest extends Message<DeleteArtRequest> {
  /**
   * The name of the Art resource.
   * For example: "arts/123"
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<DeleteArtRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pb.DeleteArtRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteArtRequest {
    return new DeleteArtRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteArtRequest {
    return new DeleteArtRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteArtRequest {
    return new DeleteArtRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteArtRequest | PlainMessage<DeleteArtRequest> | undefined, b: DeleteArtRequest | PlainMessage<DeleteArtRequest> | undefined): boolean {
    return proto3.util.equals(DeleteArtRequest, a, b);
  }
}

