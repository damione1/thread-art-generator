/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.26.1
 * source: user.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./google/protobuf/timestamp";
import * as dependency_2 from "./google/protobuf/field_mask";
import * as dependency_3 from "./google/api/field_behavior";
import * as dependency_4 from "./google/api/resource";
import * as pb_1 from "google-protobuf";
export namespace pb {
    export class User extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            first_name?: string;
            last_name?: string;
            email?: string;
            password?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("first_name" in data && data.first_name != undefined) {
                    this.first_name = data.first_name;
                }
                if ("last_name" in data && data.last_name != undefined) {
                    this.last_name = data.last_name;
                }
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
                if ("password" in data && data.password != undefined) {
                    this.password = data.password;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get first_name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set first_name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get last_name() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set last_name(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get password() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set password(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            name?: string;
            first_name?: string;
            last_name?: string;
            email?: string;
            password?: string;
        }): User {
            const message = new User({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.first_name != null) {
                message.first_name = data.first_name;
            }
            if (data.last_name != null) {
                message.last_name = data.last_name;
            }
            if (data.email != null) {
                message.email = data.email;
            }
            if (data.password != null) {
                message.password = data.password;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                first_name?: string;
                last_name?: string;
                email?: string;
                password?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.first_name != null) {
                data.first_name = this.first_name;
            }
            if (this.last_name != null) {
                data.last_name = this.last_name;
            }
            if (this.email != null) {
                data.email = this.email;
            }
            if (this.password != null) {
                data.password = this.password;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.first_name.length)
                writer.writeString(3, this.first_name);
            if (this.last_name.length)
                writer.writeString(4, this.last_name);
            if (this.email.length)
                writer.writeString(5, this.email);
            if (this.password.length)
                writer.writeString(6, this.password);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): User {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new User();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.first_name = reader.readString();
                        break;
                    case 4:
                        message.last_name = reader.readString();
                        break;
                    case 5:
                        message.email = reader.readString();
                        break;
                    case 6:
                        message.password = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): User {
            return User.deserialize(bytes);
        }
    }
    export class CreateUserRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            user?: User;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("user" in data && data.user != undefined) {
                    this.user = data.user;
                }
            }
        }
        get user() {
            return pb_1.Message.getWrapperField(this, User, 1) as User;
        }
        set user(value: User) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_user() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            user?: ReturnType<typeof User.prototype.toObject>;
        }): CreateUserRequest {
            const message = new CreateUserRequest({});
            if (data.user != null) {
                message.user = User.fromObject(data.user);
            }
            return message;
        }
        toObject() {
            const data: {
                user?: ReturnType<typeof User.prototype.toObject>;
            } = {};
            if (this.user != null) {
                data.user = this.user.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_user)
                writer.writeMessage(1, this.user, () => this.user.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateUserRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateUserRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.user, () => message.user = User.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateUserRequest {
            return CreateUserRequest.deserialize(bytes);
        }
    }
    export class GetUserRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            name?: string;
        }): GetUserRequest {
            const message = new GetUserRequest({});
            if (data.name != null) {
                message.name = data.name;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetUserRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetUserRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetUserRequest {
            return GetUserRequest.deserialize(bytes);
        }
    }
    export class UpdateUserRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            user?: User;
            update_mask?: dependency_2.google.protobuf.FieldMask;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("user" in data && data.user != undefined) {
                    this.user = data.user;
                }
                if ("update_mask" in data && data.update_mask != undefined) {
                    this.update_mask = data.update_mask;
                }
            }
        }
        get user() {
            return pb_1.Message.getWrapperField(this, User, 1) as User;
        }
        set user(value: User) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_user() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get update_mask() {
            return pb_1.Message.getWrapperField(this, dependency_2.google.protobuf.FieldMask, 2) as dependency_2.google.protobuf.FieldMask;
        }
        set update_mask(value: dependency_2.google.protobuf.FieldMask) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_update_mask() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            user?: ReturnType<typeof User.prototype.toObject>;
            update_mask?: ReturnType<typeof dependency_2.google.protobuf.FieldMask.prototype.toObject>;
        }): UpdateUserRequest {
            const message = new UpdateUserRequest({});
            if (data.user != null) {
                message.user = User.fromObject(data.user);
            }
            if (data.update_mask != null) {
                message.update_mask = dependency_2.google.protobuf.FieldMask.fromObject(data.update_mask);
            }
            return message;
        }
        toObject() {
            const data: {
                user?: ReturnType<typeof User.prototype.toObject>;
                update_mask?: ReturnType<typeof dependency_2.google.protobuf.FieldMask.prototype.toObject>;
            } = {};
            if (this.user != null) {
                data.user = this.user.toObject();
            }
            if (this.update_mask != null) {
                data.update_mask = this.update_mask.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_user)
                writer.writeMessage(1, this.user, () => this.user.serialize(writer));
            if (this.has_update_mask)
                writer.writeMessage(2, this.update_mask, () => this.update_mask.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateUserRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateUserRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.user, () => message.user = User.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.update_mask, () => message.update_mask = dependency_2.google.protobuf.FieldMask.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateUserRequest {
            return UpdateUserRequest.deserialize(bytes);
        }
    }
    export class ListUsersRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            page_token?: string;
            page_size?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("page_token" in data && data.page_token != undefined) {
                    this.page_token = data.page_token;
                }
                if ("page_size" in data && data.page_size != undefined) {
                    this.page_size = data.page_size;
                }
            }
        }
        get page_token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set page_token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get page_size() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set page_size(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            page_token?: string;
            page_size?: number;
        }): ListUsersRequest {
            const message = new ListUsersRequest({});
            if (data.page_token != null) {
                message.page_token = data.page_token;
            }
            if (data.page_size != null) {
                message.page_size = data.page_size;
            }
            return message;
        }
        toObject() {
            const data: {
                page_token?: string;
                page_size?: number;
            } = {};
            if (this.page_token != null) {
                data.page_token = this.page_token;
            }
            if (this.page_size != null) {
                data.page_size = this.page_size;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.page_token.length)
                writer.writeString(1, this.page_token);
            if (this.page_size != 0)
                writer.writeInt32(2, this.page_size);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListUsersRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListUsersRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.page_token = reader.readString();
                        break;
                    case 2:
                        message.page_size = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListUsersRequest {
            return ListUsersRequest.deserialize(bytes);
        }
    }
    export class ListUsersResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            users?: User[];
            next_page_token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("users" in data && data.users != undefined) {
                    this.users = data.users;
                }
                if ("next_page_token" in data && data.next_page_token != undefined) {
                    this.next_page_token = data.next_page_token;
                }
            }
        }
        get users() {
            return pb_1.Message.getRepeatedWrapperField(this, User, 1) as User[];
        }
        set users(value: User[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get next_page_token() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set next_page_token(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            users?: ReturnType<typeof User.prototype.toObject>[];
            next_page_token?: string;
        }): ListUsersResponse {
            const message = new ListUsersResponse({});
            if (data.users != null) {
                message.users = data.users.map(item => User.fromObject(item));
            }
            if (data.next_page_token != null) {
                message.next_page_token = data.next_page_token;
            }
            return message;
        }
        toObject() {
            const data: {
                users?: ReturnType<typeof User.prototype.toObject>[];
                next_page_token?: string;
            } = {};
            if (this.users != null) {
                data.users = this.users.map((item: User) => item.toObject());
            }
            if (this.next_page_token != null) {
                data.next_page_token = this.next_page_token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.users.length)
                writer.writeRepeatedMessage(1, this.users, (item: User) => item.serialize(writer));
            if (this.next_page_token.length)
                writer.writeString(2, this.next_page_token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListUsersResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListUsersResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.users, () => pb_1.Message.addToRepeatedWrapperField(message, 1, User.deserialize(reader), User));
                        break;
                    case 2:
                        message.next_page_token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListUsersResponse {
            return ListUsersResponse.deserialize(bytes);
        }
    }
    export class DeleteUserRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            name?: string;
        }): DeleteUserRequest {
            const message = new DeleteUserRequest({});
            if (data.name != null) {
                message.name = data.name;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteUserRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteUserRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteUserRequest {
            return DeleteUserRequest.deserialize(bytes);
        }
    }
    export class CreateSessionRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            email?: string;
            password?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
                if ("password" in data && data.password != undefined) {
                    this.password = data.password;
                }
            }
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get password() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set password(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            email?: string;
            password?: string;
        }): CreateSessionRequest {
            const message = new CreateSessionRequest({});
            if (data.email != null) {
                message.email = data.email;
            }
            if (data.password != null) {
                message.password = data.password;
            }
            return message;
        }
        toObject() {
            const data: {
                email?: string;
                password?: string;
            } = {};
            if (this.email != null) {
                data.email = this.email;
            }
            if (this.password != null) {
                data.password = this.password;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.email.length)
                writer.writeString(1, this.email);
            if (this.password.length)
                writer.writeString(2, this.password);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateSessionRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateSessionRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.email = reader.readString();
                        break;
                    case 2:
                        message.password = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateSessionRequest {
            return CreateSessionRequest.deserialize(bytes);
        }
    }
    export class CreateSessionResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            user?: User;
            session_id?: string;
            access_token?: string;
            refresh_token?: string;
            access_token_expire_time?: dependency_1.google.protobuf.Timestamp;
            refresh_token_expire_time?: dependency_1.google.protobuf.Timestamp;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("user" in data && data.user != undefined) {
                    this.user = data.user;
                }
                if ("session_id" in data && data.session_id != undefined) {
                    this.session_id = data.session_id;
                }
                if ("access_token" in data && data.access_token != undefined) {
                    this.access_token = data.access_token;
                }
                if ("refresh_token" in data && data.refresh_token != undefined) {
                    this.refresh_token = data.refresh_token;
                }
                if ("access_token_expire_time" in data && data.access_token_expire_time != undefined) {
                    this.access_token_expire_time = data.access_token_expire_time;
                }
                if ("refresh_token_expire_time" in data && data.refresh_token_expire_time != undefined) {
                    this.refresh_token_expire_time = data.refresh_token_expire_time;
                }
            }
        }
        get user() {
            return pb_1.Message.getWrapperField(this, User, 1) as User;
        }
        set user(value: User) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_user() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get session_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set session_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get access_token() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set access_token(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get refresh_token() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set refresh_token(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get access_token_expire_time() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 5) as dependency_1.google.protobuf.Timestamp;
        }
        set access_token_expire_time(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_access_token_expire_time() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get refresh_token_expire_time() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 6) as dependency_1.google.protobuf.Timestamp;
        }
        set refresh_token_expire_time(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get has_refresh_token_expire_time() {
            return pb_1.Message.getField(this, 6) != null;
        }
        static fromObject(data: {
            user?: ReturnType<typeof User.prototype.toObject>;
            session_id?: string;
            access_token?: string;
            refresh_token?: string;
            access_token_expire_time?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            refresh_token_expire_time?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
        }): CreateSessionResponse {
            const message = new CreateSessionResponse({});
            if (data.user != null) {
                message.user = User.fromObject(data.user);
            }
            if (data.session_id != null) {
                message.session_id = data.session_id;
            }
            if (data.access_token != null) {
                message.access_token = data.access_token;
            }
            if (data.refresh_token != null) {
                message.refresh_token = data.refresh_token;
            }
            if (data.access_token_expire_time != null) {
                message.access_token_expire_time = dependency_1.google.protobuf.Timestamp.fromObject(data.access_token_expire_time);
            }
            if (data.refresh_token_expire_time != null) {
                message.refresh_token_expire_time = dependency_1.google.protobuf.Timestamp.fromObject(data.refresh_token_expire_time);
            }
            return message;
        }
        toObject() {
            const data: {
                user?: ReturnType<typeof User.prototype.toObject>;
                session_id?: string;
                access_token?: string;
                refresh_token?: string;
                access_token_expire_time?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                refresh_token_expire_time?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            } = {};
            if (this.user != null) {
                data.user = this.user.toObject();
            }
            if (this.session_id != null) {
                data.session_id = this.session_id;
            }
            if (this.access_token != null) {
                data.access_token = this.access_token;
            }
            if (this.refresh_token != null) {
                data.refresh_token = this.refresh_token;
            }
            if (this.access_token_expire_time != null) {
                data.access_token_expire_time = this.access_token_expire_time.toObject();
            }
            if (this.refresh_token_expire_time != null) {
                data.refresh_token_expire_time = this.refresh_token_expire_time.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_user)
                writer.writeMessage(1, this.user, () => this.user.serialize(writer));
            if (this.session_id.length)
                writer.writeString(2, this.session_id);
            if (this.access_token.length)
                writer.writeString(3, this.access_token);
            if (this.refresh_token.length)
                writer.writeString(4, this.refresh_token);
            if (this.has_access_token_expire_time)
                writer.writeMessage(5, this.access_token_expire_time, () => this.access_token_expire_time.serialize(writer));
            if (this.has_refresh_token_expire_time)
                writer.writeMessage(6, this.refresh_token_expire_time, () => this.refresh_token_expire_time.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateSessionResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateSessionResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.user, () => message.user = User.deserialize(reader));
                        break;
                    case 2:
                        message.session_id = reader.readString();
                        break;
                    case 3:
                        message.access_token = reader.readString();
                        break;
                    case 4:
                        message.refresh_token = reader.readString();
                        break;
                    case 5:
                        reader.readMessage(message.access_token_expire_time, () => message.access_token_expire_time = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.refresh_token_expire_time, () => message.refresh_token_expire_time = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateSessionResponse {
            return CreateSessionResponse.deserialize(bytes);
        }
    }
    export class RefreshTokenRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            refresh_token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("refresh_token" in data && data.refresh_token != undefined) {
                    this.refresh_token = data.refresh_token;
                }
            }
        }
        get refresh_token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set refresh_token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            refresh_token?: string;
        }): RefreshTokenRequest {
            const message = new RefreshTokenRequest({});
            if (data.refresh_token != null) {
                message.refresh_token = data.refresh_token;
            }
            return message;
        }
        toObject() {
            const data: {
                refresh_token?: string;
            } = {};
            if (this.refresh_token != null) {
                data.refresh_token = this.refresh_token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.refresh_token.length)
                writer.writeString(1, this.refresh_token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RefreshTokenRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RefreshTokenRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.refresh_token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RefreshTokenRequest {
            return RefreshTokenRequest.deserialize(bytes);
        }
    }
    export class RefreshTokenResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            access_token?: string;
            refresh_token?: string;
            access_token_expire_time?: dependency_1.google.protobuf.Timestamp;
            refresh_token_expire_time?: dependency_1.google.protobuf.Timestamp;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("access_token" in data && data.access_token != undefined) {
                    this.access_token = data.access_token;
                }
                if ("refresh_token" in data && data.refresh_token != undefined) {
                    this.refresh_token = data.refresh_token;
                }
                if ("access_token_expire_time" in data && data.access_token_expire_time != undefined) {
                    this.access_token_expire_time = data.access_token_expire_time;
                }
                if ("refresh_token_expire_time" in data && data.refresh_token_expire_time != undefined) {
                    this.refresh_token_expire_time = data.refresh_token_expire_time;
                }
            }
        }
        get access_token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set access_token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get refresh_token() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set refresh_token(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get access_token_expire_time() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 3) as dependency_1.google.protobuf.Timestamp;
        }
        set access_token_expire_time(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_access_token_expire_time() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get refresh_token_expire_time() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 4) as dependency_1.google.protobuf.Timestamp;
        }
        set refresh_token_expire_time(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_refresh_token_expire_time() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            access_token?: string;
            refresh_token?: string;
            access_token_expire_time?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            refresh_token_expire_time?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
        }): RefreshTokenResponse {
            const message = new RefreshTokenResponse({});
            if (data.access_token != null) {
                message.access_token = data.access_token;
            }
            if (data.refresh_token != null) {
                message.refresh_token = data.refresh_token;
            }
            if (data.access_token_expire_time != null) {
                message.access_token_expire_time = dependency_1.google.protobuf.Timestamp.fromObject(data.access_token_expire_time);
            }
            if (data.refresh_token_expire_time != null) {
                message.refresh_token_expire_time = dependency_1.google.protobuf.Timestamp.fromObject(data.refresh_token_expire_time);
            }
            return message;
        }
        toObject() {
            const data: {
                access_token?: string;
                refresh_token?: string;
                access_token_expire_time?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                refresh_token_expire_time?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            } = {};
            if (this.access_token != null) {
                data.access_token = this.access_token;
            }
            if (this.refresh_token != null) {
                data.refresh_token = this.refresh_token;
            }
            if (this.access_token_expire_time != null) {
                data.access_token_expire_time = this.access_token_expire_time.toObject();
            }
            if (this.refresh_token_expire_time != null) {
                data.refresh_token_expire_time = this.refresh_token_expire_time.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.access_token.length)
                writer.writeString(1, this.access_token);
            if (this.refresh_token.length)
                writer.writeString(2, this.refresh_token);
            if (this.has_access_token_expire_time)
                writer.writeMessage(3, this.access_token_expire_time, () => this.access_token_expire_time.serialize(writer));
            if (this.has_refresh_token_expire_time)
                writer.writeMessage(4, this.refresh_token_expire_time, () => this.refresh_token_expire_time.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RefreshTokenResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RefreshTokenResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.access_token = reader.readString();
                        break;
                    case 2:
                        message.refresh_token = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.access_token_expire_time, () => message.access_token_expire_time = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.refresh_token_expire_time, () => message.refresh_token_expire_time = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RefreshTokenResponse {
            return RefreshTokenResponse.deserialize(bytes);
        }
    }
    export class DeleteSessionRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            refresh_token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("refresh_token" in data && data.refresh_token != undefined) {
                    this.refresh_token = data.refresh_token;
                }
            }
        }
        get refresh_token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set refresh_token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            refresh_token?: string;
        }): DeleteSessionRequest {
            const message = new DeleteSessionRequest({});
            if (data.refresh_token != null) {
                message.refresh_token = data.refresh_token;
            }
            return message;
        }
        toObject() {
            const data: {
                refresh_token?: string;
            } = {};
            if (this.refresh_token != null) {
                data.refresh_token = this.refresh_token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.refresh_token.length)
                writer.writeString(1, this.refresh_token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteSessionRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteSessionRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.refresh_token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteSessionRequest {
            return DeleteSessionRequest.deserialize(bytes);
        }
    }
    export class ResetPasswordRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            email?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
            }
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            email?: string;
        }): ResetPasswordRequest {
            const message = new ResetPasswordRequest({});
            if (data.email != null) {
                message.email = data.email;
            }
            return message;
        }
        toObject() {
            const data: {
                email?: string;
            } = {};
            if (this.email != null) {
                data.email = this.email;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.email.length)
                writer.writeString(1, this.email);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ResetPasswordRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ResetPasswordRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.email = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ResetPasswordRequest {
            return ResetPasswordRequest.deserialize(bytes);
        }
    }
    export class ValidateEmailRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            email?: string;
            validationNumber?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
                if ("validationNumber" in data && data.validationNumber != undefined) {
                    this.validationNumber = data.validationNumber;
                }
            }
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get validationNumber() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set validationNumber(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            email?: string;
            validationNumber?: number;
        }): ValidateEmailRequest {
            const message = new ValidateEmailRequest({});
            if (data.email != null) {
                message.email = data.email;
            }
            if (data.validationNumber != null) {
                message.validationNumber = data.validationNumber;
            }
            return message;
        }
        toObject() {
            const data: {
                email?: string;
                validationNumber?: number;
            } = {};
            if (this.email != null) {
                data.email = this.email;
            }
            if (this.validationNumber != null) {
                data.validationNumber = this.validationNumber;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.email.length)
                writer.writeString(1, this.email);
            if (this.validationNumber != 0)
                writer.writeInt64(2, this.validationNumber);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ValidateEmailRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ValidateEmailRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.email = reader.readString();
                        break;
                    case 2:
                        message.validationNumber = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ValidateEmailRequest {
            return ValidateEmailRequest.deserialize(bytes);
        }
    }
    export class SendValidationEmailRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            email?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
            }
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            email?: string;
        }): SendValidationEmailRequest {
            const message = new SendValidationEmailRequest({});
            if (data.email != null) {
                message.email = data.email;
            }
            return message;
        }
        toObject() {
            const data: {
                email?: string;
            } = {};
            if (this.email != null) {
                data.email = this.email;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.email.length)
                writer.writeString(1, this.email);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SendValidationEmailRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SendValidationEmailRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.email = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SendValidationEmailRequest {
            return SendValidationEmailRequest.deserialize(bytes);
        }
    }
}
