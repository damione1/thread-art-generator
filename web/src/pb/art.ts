/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.26.1
 * source: art.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./google/protobuf/timestamp";
import * as dependency_2 from "./google/protobuf/field_mask";
import * as dependency_3 from "./google/api/field_behavior";
import * as dependency_4 from "./google/api/resource";
import * as pb_1 from "google-protobuf";
export namespace pb {
    export class Art extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            title?: string;
            image_url?: string;
            author?: string;
            create_time?: dependency_1.google.protobuf.Timestamp;
            update_time?: dependency_1.google.protobuf.Timestamp;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("title" in data && data.title != undefined) {
                    this.title = data.title;
                }
                if ("image_url" in data && data.image_url != undefined) {
                    this.image_url = data.image_url;
                }
                if ("author" in data && data.author != undefined) {
                    this.author = data.author;
                }
                if ("create_time" in data && data.create_time != undefined) {
                    this.create_time = data.create_time;
                }
                if ("update_time" in data && data.update_time != undefined) {
                    this.update_time = data.update_time;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get title() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set title(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get image_url() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set image_url(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get author() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set author(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get create_time() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 5) as dependency_1.google.protobuf.Timestamp;
        }
        set create_time(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_create_time() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get update_time() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 6) as dependency_1.google.protobuf.Timestamp;
        }
        set update_time(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get has_update_time() {
            return pb_1.Message.getField(this, 6) != null;
        }
        static fromObject(data: {
            name?: string;
            title?: string;
            image_url?: string;
            author?: string;
            create_time?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            update_time?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
        }): Art {
            const message = new Art({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.title != null) {
                message.title = data.title;
            }
            if (data.image_url != null) {
                message.image_url = data.image_url;
            }
            if (data.author != null) {
                message.author = data.author;
            }
            if (data.create_time != null) {
                message.create_time = dependency_1.google.protobuf.Timestamp.fromObject(data.create_time);
            }
            if (data.update_time != null) {
                message.update_time = dependency_1.google.protobuf.Timestamp.fromObject(data.update_time);
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                title?: string;
                image_url?: string;
                author?: string;
                create_time?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                update_time?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.title != null) {
                data.title = this.title;
            }
            if (this.image_url != null) {
                data.image_url = this.image_url;
            }
            if (this.author != null) {
                data.author = this.author;
            }
            if (this.create_time != null) {
                data.create_time = this.create_time.toObject();
            }
            if (this.update_time != null) {
                data.update_time = this.update_time.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.title.length)
                writer.writeString(2, this.title);
            if (this.image_url.length)
                writer.writeString(3, this.image_url);
            if (this.author.length)
                writer.writeString(4, this.author);
            if (this.has_create_time)
                writer.writeMessage(5, this.create_time, () => this.create_time.serialize(writer));
            if (this.has_update_time)
                writer.writeMessage(6, this.update_time, () => this.update_time.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Art {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Art();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.title = reader.readString();
                        break;
                    case 3:
                        message.image_url = reader.readString();
                        break;
                    case 4:
                        message.author = reader.readString();
                        break;
                    case 5:
                        reader.readMessage(message.create_time, () => message.create_time = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.update_time, () => message.update_time = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Art {
            return Art.deserialize(bytes);
        }
    }
    export class CreateArtRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            parent?: string;
            art?: Art;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("parent" in data && data.parent != undefined) {
                    this.parent = data.parent;
                }
                if ("art" in data && data.art != undefined) {
                    this.art = data.art;
                }
            }
        }
        get parent() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set parent(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get art() {
            return pb_1.Message.getWrapperField(this, Art, 2) as Art;
        }
        set art(value: Art) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_art() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            parent?: string;
            art?: ReturnType<typeof Art.prototype.toObject>;
        }): CreateArtRequest {
            const message = new CreateArtRequest({});
            if (data.parent != null) {
                message.parent = data.parent;
            }
            if (data.art != null) {
                message.art = Art.fromObject(data.art);
            }
            return message;
        }
        toObject() {
            const data: {
                parent?: string;
                art?: ReturnType<typeof Art.prototype.toObject>;
            } = {};
            if (this.parent != null) {
                data.parent = this.parent;
            }
            if (this.art != null) {
                data.art = this.art.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.parent.length)
                writer.writeString(1, this.parent);
            if (this.has_art)
                writer.writeMessage(2, this.art, () => this.art.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateArtRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateArtRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.parent = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.art, () => message.art = Art.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateArtRequest {
            return CreateArtRequest.deserialize(bytes);
        }
    }
    export class UpdateArtRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            art?: Art;
            update_mask?: dependency_2.google.protobuf.FieldMask;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("art" in data && data.art != undefined) {
                    this.art = data.art;
                }
                if ("update_mask" in data && data.update_mask != undefined) {
                    this.update_mask = data.update_mask;
                }
            }
        }
        get art() {
            return pb_1.Message.getWrapperField(this, Art, 1) as Art;
        }
        set art(value: Art) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_art() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get update_mask() {
            return pb_1.Message.getWrapperField(this, dependency_2.google.protobuf.FieldMask, 2) as dependency_2.google.protobuf.FieldMask;
        }
        set update_mask(value: dependency_2.google.protobuf.FieldMask) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_update_mask() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            art?: ReturnType<typeof Art.prototype.toObject>;
            update_mask?: ReturnType<typeof dependency_2.google.protobuf.FieldMask.prototype.toObject>;
        }): UpdateArtRequest {
            const message = new UpdateArtRequest({});
            if (data.art != null) {
                message.art = Art.fromObject(data.art);
            }
            if (data.update_mask != null) {
                message.update_mask = dependency_2.google.protobuf.FieldMask.fromObject(data.update_mask);
            }
            return message;
        }
        toObject() {
            const data: {
                art?: ReturnType<typeof Art.prototype.toObject>;
                update_mask?: ReturnType<typeof dependency_2.google.protobuf.FieldMask.prototype.toObject>;
            } = {};
            if (this.art != null) {
                data.art = this.art.toObject();
            }
            if (this.update_mask != null) {
                data.update_mask = this.update_mask.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_art)
                writer.writeMessage(1, this.art, () => this.art.serialize(writer));
            if (this.has_update_mask)
                writer.writeMessage(2, this.update_mask, () => this.update_mask.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateArtRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateArtRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.art, () => message.art = Art.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.update_mask, () => message.update_mask = dependency_2.google.protobuf.FieldMask.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateArtRequest {
            return UpdateArtRequest.deserialize(bytes);
        }
    }
    export class GetArtRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            name?: string;
        }): GetArtRequest {
            const message = new GetArtRequest({});
            if (data.name != null) {
                message.name = data.name;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetArtRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetArtRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetArtRequest {
            return GetArtRequest.deserialize(bytes);
        }
    }
    export class ListArtsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            parent?: string;
            page_size?: number;
            page_token?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("parent" in data && data.parent != undefined) {
                    this.parent = data.parent;
                }
                if ("page_size" in data && data.page_size != undefined) {
                    this.page_size = data.page_size;
                }
                if ("page_token" in data && data.page_token != undefined) {
                    this.page_token = data.page_token;
                }
            }
        }
        get parent() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set parent(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get page_size() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set page_size(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get page_token() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set page_token(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            parent?: string;
            page_size?: number;
            page_token?: number;
        }): ListArtsRequest {
            const message = new ListArtsRequest({});
            if (data.parent != null) {
                message.parent = data.parent;
            }
            if (data.page_size != null) {
                message.page_size = data.page_size;
            }
            if (data.page_token != null) {
                message.page_token = data.page_token;
            }
            return message;
        }
        toObject() {
            const data: {
                parent?: string;
                page_size?: number;
                page_token?: number;
            } = {};
            if (this.parent != null) {
                data.parent = this.parent;
            }
            if (this.page_size != null) {
                data.page_size = this.page_size;
            }
            if (this.page_token != null) {
                data.page_token = this.page_token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.parent.length)
                writer.writeString(1, this.parent);
            if (this.page_size != 0)
                writer.writeInt32(2, this.page_size);
            if (this.page_token != 0)
                writer.writeInt32(3, this.page_token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListArtsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListArtsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.parent = reader.readString();
                        break;
                    case 2:
                        message.page_size = reader.readInt32();
                        break;
                    case 3:
                        message.page_token = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListArtsRequest {
            return ListArtsRequest.deserialize(bytes);
        }
    }
    export class ListArtsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            arts?: Art[];
            next_page_token?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("arts" in data && data.arts != undefined) {
                    this.arts = data.arts;
                }
                if ("next_page_token" in data && data.next_page_token != undefined) {
                    this.next_page_token = data.next_page_token;
                }
            }
        }
        get arts() {
            return pb_1.Message.getRepeatedWrapperField(this, Art, 1) as Art[];
        }
        set arts(value: Art[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get next_page_token() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set next_page_token(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            arts?: ReturnType<typeof Art.prototype.toObject>[];
            next_page_token?: number;
        }): ListArtsResponse {
            const message = new ListArtsResponse({});
            if (data.arts != null) {
                message.arts = data.arts.map(item => Art.fromObject(item));
            }
            if (data.next_page_token != null) {
                message.next_page_token = data.next_page_token;
            }
            return message;
        }
        toObject() {
            const data: {
                arts?: ReturnType<typeof Art.prototype.toObject>[];
                next_page_token?: number;
            } = {};
            if (this.arts != null) {
                data.arts = this.arts.map((item: Art) => item.toObject());
            }
            if (this.next_page_token != null) {
                data.next_page_token = this.next_page_token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.arts.length)
                writer.writeRepeatedMessage(1, this.arts, (item: Art) => item.serialize(writer));
            if (this.next_page_token != 0)
                writer.writeInt32(2, this.next_page_token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListArtsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListArtsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.arts, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Art.deserialize(reader), Art));
                        break;
                    case 2:
                        message.next_page_token = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListArtsResponse {
            return ListArtsResponse.deserialize(bytes);
        }
    }
    export class DeleteArtRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            name?: string;
        }): DeleteArtRequest {
            const message = new DeleteArtRequest({});
            if (data.name != null) {
                message.name = data.name;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteArtRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteArtRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteArtRequest {
            return DeleteArtRequest.deserialize(bytes);
        }
    }
    export class UploadArtRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            data?: Uint8Array;
            mimeType?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("mimeType" in data && data.mimeType != undefined) {
                    this.mimeType = data.mimeType;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get data() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set data(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get mimeType() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set mimeType(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            name?: string;
            data?: Uint8Array;
            mimeType?: string;
        }): UploadArtRequest {
            const message = new UploadArtRequest({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.data != null) {
                message.data = data.data;
            }
            if (data.mimeType != null) {
                message.mimeType = data.mimeType;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                data?: Uint8Array;
                mimeType?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.data != null) {
                data.data = this.data;
            }
            if (this.mimeType != null) {
                data.mimeType = this.mimeType;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.data.length)
                writer.writeBytes(2, this.data);
            if (this.mimeType.length)
                writer.writeString(3, this.mimeType);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UploadArtRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UploadArtRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.data = reader.readBytes();
                        break;
                    case 3:
                        message.mimeType = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UploadArtRequest {
            return UploadArtRequest.deserialize(bytes);
        }
    }
}
