package templates

import (
	"github.com/Damione1/thread-art-generator/core/pb"
	"github.com/Damione1/thread-art-generator/web/client"
)

// ProfileFormData moved to form_data.go
templ Profile(user *pb.User, errorMessage string) {
	@ProfileWithData(NewProfileFormData(client.ParseValidationError(errorMessage), user))
}

templ ProfileWithData(data ProfileFormData) {
	@Layout("Profile", data.User) {
		<div class="flex min-h-full flex-col justify-center px-6 py-12 lg:px-8">
			<div class="sm:mx-auto sm:w-full sm:max-w-lg">
				<h2 class="mt-10 text-center text-2xl font-bold leading-9 tracking-tight text-white">
					Your Profile
				</h2>
			</div>
			<div class="mt-10 sm:mx-auto sm:w-full sm:max-w-lg">
				@FormErrors(data.Errors)
				<form class="space-y-6" action="/profile" method="POST" id="profile-form">
					<div class="grid grid-cols-1 md:grid-cols-2 gap-6">
						<div>
							<div>
								<img class="h-24 w-24 rounded-full mx-auto" src={ getGravatarURL(data.User.Email) } alt="User avatar"/>
								<p class="text-center text-sm text-gray-400 mt-2">Profile picture from Gravatar</p>
							</div>
							@InputFieldWithMapping("text", "first_name", "first_name", "First Name", "", data.User.FirstName, true, data.Errors, "user.first_name")
							@InputFieldWithMapping("text", "last_name", "last_name", "Last Name", "", data.User.LastName, false, data.Errors, "user.last_name")
							@InputFieldWithMapping("email", "email", "email", "Email address", "", data.User.Email, true, data.Errors, "user.email")
						</div>
						<div class="border-gray-700 md:border-l md:pl-6">
							<h3 class="text-lg font-medium text-white mb-4">Change Password</h3>
							@PasswordFieldWithMapping("password", "password", "New Password", "Leave blank to keep current password", false, data.Errors, false, "user.password")
							@PasswordField("confirm_password", "confirm_password", "Confirm New Password", "", false, data.Errors, false)
						</div>
					</div>
					<div class="col-span-2 pt-6">
						<input type="hidden" name="update_fields" id="update_fields" value=""/>
						@SubmitButton("Update Profile")
					</div>
				</form>
				@profileScript()
			</div>
		</div>
	}
}

// JavaScript to handle the update mask
templ profileScript() {
	<script>
		document.addEventListener('DOMContentLoaded', function() {
			const form = document.getElementById('profile-form');
			const updateFieldsInput = document.getElementById('update_fields');

			// Store original values of fields
			const originalValues = {};
			const fields = ['first_name', 'last_name', 'email', 'password'];

			fields.forEach(field => {
				const element = document.getElementById(field);
				if (element) {
					originalValues[field] = element.value;
				}
			});

			form.addEventListener('submit', function(e) {
				e.preventDefault();

				const changedFields = [];

				// Check which fields were modified by comparing current values with original values
				fields.forEach(field => {
					const element = document.getElementById(field);
					if (element && element.value !== originalValues[field] && element.value.trim() !== '') {
						changedFields.push(field);
					}
				});

				// Update the hidden field with the comma-separated list of changed fields
				updateFieldsInput.value = changedFields.join(',');

				// Use our auth utilities to submit the form
				if (window.authUtils) {
					window.authUtils.submitAuthForm(form)
						.then(response => {
							if (response.redirected) {
								window.location.href = response.url;
							} else if (response.ok) {
								window.location.reload();
							} else {
								return response.json();
							}
						})
						.then(data => {
							if (data && (data.GeneralError || Object.keys(data.FieldErrors || {}).length > 0)) {
								// Handle form errors by reloading the page with error data
								const query = new URLSearchParams();
								query.append('error', JSON.stringify(data));
								window.location.href = `/profile?${query.toString()}`;
							}
						})
						.catch(error => {
							console.error('Profile update error:', error);
						});
				} else {
					// Fallback if auth utilities aren't loaded
					console.warn('Auth utilities not loaded, submitting form directly');
					form.submit();
				}
			});
		});
	</script>
}
