package templates

import "github.com/Damione1/thread-art-generator/web/client"

// InputField renders a form input field with validation
templ InputField(fieldType, id, name, label, placeholder, value string, required bool, errors *client.ValidationErrors) {
	@InputFieldWithMapping(fieldType, id, name, label, placeholder, value, required, errors, "")
}

// InputFieldWithMapping renders a form input field with validation and error field mapping
templ InputFieldWithMapping(fieldType, id, name, label, placeholder, value string, required bool, errors *client.ValidationErrors, errorFieldName string) {
	<div>
		<label for={ id } class="block text-sm font-medium leading-6 text-white">
			{ label }
			if required {
				<span class="text-red-500">*</span>
			}
		</label>
		<div class="mt-2">
			<input
				id={ id }
				name={ name }
				type={ fieldType }
				placeholder={ placeholder }
				value={ value }
				if required {
					required
				}
				class={ "block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6",
					templ.KV("ring-red-500", errors != nil && (errors.HasFieldError(name) || (errorFieldName != "" && errors.HasFieldError(errorFieldName)))),
					templ.KV("ring-gray-300", errors == nil || (!errors.HasFieldError(name) && (errorFieldName == "" || !errors.HasFieldError(errorFieldName)))) }
			/>
		</div>
		if errors != nil && errors.HasFieldError(name) {
			<p class="mt-1 text-sm text-red-500">{ errors.GetFieldError(name) }</p>
		} else if errorFieldName != "" && errors != nil && errors.HasFieldError(errorFieldName) {
			<p class="mt-1 text-sm text-red-500">{ errors.GetFieldError(errorFieldName) }</p>
		}
	</div>
}

// PasswordField renders a password input with validation
templ PasswordField(id, name, label, value string, required bool, errors *client.ValidationErrors, showForgotPassword bool) {
	@PasswordFieldWithMapping(id, name, label, value, required, errors, showForgotPassword, "")
}

// PasswordFieldWithMapping renders a password input with validation and error field mapping
templ PasswordFieldWithMapping(id, name, label, value string, required bool, errors *client.ValidationErrors, showForgotPassword bool, errorFieldName string) {
	<div>
		<div class="flex items-center justify-between">
			<label for={ id } class="block text-sm font-medium leading-6 text-white">
				{ label }
				if required {
					<span class="text-red-500">*</span>
				}
			</label>
			if showForgotPassword {
				<div class="text-sm">
					<a href="#" class="font-semibold text-indigo-400 hover:text-indigo-300">
						Forgot password?
					</a>
				</div>
			}
		</div>
		<div class="mt-2">
			<input
				id={ id }
				name={ name }
				type="password"
				value={ value }
				if required {
					required
				}
				class={ "block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6",
					templ.KV("ring-red-500", errors != nil && (errors.HasFieldError(name) || (errorFieldName != "" && errors.HasFieldError(errorFieldName)))),
					templ.KV("ring-gray-300", errors == nil || (!errors.HasFieldError(name) && (errorFieldName == "" || !errors.HasFieldError(errorFieldName)))) }
			/>
		</div>
		if errors != nil && errors.HasFieldError(name) {
			<p class="mt-1 text-sm text-red-500">{ errors.GetFieldError(name) }</p>
		} else if errorFieldName != "" && errors != nil && errors.HasFieldError(errorFieldName) {
			<p class="mt-1 text-sm text-red-500">{ errors.GetFieldError(errorFieldName) }</p>
		}
	</div>
}

// FormErrors renders general form errors as an alert
templ FormErrors(errors *client.ValidationErrors) {
	if errors != nil && errors.GeneralError != "" {
		<div class="mb-4 p-4 text-sm text-red-800 rounded-lg bg-red-50 dark:bg-gray-800 dark:text-red-400" role="alert">
			<p>{ errors.GeneralError }</p>
		</div>
	}
}

// SubmitButton renders a form submit button
templ SubmitButton(label string) {
	<div>
		<button type="submit" class="flex w-full justify-center rounded-md bg-indigo-600 px-3 py-1.5 text-sm font-semibold leading-6 text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">
			{ label }
		</button>
	</div>
}

// Toast renders a toast notification (can be used for success messages)
templ Toast(message string, toastType string, showToast bool) {
	if showToast && message != "" {
		<div
			id="toast"
			class={ "fixed top-5 right-5 p-4 rounded-lg shadow-lg z-50 transition-opacity duration-300",
				templ.KV("bg-green-500 text-white", toastType == "success"),
				templ.KV("bg-red-500 text-white", toastType == "error"),
				templ.KV("bg-blue-500 text-white", toastType == "info"),
				templ.KV("bg-yellow-500 text-white", toastType == "warning") }
		>
			{ message }
			<button
				type="button"
				class="ml-2 inline-flex items-center justify-center h-6 w-6 rounded-full bg-white/30 hover:bg-white/40"
				onclick="this.parentElement.remove()"
			>
				&times;
			</button>
		</div>
		<script>
			setTimeout(() => {
				const toast = document.getElementById('toast');
				if (toast) {
					toast.classList.add('opacity-0');
					setTimeout(() => {
						if (toast.parentElement) {
							toast.parentElement.removeChild(toast);
						}
					}, 300);
				}
			}, 5000);
		</script>
	}
}
