// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"strconv"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/strmangle"
)

// M type is for providing columns and column values to UpdateAll.
type M map[string]interface{}

// ErrSyncFail occurs during insert when the record could not be retrieved in
// order to populate default value information. This usually happens when LastInsertId
// fails or there was a primary key configuration that was not resolvable.
var ErrSyncFail = errors.New("models: failed to synchronize data after insert")

type insertCache struct {
	query        string
	retQuery     string
	valueMapping []uint64
	retMapping   []uint64
}

type updateCache struct {
	query        string
	valueMapping []uint64
}

func makeCacheKey(cols boil.Columns, nzDefaults []string) string {
	buf := strmangle.GetBuffer()

	buf.WriteString(strconv.Itoa(cols.Kind))
	for _, w := range cols.Cols {
		buf.WriteString(w)
	}

	if len(nzDefaults) != 0 {
		buf.WriteByte('.')
	}
	for _, nz := range nzDefaults {
		buf.WriteString(nz)
	}

	str := buf.String()
	strmangle.PutBuffer(buf)
	return str
}

type ArtStatusEnum string

// Enum values for ArtStatusEnum
const (
	ArtStatusEnumPENDING_IMAGE ArtStatusEnum = "PENDING_IMAGE"
	ArtStatusEnumPROCESSING    ArtStatusEnum = "PROCESSING"
	ArtStatusEnumCOMPLETE      ArtStatusEnum = "COMPLETE"
	ArtStatusEnumFAILED        ArtStatusEnum = "FAILED"
	ArtStatusEnumARCHIVED      ArtStatusEnum = "ARCHIVED"
)

func AllArtStatusEnum() []ArtStatusEnum {
	return []ArtStatusEnum{
		ArtStatusEnumPENDING_IMAGE,
		ArtStatusEnumPROCESSING,
		ArtStatusEnumCOMPLETE,
		ArtStatusEnumFAILED,
		ArtStatusEnumARCHIVED,
	}
}

func (e ArtStatusEnum) IsValid() error {
	switch e {
	case ArtStatusEnumPENDING_IMAGE, ArtStatusEnumPROCESSING, ArtStatusEnumCOMPLETE, ArtStatusEnumFAILED, ArtStatusEnumARCHIVED:
		return nil
	default:
		return errors.New("enum is not valid")
	}
}

func (e ArtStatusEnum) String() string {
	return string(e)
}

func (e ArtStatusEnum) Ordinal() int {
	switch e {
	case ArtStatusEnumPENDING_IMAGE:
		return 0
	case ArtStatusEnumPROCESSING:
		return 1
	case ArtStatusEnumCOMPLETE:
		return 2
	case ArtStatusEnumFAILED:
		return 3
	case ArtStatusEnumARCHIVED:
		return 4

	default:
		panic(errors.New("enum is not valid"))
	}
}

type CompositionStatusEnum string

// Enum values for CompositionStatusEnum
const (
	CompositionStatusEnumPENDING    CompositionStatusEnum = "PENDING"
	CompositionStatusEnumPROCESSING CompositionStatusEnum = "PROCESSING"
	CompositionStatusEnumCOMPLETE   CompositionStatusEnum = "COMPLETE"
	CompositionStatusEnumFAILED     CompositionStatusEnum = "FAILED"
)

func AllCompositionStatusEnum() []CompositionStatusEnum {
	return []CompositionStatusEnum{
		CompositionStatusEnumPENDING,
		CompositionStatusEnumPROCESSING,
		CompositionStatusEnumCOMPLETE,
		CompositionStatusEnumFAILED,
	}
}

func (e CompositionStatusEnum) IsValid() error {
	switch e {
	case CompositionStatusEnumPENDING, CompositionStatusEnumPROCESSING, CompositionStatusEnumCOMPLETE, CompositionStatusEnumFAILED:
		return nil
	default:
		return errors.New("enum is not valid")
	}
}

func (e CompositionStatusEnum) String() string {
	return string(e)
}

func (e CompositionStatusEnum) Ordinal() int {
	switch e {
	case CompositionStatusEnumPENDING:
		return 0
	case CompositionStatusEnumPROCESSING:
		return 1
	case CompositionStatusEnumCOMPLETE:
		return 2
	case CompositionStatusEnumFAILED:
		return 3

	default:
		panic(errors.New("enum is not valid"))
	}
}

type RoleEnum string

// Enum values for RoleEnum
const (
	RoleEnumUser       RoleEnum = "user"
	RoleEnumAdmin      RoleEnum = "admin"
	RoleEnumSuperAdmin RoleEnum = "super_admin"
)

func AllRoleEnum() []RoleEnum {
	return []RoleEnum{
		RoleEnumUser,
		RoleEnumAdmin,
		RoleEnumSuperAdmin,
	}
}

func (e RoleEnum) IsValid() error {
	switch e {
	case RoleEnumUser, RoleEnumAdmin, RoleEnumSuperAdmin:
		return nil
	default:
		return errors.New("enum is not valid")
	}
}

func (e RoleEnum) String() string {
	return string(e)
}

func (e RoleEnum) Ordinal() int {
	switch e {
	case RoleEnumUser:
		return 0
	case RoleEnumAdmin:
		return 1
	case RoleEnumSuperAdmin:
		return 2

	default:
		panic(errors.New("enum is not valid"))
	}
}
