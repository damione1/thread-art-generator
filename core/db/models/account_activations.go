// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// AccountActivation is an object representing the database table.
type AccountActivation struct {
	ID              string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID          string    `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	UserEmail       string    `boil:"user_email" json:"user_email" toml:"user_email" yaml:"user_email"`
	ActivationToken int       `boil:"activation_token" json:"activation_token" toml:"activation_token" yaml:"activation_token"`
	Expiration      time.Time `boil:"expiration" json:"expiration" toml:"expiration" yaml:"expiration"`
	CreatedAt       null.Time `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`

	R *accountActivationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L accountActivationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AccountActivationColumns = struct {
	ID              string
	UserID          string
	UserEmail       string
	ActivationToken string
	Expiration      string
	CreatedAt       string
}{
	ID:              "id",
	UserID:          "user_id",
	UserEmail:       "user_email",
	ActivationToken: "activation_token",
	Expiration:      "expiration",
	CreatedAt:       "created_at",
}

var AccountActivationTableColumns = struct {
	ID              string
	UserID          string
	UserEmail       string
	ActivationToken string
	Expiration      string
	CreatedAt       string
}{
	ID:              "account_activations.id",
	UserID:          "account_activations.user_id",
	UserEmail:       "account_activations.user_email",
	ActivationToken: "account_activations.activation_token",
	Expiration:      "account_activations.expiration",
	CreatedAt:       "account_activations.created_at",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod      { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod      { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod      { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) LIKE(x string) qm.QueryMod    { return qm.Where(w.field+" LIKE ?", x) }
func (w whereHelperstring) NLIKE(x string) qm.QueryMod   { return qm.Where(w.field+" NOT LIKE ?", x) }
func (w whereHelperstring) ILIKE(x string) qm.QueryMod   { return qm.Where(w.field+" ILIKE ?", x) }
func (w whereHelperstring) NILIKE(x string) qm.QueryMod  { return qm.Where(w.field+" NOT ILIKE ?", x) }
func (w whereHelperstring) SIMILAR(x string) qm.QueryMod { return qm.Where(w.field+" SIMILAR TO ?", x) }
func (w whereHelperstring) NSIMILAR(x string) qm.QueryMod {
	return qm.Where(w.field+" NOT SIMILAR TO ?", x)
}
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var AccountActivationWhere = struct {
	ID              whereHelperstring
	UserID          whereHelperstring
	UserEmail       whereHelperstring
	ActivationToken whereHelperint
	Expiration      whereHelpertime_Time
	CreatedAt       whereHelpernull_Time
}{
	ID:              whereHelperstring{field: "\"account_activations\".\"id\""},
	UserID:          whereHelperstring{field: "\"account_activations\".\"user_id\""},
	UserEmail:       whereHelperstring{field: "\"account_activations\".\"user_email\""},
	ActivationToken: whereHelperint{field: "\"account_activations\".\"activation_token\""},
	Expiration:      whereHelpertime_Time{field: "\"account_activations\".\"expiration\""},
	CreatedAt:       whereHelpernull_Time{field: "\"account_activations\".\"created_at\""},
}

// AccountActivationRels is where relationship names are stored.
var AccountActivationRels = struct {
	User string
}{
	User: "User",
}

// accountActivationR is where relationships are stored.
type accountActivationR struct {
	User *User `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*accountActivationR) NewStruct() *accountActivationR {
	return &accountActivationR{}
}

func (r *accountActivationR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

// accountActivationL is where Load methods for each relationship are stored.
type accountActivationL struct{}

var (
	accountActivationAllColumns            = []string{"id", "user_id", "user_email", "activation_token", "expiration", "created_at"}
	accountActivationColumnsWithoutDefault = []string{"user_id", "user_email", "activation_token"}
	accountActivationColumnsWithDefault    = []string{"id", "expiration", "created_at"}
	accountActivationPrimaryKeyColumns     = []string{"id"}
	accountActivationGeneratedColumns      = []string{}
)

type (
	// AccountActivationSlice is an alias for a slice of pointers to AccountActivation.
	// This should almost always be used instead of []AccountActivation.
	AccountActivationSlice []*AccountActivation
	// AccountActivationHook is the signature for custom AccountActivation hook methods
	AccountActivationHook func(context.Context, boil.ContextExecutor, *AccountActivation) error

	accountActivationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	accountActivationType                 = reflect.TypeOf(&AccountActivation{})
	accountActivationMapping              = queries.MakeStructMapping(accountActivationType)
	accountActivationPrimaryKeyMapping, _ = queries.BindMapping(accountActivationType, accountActivationMapping, accountActivationPrimaryKeyColumns)
	accountActivationInsertCacheMut       sync.RWMutex
	accountActivationInsertCache          = make(map[string]insertCache)
	accountActivationUpdateCacheMut       sync.RWMutex
	accountActivationUpdateCache          = make(map[string]updateCache)
	accountActivationUpsertCacheMut       sync.RWMutex
	accountActivationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var accountActivationAfterSelectMu sync.Mutex
var accountActivationAfterSelectHooks []AccountActivationHook

var accountActivationBeforeInsertMu sync.Mutex
var accountActivationBeforeInsertHooks []AccountActivationHook
var accountActivationAfterInsertMu sync.Mutex
var accountActivationAfterInsertHooks []AccountActivationHook

var accountActivationBeforeUpdateMu sync.Mutex
var accountActivationBeforeUpdateHooks []AccountActivationHook
var accountActivationAfterUpdateMu sync.Mutex
var accountActivationAfterUpdateHooks []AccountActivationHook

var accountActivationBeforeDeleteMu sync.Mutex
var accountActivationBeforeDeleteHooks []AccountActivationHook
var accountActivationAfterDeleteMu sync.Mutex
var accountActivationAfterDeleteHooks []AccountActivationHook

var accountActivationBeforeUpsertMu sync.Mutex
var accountActivationBeforeUpsertHooks []AccountActivationHook
var accountActivationAfterUpsertMu sync.Mutex
var accountActivationAfterUpsertHooks []AccountActivationHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AccountActivation) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range accountActivationAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AccountActivation) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range accountActivationBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AccountActivation) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range accountActivationAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AccountActivation) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range accountActivationBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AccountActivation) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range accountActivationAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AccountActivation) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range accountActivationBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AccountActivation) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range accountActivationAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AccountActivation) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range accountActivationBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AccountActivation) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range accountActivationAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAccountActivationHook registers your hook function for all future operations.
func AddAccountActivationHook(hookPoint boil.HookPoint, accountActivationHook AccountActivationHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		accountActivationAfterSelectMu.Lock()
		accountActivationAfterSelectHooks = append(accountActivationAfterSelectHooks, accountActivationHook)
		accountActivationAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		accountActivationBeforeInsertMu.Lock()
		accountActivationBeforeInsertHooks = append(accountActivationBeforeInsertHooks, accountActivationHook)
		accountActivationBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		accountActivationAfterInsertMu.Lock()
		accountActivationAfterInsertHooks = append(accountActivationAfterInsertHooks, accountActivationHook)
		accountActivationAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		accountActivationBeforeUpdateMu.Lock()
		accountActivationBeforeUpdateHooks = append(accountActivationBeforeUpdateHooks, accountActivationHook)
		accountActivationBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		accountActivationAfterUpdateMu.Lock()
		accountActivationAfterUpdateHooks = append(accountActivationAfterUpdateHooks, accountActivationHook)
		accountActivationAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		accountActivationBeforeDeleteMu.Lock()
		accountActivationBeforeDeleteHooks = append(accountActivationBeforeDeleteHooks, accountActivationHook)
		accountActivationBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		accountActivationAfterDeleteMu.Lock()
		accountActivationAfterDeleteHooks = append(accountActivationAfterDeleteHooks, accountActivationHook)
		accountActivationAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		accountActivationBeforeUpsertMu.Lock()
		accountActivationBeforeUpsertHooks = append(accountActivationBeforeUpsertHooks, accountActivationHook)
		accountActivationBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		accountActivationAfterUpsertMu.Lock()
		accountActivationAfterUpsertHooks = append(accountActivationAfterUpsertHooks, accountActivationHook)
		accountActivationAfterUpsertMu.Unlock()
	}
}

// OneG returns a single accountActivation record from the query using the global executor.
func (q accountActivationQuery) OneG(ctx context.Context) (*AccountActivation, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single accountActivation record from the query.
func (q accountActivationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AccountActivation, error) {
	o := &AccountActivation{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for account_activations")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all AccountActivation records from the query using the global executor.
func (q accountActivationQuery) AllG(ctx context.Context) (AccountActivationSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all AccountActivation records from the query.
func (q accountActivationQuery) All(ctx context.Context, exec boil.ContextExecutor) (AccountActivationSlice, error) {
	var o []*AccountActivation

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to AccountActivation slice")
	}

	if len(accountActivationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all AccountActivation records in the query using the global executor
func (q accountActivationQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all AccountActivation records in the query.
func (q accountActivationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count account_activations rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q accountActivationQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q accountActivationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if account_activations exists")
	}

	return count > 0, nil
}

// User pointed to by the foreign key.
func (o *AccountActivation) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (accountActivationL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAccountActivation interface{}, mods queries.Applicator) error {
	var slice []*AccountActivation
	var object *AccountActivation

	if singular {
		var ok bool
		object, ok = maybeAccountActivation.(*AccountActivation)
		if !ok {
			object = new(AccountActivation)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAccountActivation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAccountActivation))
			}
		}
	} else {
		s, ok := maybeAccountActivation.(*[]*AccountActivation)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAccountActivation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAccountActivation))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &accountActivationR{}
		}
		args[object.UserID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &accountActivationR{}
			}

			args[obj.UserID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.AccountActivations = append(foreign.R.AccountActivations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.AccountActivations = append(foreign.R.AccountActivations, local)
				break
			}
		}
	}

	return nil
}

// SetUserG of the accountActivation to the related item.
// Sets o.R.User to related.
// Adds o to related.R.AccountActivations.
// Uses the global database handle.
func (o *AccountActivation) SetUserG(ctx context.Context, insert bool, related *User) error {
	return o.SetUser(ctx, boil.GetContextDB(), insert, related)
}

// SetUser of the accountActivation to the related item.
// Sets o.R.User to related.
// Adds o to related.R.AccountActivations.
func (o *AccountActivation) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"account_activations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, accountActivationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &accountActivationR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			AccountActivations: AccountActivationSlice{o},
		}
	} else {
		related.R.AccountActivations = append(related.R.AccountActivations, o)
	}

	return nil
}

// AccountActivations retrieves all the records using an executor.
func AccountActivations(mods ...qm.QueryMod) accountActivationQuery {
	mods = append(mods, qm.From("\"account_activations\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"account_activations\".*"})
	}

	return accountActivationQuery{q}
}

// FindAccountActivationG retrieves a single record by ID.
func FindAccountActivationG(ctx context.Context, iD string, selectCols ...string) (*AccountActivation, error) {
	return FindAccountActivation(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindAccountActivation retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAccountActivation(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*AccountActivation, error) {
	accountActivationObj := &AccountActivation{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"account_activations\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, accountActivationObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from account_activations")
	}

	if err = accountActivationObj.doAfterSelectHooks(ctx, exec); err != nil {
		return accountActivationObj, err
	}

	return accountActivationObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *AccountActivation) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AccountActivation) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no account_activations provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(accountActivationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	accountActivationInsertCacheMut.RLock()
	cache, cached := accountActivationInsertCache[key]
	accountActivationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			accountActivationAllColumns,
			accountActivationColumnsWithDefault,
			accountActivationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(accountActivationType, accountActivationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(accountActivationType, accountActivationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"account_activations\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"account_activations\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into account_activations")
	}

	if !cached {
		accountActivationInsertCacheMut.Lock()
		accountActivationInsertCache[key] = cache
		accountActivationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single AccountActivation record using the global executor.
// See Update for more documentation.
func (o *AccountActivation) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the AccountActivation.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AccountActivation) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	accountActivationUpdateCacheMut.RLock()
	cache, cached := accountActivationUpdateCache[key]
	accountActivationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			accountActivationAllColumns,
			accountActivationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update account_activations, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"account_activations\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, accountActivationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(accountActivationType, accountActivationMapping, append(wl, accountActivationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update account_activations row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for account_activations")
	}

	if !cached {
		accountActivationUpdateCacheMut.Lock()
		accountActivationUpdateCache[key] = cache
		accountActivationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q accountActivationQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q accountActivationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for account_activations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for account_activations")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o AccountActivationSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AccountActivationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), accountActivationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"account_activations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, accountActivationPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in accountActivation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all accountActivation")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *AccountActivation) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AccountActivation) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no account_activations provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(accountActivationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	accountActivationUpsertCacheMut.RLock()
	cache, cached := accountActivationUpsertCache[key]
	accountActivationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			accountActivationAllColumns,
			accountActivationColumnsWithDefault,
			accountActivationColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			accountActivationAllColumns,
			accountActivationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert account_activations, could not build update column list")
		}

		ret := strmangle.SetComplement(accountActivationAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(accountActivationPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert account_activations, could not build conflict column list")
			}

			conflict = make([]string, len(accountActivationPrimaryKeyColumns))
			copy(conflict, accountActivationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"account_activations\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(accountActivationType, accountActivationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(accountActivationType, accountActivationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert account_activations")
	}

	if !cached {
		accountActivationUpsertCacheMut.Lock()
		accountActivationUpsertCache[key] = cache
		accountActivationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single AccountActivation record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *AccountActivation) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single AccountActivation record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AccountActivation) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AccountActivation provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), accountActivationPrimaryKeyMapping)
	sql := "DELETE FROM \"account_activations\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from account_activations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for account_activations")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q accountActivationQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q accountActivationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no accountActivationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from account_activations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for account_activations")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o AccountActivationSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AccountActivationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(accountActivationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), accountActivationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"account_activations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, accountActivationPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from accountActivation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for account_activations")
	}

	if len(accountActivationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *AccountActivation) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no AccountActivation provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AccountActivation) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAccountActivation(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AccountActivationSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty AccountActivationSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AccountActivationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AccountActivationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), accountActivationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"account_activations\".* FROM \"account_activations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, accountActivationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AccountActivationSlice")
	}

	*o = slice

	return nil
}

// AccountActivationExistsG checks if the AccountActivation row exists.
func AccountActivationExistsG(ctx context.Context, iD string) (bool, error) {
	return AccountActivationExists(ctx, boil.GetContextDB(), iD)
}

// AccountActivationExists checks if the AccountActivation row exists.
func AccountActivationExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"account_activations\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if account_activations exists")
	}

	return exists, nil
}

// Exists checks if the AccountActivation row exists.
func (o *AccountActivation) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return AccountActivationExists(ctx, exec, o.ID)
}
