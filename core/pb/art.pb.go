// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v6.30.1
// source: art.proto

package pb

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Status of the art
type ArtStatus int32

const (
	// Default unspecified status
	ArtStatus_ART_STATUS_UNSPECIFIED ArtStatus = 0
	// Art is created but image is pending upload
	ArtStatus_ART_STATUS_PENDING_IMAGE ArtStatus = 1
	// Image is uploaded and being processed
	ArtStatus_ART_STATUS_PROCESSING ArtStatus = 2
	// Art is complete with processed image
	ArtStatus_ART_STATUS_COMPLETE ArtStatus = 3
	// Processing failed
	ArtStatus_ART_STATUS_FAILED ArtStatus = 4
	// Art is archived/hidden but not deleted
	ArtStatus_ART_STATUS_ARCHIVED ArtStatus = 5
)

// Enum value maps for ArtStatus.
var (
	ArtStatus_name = map[int32]string{
		0: "ART_STATUS_UNSPECIFIED",
		1: "ART_STATUS_PENDING_IMAGE",
		2: "ART_STATUS_PROCESSING",
		3: "ART_STATUS_COMPLETE",
		4: "ART_STATUS_FAILED",
		5: "ART_STATUS_ARCHIVED",
	}
	ArtStatus_value = map[string]int32{
		"ART_STATUS_UNSPECIFIED":   0,
		"ART_STATUS_PENDING_IMAGE": 1,
		"ART_STATUS_PROCESSING":    2,
		"ART_STATUS_COMPLETE":      3,
		"ART_STATUS_FAILED":        4,
		"ART_STATUS_ARCHIVED":      5,
	}
)

func (x ArtStatus) Enum() *ArtStatus {
	p := new(ArtStatus)
	*p = x
	return p
}

func (x ArtStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ArtStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_art_proto_enumTypes[0].Descriptor()
}

func (ArtStatus) Type() protoreflect.EnumType {
	return &file_art_proto_enumTypes[0]
}

func (x ArtStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ArtStatus.Descriptor instead.
func (ArtStatus) EnumDescriptor() ([]byte, []int) {
	return file_art_proto_rawDescGZIP(), []int{0}
}

type Art struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the Art resource.
	// For example: "users/123/arts/456"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Title is the art's title.
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// ImageURL is the art's image URL.
	ImageUrl string `protobuf:"bytes,3,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`
	// Status of the art
	Status ArtStatus `protobuf:"varint,4,opt,name=status,proto3,enum=pb.ArtStatus" json:"status,omitempty"`
	// The name of the User resource who is the author of the art.
	// For example: "users/456"
	Author string `protobuf:"bytes,5,opt,name=author,proto3" json:"author,omitempty"`
	// CreatedAt is the art's creation time. Output only.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// UpdatedAt is the art's last update time.
	UpdateTime    *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Art) Reset() {
	*x = Art{}
	mi := &file_art_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Art) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Art) ProtoMessage() {}

func (x *Art) ProtoReflect() protoreflect.Message {
	mi := &file_art_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Art.ProtoReflect.Descriptor instead.
func (*Art) Descriptor() ([]byte, []int) {
	return file_art_proto_rawDescGZIP(), []int{0}
}

func (x *Art) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Art) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Art) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *Art) GetStatus() ArtStatus {
	if x != nil {
		return x.Status
	}
	return ArtStatus_ART_STATUS_UNSPECIFIED
}

func (x *Art) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *Art) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Art) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

type CreateArtRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The parent which owns the arts.
	// For example: "users/456"
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// The art to create.
	Art           *Art `protobuf:"bytes,2,opt,name=art,proto3" json:"art,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateArtRequest) Reset() {
	*x = CreateArtRequest{}
	mi := &file_art_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateArtRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateArtRequest) ProtoMessage() {}

func (x *CreateArtRequest) ProtoReflect() protoreflect.Message {
	mi := &file_art_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateArtRequest.ProtoReflect.Descriptor instead.
func (*CreateArtRequest) Descriptor() ([]byte, []int) {
	return file_art_proto_rawDescGZIP(), []int{1}
}

func (x *CreateArtRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateArtRequest) GetArt() *Art {
	if x != nil {
		return x.Art
	}
	return nil
}

type UpdateArtRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The Art resource to update.
	Art *Art `protobuf:"bytes,1,opt,name=art,proto3" json:"art,omitempty"`
	// The update mask applies to the resource.
	UpdateMask    *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateArtRequest) Reset() {
	*x = UpdateArtRequest{}
	mi := &file_art_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateArtRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateArtRequest) ProtoMessage() {}

func (x *UpdateArtRequest) ProtoReflect() protoreflect.Message {
	mi := &file_art_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateArtRequest.ProtoReflect.Descriptor instead.
func (*UpdateArtRequest) Descriptor() ([]byte, []int) {
	return file_art_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateArtRequest) GetArt() *Art {
	if x != nil {
		return x.Art
	}
	return nil
}

func (x *UpdateArtRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type GetArtRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the Art resource.
	// For example: "users/{user}/arts/{art}"
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetArtRequest) Reset() {
	*x = GetArtRequest{}
	mi := &file_art_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetArtRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetArtRequest) ProtoMessage() {}

func (x *GetArtRequest) ProtoReflect() protoreflect.Message {
	mi := &file_art_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetArtRequest.ProtoReflect.Descriptor instead.
func (*GetArtRequest) Descriptor() ([]byte, []int) {
	return file_art_proto_rawDescGZIP(), []int{3}
}

func (x *GetArtRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListArtsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The parent which owns the arts.
	// For example: "users/456"
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// The maximum number of arts to return. The service may return fewer than this value.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListArts` call.
	PageToken     string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListArtsRequest) Reset() {
	*x = ListArtsRequest{}
	mi := &file_art_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListArtsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListArtsRequest) ProtoMessage() {}

func (x *ListArtsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_art_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListArtsRequest.ProtoReflect.Descriptor instead.
func (*ListArtsRequest) Descriptor() ([]byte, []int) {
	return file_art_proto_rawDescGZIP(), []int{4}
}

func (x *ListArtsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListArtsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListArtsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListArtsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The arts returned.
	Arts []*Art `protobuf:"bytes,1,rep,name=arts,proto3" json:"arts,omitempty"`
	// A token to retrieve next page of results.
	// Pass this value in ListArtsRequest.page_token field in the subsequent call to `ListArts` method to retrieve the next page of results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListArtsResponse) Reset() {
	*x = ListArtsResponse{}
	mi := &file_art_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListArtsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListArtsResponse) ProtoMessage() {}

func (x *ListArtsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_art_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListArtsResponse.ProtoReflect.Descriptor instead.
func (*ListArtsResponse) Descriptor() ([]byte, []int) {
	return file_art_proto_rawDescGZIP(), []int{5}
}

func (x *ListArtsResponse) GetArts() []*Art {
	if x != nil {
		return x.Arts
	}
	return nil
}

func (x *ListArtsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type DeleteArtRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the Art resource.
	// For example: "users/123/arts/456"
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteArtRequest) Reset() {
	*x = DeleteArtRequest{}
	mi := &file_art_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteArtRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteArtRequest) ProtoMessage() {}

func (x *DeleteArtRequest) ProtoReflect() protoreflect.Message {
	mi := &file_art_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteArtRequest.ProtoReflect.Descriptor instead.
func (*DeleteArtRequest) Descriptor() ([]byte, []int) {
	return file_art_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteArtRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetArtUploadUrlRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the Art resource to upload an image for.
	// For example: "users/123/arts/456"
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetArtUploadUrlRequest) Reset() {
	*x = GetArtUploadUrlRequest{}
	mi := &file_art_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetArtUploadUrlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetArtUploadUrlRequest) ProtoMessage() {}

func (x *GetArtUploadUrlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_art_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetArtUploadUrlRequest.ProtoReflect.Descriptor instead.
func (*GetArtUploadUrlRequest) Descriptor() ([]byte, []int) {
	return file_art_proto_rawDescGZIP(), []int{7}
}

func (x *GetArtUploadUrlRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetArtUploadUrlResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The signed URL to upload the art image to
	UploadUrl string `protobuf:"bytes,1,opt,name=upload_url,json=uploadUrl,proto3" json:"upload_url,omitempty"`
	// The expiration time for the signed URL
	ExpirationTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=expiration_time,json=expirationTime,proto3" json:"expiration_time,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GetArtUploadUrlResponse) Reset() {
	*x = GetArtUploadUrlResponse{}
	mi := &file_art_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetArtUploadUrlResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetArtUploadUrlResponse) ProtoMessage() {}

func (x *GetArtUploadUrlResponse) ProtoReflect() protoreflect.Message {
	mi := &file_art_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetArtUploadUrlResponse.ProtoReflect.Descriptor instead.
func (*GetArtUploadUrlResponse) Descriptor() ([]byte, []int) {
	return file_art_proto_rawDescGZIP(), []int{8}
}

func (x *GetArtUploadUrlResponse) GetUploadUrl() string {
	if x != nil {
		return x.UploadUrl
	}
	return ""
}

func (x *GetArtUploadUrlResponse) GetExpirationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpirationTime
	}
	return nil
}

type ConfirmArtImageUploadRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the Art resource that has been uploaded.
	// For example: "users/123/arts/456"
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConfirmArtImageUploadRequest) Reset() {
	*x = ConfirmArtImageUploadRequest{}
	mi := &file_art_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfirmArtImageUploadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfirmArtImageUploadRequest) ProtoMessage() {}

func (x *ConfirmArtImageUploadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_art_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfirmArtImageUploadRequest.ProtoReflect.Descriptor instead.
func (*ConfirmArtImageUploadRequest) Descriptor() ([]byte, []int) {
	return file_art_proto_rawDescGZIP(), []int{9}
}

func (x *ConfirmArtImageUploadRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

var File_art_proto protoreflect.FileDescriptor

var file_art_proto_rawDesc = string([]byte{
	0x0a, 0x09, 0x61, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70, 0x62, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b,
	0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd1, 0x04, 0x0a, 0x03,
	0x41, 0x72, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1c, 0xe2, 0x41, 0x01, 0x03, 0xfa, 0x41, 0x15, 0x0a, 0x13, 0x61, 0x72, 0x74, 0x2e,
	0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x41, 0x72, 0x74, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x58, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x42, 0xe2, 0x41, 0x01, 0x02, 0xba, 0x48, 0x3b, 0xba, 0x01, 0x38,
	0x0a, 0x12, 0x61, 0x72, 0x74, 0x2e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x2e, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x12, 0x11, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x20, 0x69, 0x73, 0x20, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x1a, 0x0f, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x73, 0x69,
	0x7a, 0x65, 0x28, 0x29, 0x20, 0x3e, 0x20, 0x30, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0xa0, 0x01, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x82, 0x01, 0xe2, 0x41, 0x01, 0x03, 0xba, 0x48, 0x7b, 0xba, 0x01, 0x78,
	0x0a, 0x1e, 0x61, 0x72, 0x74, 0x2e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x2e,
	0x75, 0x72, 0x69, 0x5f, 0x77, 0x68, 0x65, 0x6e, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x12, 0x2a, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x20, 0x55, 0x52, 0x4c, 0x20, 0x6d, 0x75, 0x73, 0x74,
	0x20, 0x62, 0x65, 0x20, 0x61, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x55, 0x52, 0x49, 0x20,
	0x77, 0x68, 0x65, 0x6e, 0x20, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x1a, 0x2a, 0x74, 0x68,
	0x69, 0x73, 0x20, 0x3d, 0x3d, 0x20, 0x27, 0x27, 0x20, 0x7c, 0x7c, 0x20, 0x74, 0x68, 0x69, 0x73,
	0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x28, 0x27, 0x5e, 0x68, 0x74, 0x74, 0x70, 0x73,
	0x3f, 0x3a, 0x2f, 0x2f, 0x2e, 0x2b, 0x27, 0x29, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55,
	0x72, 0x6c, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x35, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1d, 0xe2, 0x41, 0x01, 0x03, 0xfa, 0x41, 0x16, 0x0a, 0x14, 0x61, 0x72, 0x74, 0x2e, 0x65, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x55, 0x73, 0x65, 0x72, 0x52, 0x06,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x41, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03,
	0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x3a, 0x31, 0xea, 0x41,
	0x2e, 0x0a, 0x13, 0x61, 0x72, 0x74, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x41, 0x72, 0x74, 0x12, 0x17, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75,
	0x73, 0x65, 0x72, 0x7d, 0x2f, 0x61, 0x72, 0x74, 0x73, 0x2f, 0x7b, 0x61, 0x72, 0x74, 0x7d, 0x22,
	0xfb, 0x01, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x72, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0xbf, 0x01, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0xa6, 0x01, 0xe2, 0x41, 0x01, 0x02, 0xfa, 0x41, 0x16, 0x0a,
	0x14, 0x61, 0x72, 0x74, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x55, 0x73, 0x65, 0x72, 0xba, 0x48, 0x85, 0x01, 0xba, 0x01, 0x81, 0x01, 0x0a, 0x14, 0x67,
	0x65, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x12, 0x3b, 0x55, 0x73, 0x65, 0x72, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x73, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x27, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x27,
	0x1a, 0x2c, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x73, 0x69, 0x7a, 0x65, 0x28, 0x29, 0x20, 0x3e, 0x20,
	0x30, 0x20, 0x26, 0x26, 0x20, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x73,
	0x57, 0x69, 0x74, 0x68, 0x28, 0x27, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x27, 0x29, 0x52, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x03, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x72, 0x74, 0x42, 0x0a, 0xe2, 0x41,
	0x01, 0x02, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x03, 0x61, 0x72, 0x74, 0x22, 0x7e, 0x0a,
	0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x25, 0x0a, 0x03, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07,
	0x2e, 0x70, 0x62, 0x2e, 0x41, 0x72, 0x74, 0x42, 0x0a, 0xe2, 0x41, 0x01, 0x02, 0xba, 0x48, 0x03,
	0xc8, 0x01, 0x01, 0x52, 0x03, 0x61, 0x72, 0x74, 0x12, 0x43, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01,
	0x01, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0xe5, 0x01,
	0x0a, 0x0d, 0x47, 0x65, 0x74, 0x41, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0xd3, 0x01, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0xbe,
	0x01, 0xe2, 0x41, 0x01, 0x02, 0xfa, 0x41, 0x15, 0x0a, 0x13, 0x61, 0x72, 0x74, 0x2e, 0x65, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x41, 0x72, 0x74, 0xba, 0x48, 0x9e,
	0x01, 0xba, 0x01, 0x9a, 0x01, 0x0a, 0x13, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x72, 0x74, 0x2e, 0x6e,
	0x61, 0x6d, 0x65, 0x2e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x46, 0x41, 0x72, 0x74, 0x20,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x73,
	0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6d, 0x75,
	0x73, 0x74, 0x20, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x20, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x20, 0x27, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x2a, 0x2f, 0x61, 0x72, 0x74, 0x73, 0x2f,
	0x2a, 0x27, 0x1a, 0x3b, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x73, 0x69, 0x7a, 0x65, 0x28, 0x29, 0x20,
	0x3e, 0x20, 0x30, 0x20, 0x26, 0x26, 0x20, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x73, 0x28, 0x27, 0x5e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x5b, 0x5e, 0x2f, 0x5d,
	0x2b, 0x2f, 0x61, 0x72, 0x74, 0x73, 0x2f, 0x5b, 0x5e, 0x2f, 0x5d, 0x2b, 0x24, 0x27, 0x29, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x9f, 0x02, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x72,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0xc4, 0x01, 0x0a, 0x06, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0xab, 0x01, 0xe2, 0x41, 0x01,
	0x02, 0xfa, 0x41, 0x16, 0x0a, 0x14, 0x61, 0x72, 0x74, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x55, 0x73, 0x65, 0x72, 0xba, 0x48, 0x8a, 0x01, 0xba, 0x01,
	0x86, 0x01, 0x0a, 0x17, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x61, 0x72, 0x74, 0x73, 0x2e, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x2e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x3d, 0x50, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x6e, 0x61, 0x6d,
	0x65, 0x20, 0x69, 0x73, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x20, 0x61, 0x6e,
	0x64, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x20, 0x77, 0x69, 0x74,
	0x68, 0x20, 0x27, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x27, 0x1a, 0x2c, 0x74, 0x68, 0x69, 0x73,
	0x2e, 0x73, 0x69, 0x7a, 0x65, 0x28, 0x29, 0x20, 0x3e, 0x20, 0x30, 0x20, 0x26, 0x26, 0x20, 0x74,
	0x68, 0x69, 0x73, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x28, 0x27,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x27, 0x29, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x12, 0x26, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x09, 0xba, 0x48, 0x06, 0x1a, 0x04, 0x18, 0x64, 0x20, 0x00, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x57, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x41,
	0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x04, 0x61,
	0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x70, 0x62, 0x2e, 0x41,
	0x72, 0x74, 0x52, 0x04, 0x61, 0x72, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0xeb, 0x01, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0xd6, 0x01, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0xc1, 0x01, 0xe2, 0x41, 0x01, 0x02, 0xfa, 0x41, 0x15, 0x0a, 0x13,
	0x61, 0x72, 0x74, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x41, 0x72, 0x74, 0xba, 0x48, 0xa1, 0x01, 0xba, 0x01, 0x9d, 0x01, 0x0a, 0x16, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x5f, 0x61, 0x72, 0x74, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x12, 0x46, 0x41, 0x72, 0x74, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x73, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x66, 0x6f, 0x6c, 0x6c,
	0x6f, 0x77, 0x20, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x20, 0x27, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x2f, 0x2a, 0x2f, 0x61, 0x72, 0x74, 0x73, 0x2f, 0x2a, 0x27, 0x1a, 0x3b, 0x74, 0x68, 0x69,
	0x73, 0x2e, 0x73, 0x69, 0x7a, 0x65, 0x28, 0x29, 0x20, 0x3e, 0x20, 0x30, 0x20, 0x26, 0x26, 0x20,
	0x74, 0x68, 0x69, 0x73, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x28, 0x27, 0x5e, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x2f, 0x5b, 0x5e, 0x2f, 0x5d, 0x2b, 0x2f, 0x61, 0x72, 0x74, 0x73, 0x2f,
	0x5b, 0x5e, 0x2f, 0x5d, 0x2b, 0x24, 0x27, 0x29, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xf9,
	0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x41, 0x72, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x55,
	0x72, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0xde, 0x01, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0xc9, 0x01, 0xe2, 0x41, 0x01, 0x02, 0xfa,
	0x41, 0x15, 0x0a, 0x13, 0x61, 0x72, 0x74, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x41, 0x72, 0x74, 0xba, 0x48, 0xa9, 0x01, 0xba, 0x01, 0xa5, 0x01, 0x0a,
	0x1e, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x72, 0x74, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f,
	0x75, 0x72, 0x6c, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12,
	0x46, 0x41, 0x72, 0x74, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x6e, 0x61,
	0x6d, 0x65, 0x20, 0x69, 0x73, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x20, 0x61,
	0x6e, 0x64, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x20, 0x70,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x20, 0x27, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x2a, 0x2f,
	0x61, 0x72, 0x74, 0x73, 0x2f, 0x2a, 0x27, 0x1a, 0x3b, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x73, 0x69,
	0x7a, 0x65, 0x28, 0x29, 0x20, 0x3e, 0x20, 0x30, 0x20, 0x26, 0x26, 0x20, 0x74, 0x68, 0x69, 0x73,
	0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x28, 0x27, 0x5e, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x2f, 0x5b, 0x5e, 0x2f, 0x5d, 0x2b, 0x2f, 0x61, 0x72, 0x74, 0x73, 0x2f, 0x5b, 0x5e, 0x2f, 0x5d,
	0x2b, 0x24, 0x27, 0x29, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x7d, 0x0a, 0x17, 0x47, 0x65,
	0x74, 0x41, 0x72, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x55, 0x72, 0x6c, 0x12, 0x43, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x85, 0x02, 0x0a, 0x1c, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x41, 0x72, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0xe4, 0x01, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0xcf, 0x01, 0xe2, 0x41, 0x01, 0x02,
	0xfa, 0x41, 0x15, 0x0a, 0x13, 0x61, 0x72, 0x74, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x41, 0x72, 0x74, 0xba, 0x48, 0xaf, 0x01, 0xba, 0x01, 0xab, 0x01,
	0x0a, 0x24, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x5f, 0x61, 0x72, 0x74, 0x5f, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x2e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x46, 0x41, 0x72, 0x74, 0x20, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x73, 0x20, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x66,
	0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x20, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x20, 0x27, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x2f, 0x2a, 0x2f, 0x61, 0x72, 0x74, 0x73, 0x2f, 0x2a, 0x27, 0x1a, 0x3b,
	0x74, 0x68, 0x69, 0x73, 0x2e, 0x73, 0x69, 0x7a, 0x65, 0x28, 0x29, 0x20, 0x3e, 0x20, 0x30, 0x20,
	0x26, 0x26, 0x20, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x28,
	0x27, 0x5e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x5b, 0x5e, 0x2f, 0x5d, 0x2b, 0x2f, 0x61, 0x72,
	0x74, 0x73, 0x2f, 0x5b, 0x5e, 0x2f, 0x5d, 0x2b, 0x24, 0x27, 0x29, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x2a, 0xa9, 0x01, 0x0a, 0x09, 0x41, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1a, 0x0a, 0x16, 0x41, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x41,
	0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e,
	0x47, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x52, 0x54,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49,
	0x4e, 0x47, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x03, 0x12, 0x15, 0x0a,
	0x11, 0x41, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x45, 0x44, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x41, 0x52, 0x43, 0x48, 0x49, 0x56, 0x45, 0x44, 0x10, 0x05, 0x42, 0x24, 0x5a,
	0x22, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x2d, 0x61, 0x72, 0x74, 0x2d, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x3b, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_art_proto_rawDescOnce sync.Once
	file_art_proto_rawDescData []byte
)

func file_art_proto_rawDescGZIP() []byte {
	file_art_proto_rawDescOnce.Do(func() {
		file_art_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_art_proto_rawDesc), len(file_art_proto_rawDesc)))
	})
	return file_art_proto_rawDescData
}

var file_art_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_art_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_art_proto_goTypes = []any{
	(ArtStatus)(0),                       // 0: pb.ArtStatus
	(*Art)(nil),                          // 1: pb.Art
	(*CreateArtRequest)(nil),             // 2: pb.CreateArtRequest
	(*UpdateArtRequest)(nil),             // 3: pb.UpdateArtRequest
	(*GetArtRequest)(nil),                // 4: pb.GetArtRequest
	(*ListArtsRequest)(nil),              // 5: pb.ListArtsRequest
	(*ListArtsResponse)(nil),             // 6: pb.ListArtsResponse
	(*DeleteArtRequest)(nil),             // 7: pb.DeleteArtRequest
	(*GetArtUploadUrlRequest)(nil),       // 8: pb.GetArtUploadUrlRequest
	(*GetArtUploadUrlResponse)(nil),      // 9: pb.GetArtUploadUrlResponse
	(*ConfirmArtImageUploadRequest)(nil), // 10: pb.ConfirmArtImageUploadRequest
	(*timestamppb.Timestamp)(nil),        // 11: google.protobuf.Timestamp
	(*fieldmaskpb.FieldMask)(nil),        // 12: google.protobuf.FieldMask
}
var file_art_proto_depIdxs = []int32{
	0,  // 0: pb.Art.status:type_name -> pb.ArtStatus
	11, // 1: pb.Art.create_time:type_name -> google.protobuf.Timestamp
	11, // 2: pb.Art.update_time:type_name -> google.protobuf.Timestamp
	1,  // 3: pb.CreateArtRequest.art:type_name -> pb.Art
	1,  // 4: pb.UpdateArtRequest.art:type_name -> pb.Art
	12, // 5: pb.UpdateArtRequest.update_mask:type_name -> google.protobuf.FieldMask
	1,  // 6: pb.ListArtsResponse.arts:type_name -> pb.Art
	11, // 7: pb.GetArtUploadUrlResponse.expiration_time:type_name -> google.protobuf.Timestamp
	8,  // [8:8] is the sub-list for method output_type
	8,  // [8:8] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_art_proto_init() }
func file_art_proto_init() {
	if File_art_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_art_proto_rawDesc), len(file_art_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_art_proto_goTypes,
		DependencyIndexes: file_art_proto_depIdxs,
		EnumInfos:         file_art_proto_enumTypes,
		MessageInfos:      file_art_proto_msgTypes,
	}.Build()
	File_art_proto = out.File
	file_art_proto_goTypes = nil
	file_art_proto_depIdxs = nil
}
