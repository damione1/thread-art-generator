// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: services.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ArtGeneratorService_UpdateUser_FullMethodName            = "/pb.ArtGeneratorService/UpdateUser"
	ArtGeneratorService_GetUser_FullMethodName               = "/pb.ArtGeneratorService/GetUser"
	ArtGeneratorService_ListUsers_FullMethodName             = "/pb.ArtGeneratorService/ListUsers"
	ArtGeneratorService_DeleteUser_FullMethodName            = "/pb.ArtGeneratorService/DeleteUser"
	ArtGeneratorService_GetCurrentUser_FullMethodName        = "/pb.ArtGeneratorService/GetCurrentUser"
	ArtGeneratorService_CreateArt_FullMethodName             = "/pb.ArtGeneratorService/CreateArt"
	ArtGeneratorService_GetArt_FullMethodName                = "/pb.ArtGeneratorService/GetArt"
	ArtGeneratorService_UpdateArt_FullMethodName             = "/pb.ArtGeneratorService/UpdateArt"
	ArtGeneratorService_ListArts_FullMethodName              = "/pb.ArtGeneratorService/ListArts"
	ArtGeneratorService_DeleteArt_FullMethodName             = "/pb.ArtGeneratorService/DeleteArt"
	ArtGeneratorService_GetArtUploadUrl_FullMethodName       = "/pb.ArtGeneratorService/GetArtUploadUrl"
	ArtGeneratorService_ConfirmArtImageUpload_FullMethodName = "/pb.ArtGeneratorService/ConfirmArtImageUpload"
	ArtGeneratorService_CreateComposition_FullMethodName     = "/pb.ArtGeneratorService/CreateComposition"
	ArtGeneratorService_GetComposition_FullMethodName        = "/pb.ArtGeneratorService/GetComposition"
	ArtGeneratorService_UpdateComposition_FullMethodName     = "/pb.ArtGeneratorService/UpdateComposition"
	ArtGeneratorService_ListCompositions_FullMethodName      = "/pb.ArtGeneratorService/ListCompositions"
	ArtGeneratorService_DeleteComposition_FullMethodName     = "/pb.ArtGeneratorService/DeleteComposition"
)

// ArtGeneratorServiceClient is the client API for ArtGeneratorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArtGeneratorServiceClient interface {
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*User, error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*User, error)
	ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error)
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetCurrentUser(ctx context.Context, in *GetCurrentUserRequest, opts ...grpc.CallOption) (*User, error)
	CreateArt(ctx context.Context, in *CreateArtRequest, opts ...grpc.CallOption) (*Art, error)
	GetArt(ctx context.Context, in *GetArtRequest, opts ...grpc.CallOption) (*Art, error)
	UpdateArt(ctx context.Context, in *UpdateArtRequest, opts ...grpc.CallOption) (*Art, error)
	ListArts(ctx context.Context, in *ListArtsRequest, opts ...grpc.CallOption) (*ListArtsResponse, error)
	DeleteArt(ctx context.Context, in *DeleteArtRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetArtUploadUrl(ctx context.Context, in *GetArtUploadUrlRequest, opts ...grpc.CallOption) (*GetArtUploadUrlResponse, error)
	ConfirmArtImageUpload(ctx context.Context, in *ConfirmArtImageUploadRequest, opts ...grpc.CallOption) (*Art, error)
	// Composition RPCs
	CreateComposition(ctx context.Context, in *CreateCompositionRequest, opts ...grpc.CallOption) (*Composition, error)
	GetComposition(ctx context.Context, in *GetCompositionRequest, opts ...grpc.CallOption) (*Composition, error)
	UpdateComposition(ctx context.Context, in *UpdateCompositionRequest, opts ...grpc.CallOption) (*Composition, error)
	ListCompositions(ctx context.Context, in *ListCompositionsRequest, opts ...grpc.CallOption) (*ListCompositionsResponse, error)
	DeleteComposition(ctx context.Context, in *DeleteCompositionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type artGeneratorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewArtGeneratorServiceClient(cc grpc.ClientConnInterface) ArtGeneratorServiceClient {
	return &artGeneratorServiceClient{cc}
}

func (c *artGeneratorServiceClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(User)
	err := c.cc.Invoke(ctx, ArtGeneratorService_UpdateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artGeneratorServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(User)
	err := c.cc.Invoke(ctx, ArtGeneratorService_GetUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artGeneratorServiceClient) ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUsersResponse)
	err := c.cc.Invoke(ctx, ArtGeneratorService_ListUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artGeneratorServiceClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ArtGeneratorService_DeleteUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artGeneratorServiceClient) GetCurrentUser(ctx context.Context, in *GetCurrentUserRequest, opts ...grpc.CallOption) (*User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(User)
	err := c.cc.Invoke(ctx, ArtGeneratorService_GetCurrentUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artGeneratorServiceClient) CreateArt(ctx context.Context, in *CreateArtRequest, opts ...grpc.CallOption) (*Art, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Art)
	err := c.cc.Invoke(ctx, ArtGeneratorService_CreateArt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artGeneratorServiceClient) GetArt(ctx context.Context, in *GetArtRequest, opts ...grpc.CallOption) (*Art, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Art)
	err := c.cc.Invoke(ctx, ArtGeneratorService_GetArt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artGeneratorServiceClient) UpdateArt(ctx context.Context, in *UpdateArtRequest, opts ...grpc.CallOption) (*Art, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Art)
	err := c.cc.Invoke(ctx, ArtGeneratorService_UpdateArt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artGeneratorServiceClient) ListArts(ctx context.Context, in *ListArtsRequest, opts ...grpc.CallOption) (*ListArtsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListArtsResponse)
	err := c.cc.Invoke(ctx, ArtGeneratorService_ListArts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artGeneratorServiceClient) DeleteArt(ctx context.Context, in *DeleteArtRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ArtGeneratorService_DeleteArt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artGeneratorServiceClient) GetArtUploadUrl(ctx context.Context, in *GetArtUploadUrlRequest, opts ...grpc.CallOption) (*GetArtUploadUrlResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetArtUploadUrlResponse)
	err := c.cc.Invoke(ctx, ArtGeneratorService_GetArtUploadUrl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artGeneratorServiceClient) ConfirmArtImageUpload(ctx context.Context, in *ConfirmArtImageUploadRequest, opts ...grpc.CallOption) (*Art, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Art)
	err := c.cc.Invoke(ctx, ArtGeneratorService_ConfirmArtImageUpload_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artGeneratorServiceClient) CreateComposition(ctx context.Context, in *CreateCompositionRequest, opts ...grpc.CallOption) (*Composition, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Composition)
	err := c.cc.Invoke(ctx, ArtGeneratorService_CreateComposition_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artGeneratorServiceClient) GetComposition(ctx context.Context, in *GetCompositionRequest, opts ...grpc.CallOption) (*Composition, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Composition)
	err := c.cc.Invoke(ctx, ArtGeneratorService_GetComposition_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artGeneratorServiceClient) UpdateComposition(ctx context.Context, in *UpdateCompositionRequest, opts ...grpc.CallOption) (*Composition, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Composition)
	err := c.cc.Invoke(ctx, ArtGeneratorService_UpdateComposition_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artGeneratorServiceClient) ListCompositions(ctx context.Context, in *ListCompositionsRequest, opts ...grpc.CallOption) (*ListCompositionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCompositionsResponse)
	err := c.cc.Invoke(ctx, ArtGeneratorService_ListCompositions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artGeneratorServiceClient) DeleteComposition(ctx context.Context, in *DeleteCompositionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ArtGeneratorService_DeleteComposition_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArtGeneratorServiceServer is the server API for ArtGeneratorService service.
// All implementations must embed UnimplementedArtGeneratorServiceServer
// for forward compatibility.
type ArtGeneratorServiceServer interface {
	UpdateUser(context.Context, *UpdateUserRequest) (*User, error)
	GetUser(context.Context, *GetUserRequest) (*User, error)
	ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error)
	DeleteUser(context.Context, *DeleteUserRequest) (*emptypb.Empty, error)
	GetCurrentUser(context.Context, *GetCurrentUserRequest) (*User, error)
	CreateArt(context.Context, *CreateArtRequest) (*Art, error)
	GetArt(context.Context, *GetArtRequest) (*Art, error)
	UpdateArt(context.Context, *UpdateArtRequest) (*Art, error)
	ListArts(context.Context, *ListArtsRequest) (*ListArtsResponse, error)
	DeleteArt(context.Context, *DeleteArtRequest) (*emptypb.Empty, error)
	GetArtUploadUrl(context.Context, *GetArtUploadUrlRequest) (*GetArtUploadUrlResponse, error)
	ConfirmArtImageUpload(context.Context, *ConfirmArtImageUploadRequest) (*Art, error)
	// Composition RPCs
	CreateComposition(context.Context, *CreateCompositionRequest) (*Composition, error)
	GetComposition(context.Context, *GetCompositionRequest) (*Composition, error)
	UpdateComposition(context.Context, *UpdateCompositionRequest) (*Composition, error)
	ListCompositions(context.Context, *ListCompositionsRequest) (*ListCompositionsResponse, error)
	DeleteComposition(context.Context, *DeleteCompositionRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedArtGeneratorServiceServer()
}

// UnimplementedArtGeneratorServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedArtGeneratorServiceServer struct{}

func (UnimplementedArtGeneratorServiceServer) UpdateUser(context.Context, *UpdateUserRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedArtGeneratorServiceServer) GetUser(context.Context, *GetUserRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedArtGeneratorServiceServer) ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (UnimplementedArtGeneratorServiceServer) DeleteUser(context.Context, *DeleteUserRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedArtGeneratorServiceServer) GetCurrentUser(context.Context, *GetCurrentUserRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentUser not implemented")
}
func (UnimplementedArtGeneratorServiceServer) CreateArt(context.Context, *CreateArtRequest) (*Art, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateArt not implemented")
}
func (UnimplementedArtGeneratorServiceServer) GetArt(context.Context, *GetArtRequest) (*Art, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArt not implemented")
}
func (UnimplementedArtGeneratorServiceServer) UpdateArt(context.Context, *UpdateArtRequest) (*Art, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateArt not implemented")
}
func (UnimplementedArtGeneratorServiceServer) ListArts(context.Context, *ListArtsRequest) (*ListArtsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListArts not implemented")
}
func (UnimplementedArtGeneratorServiceServer) DeleteArt(context.Context, *DeleteArtRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteArt not implemented")
}
func (UnimplementedArtGeneratorServiceServer) GetArtUploadUrl(context.Context, *GetArtUploadUrlRequest) (*GetArtUploadUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArtUploadUrl not implemented")
}
func (UnimplementedArtGeneratorServiceServer) ConfirmArtImageUpload(context.Context, *ConfirmArtImageUploadRequest) (*Art, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmArtImageUpload not implemented")
}
func (UnimplementedArtGeneratorServiceServer) CreateComposition(context.Context, *CreateCompositionRequest) (*Composition, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateComposition not implemented")
}
func (UnimplementedArtGeneratorServiceServer) GetComposition(context.Context, *GetCompositionRequest) (*Composition, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComposition not implemented")
}
func (UnimplementedArtGeneratorServiceServer) UpdateComposition(context.Context, *UpdateCompositionRequest) (*Composition, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateComposition not implemented")
}
func (UnimplementedArtGeneratorServiceServer) ListCompositions(context.Context, *ListCompositionsRequest) (*ListCompositionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCompositions not implemented")
}
func (UnimplementedArtGeneratorServiceServer) DeleteComposition(context.Context, *DeleteCompositionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteComposition not implemented")
}
func (UnimplementedArtGeneratorServiceServer) mustEmbedUnimplementedArtGeneratorServiceServer() {}
func (UnimplementedArtGeneratorServiceServer) testEmbeddedByValue()                             {}

// UnsafeArtGeneratorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArtGeneratorServiceServer will
// result in compilation errors.
type UnsafeArtGeneratorServiceServer interface {
	mustEmbedUnimplementedArtGeneratorServiceServer()
}

func RegisterArtGeneratorServiceServer(s grpc.ServiceRegistrar, srv ArtGeneratorServiceServer) {
	// If the following call pancis, it indicates UnimplementedArtGeneratorServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ArtGeneratorService_ServiceDesc, srv)
}

func _ArtGeneratorService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtGeneratorServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtGeneratorService_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtGeneratorServiceServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtGeneratorService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtGeneratorServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtGeneratorService_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtGeneratorServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtGeneratorService_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtGeneratorServiceServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtGeneratorService_ListUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtGeneratorServiceServer).ListUsers(ctx, req.(*ListUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtGeneratorService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtGeneratorServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtGeneratorService_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtGeneratorServiceServer).DeleteUser(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtGeneratorService_GetCurrentUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrentUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtGeneratorServiceServer).GetCurrentUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtGeneratorService_GetCurrentUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtGeneratorServiceServer).GetCurrentUser(ctx, req.(*GetCurrentUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtGeneratorService_CreateArt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateArtRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtGeneratorServiceServer).CreateArt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtGeneratorService_CreateArt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtGeneratorServiceServer).CreateArt(ctx, req.(*CreateArtRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtGeneratorService_GetArt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArtRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtGeneratorServiceServer).GetArt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtGeneratorService_GetArt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtGeneratorServiceServer).GetArt(ctx, req.(*GetArtRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtGeneratorService_UpdateArt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateArtRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtGeneratorServiceServer).UpdateArt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtGeneratorService_UpdateArt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtGeneratorServiceServer).UpdateArt(ctx, req.(*UpdateArtRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtGeneratorService_ListArts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListArtsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtGeneratorServiceServer).ListArts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtGeneratorService_ListArts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtGeneratorServiceServer).ListArts(ctx, req.(*ListArtsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtGeneratorService_DeleteArt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteArtRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtGeneratorServiceServer).DeleteArt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtGeneratorService_DeleteArt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtGeneratorServiceServer).DeleteArt(ctx, req.(*DeleteArtRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtGeneratorService_GetArtUploadUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArtUploadUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtGeneratorServiceServer).GetArtUploadUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtGeneratorService_GetArtUploadUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtGeneratorServiceServer).GetArtUploadUrl(ctx, req.(*GetArtUploadUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtGeneratorService_ConfirmArtImageUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmArtImageUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtGeneratorServiceServer).ConfirmArtImageUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtGeneratorService_ConfirmArtImageUpload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtGeneratorServiceServer).ConfirmArtImageUpload(ctx, req.(*ConfirmArtImageUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtGeneratorService_CreateComposition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCompositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtGeneratorServiceServer).CreateComposition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtGeneratorService_CreateComposition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtGeneratorServiceServer).CreateComposition(ctx, req.(*CreateCompositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtGeneratorService_GetComposition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtGeneratorServiceServer).GetComposition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtGeneratorService_GetComposition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtGeneratorServiceServer).GetComposition(ctx, req.(*GetCompositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtGeneratorService_UpdateComposition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCompositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtGeneratorServiceServer).UpdateComposition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtGeneratorService_UpdateComposition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtGeneratorServiceServer).UpdateComposition(ctx, req.(*UpdateCompositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtGeneratorService_ListCompositions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCompositionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtGeneratorServiceServer).ListCompositions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtGeneratorService_ListCompositions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtGeneratorServiceServer).ListCompositions(ctx, req.(*ListCompositionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtGeneratorService_DeleteComposition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCompositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtGeneratorServiceServer).DeleteComposition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtGeneratorService_DeleteComposition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtGeneratorServiceServer).DeleteComposition(ctx, req.(*DeleteCompositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ArtGeneratorService_ServiceDesc is the grpc.ServiceDesc for ArtGeneratorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ArtGeneratorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ArtGeneratorService",
	HandlerType: (*ArtGeneratorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateUser",
			Handler:    _ArtGeneratorService_UpdateUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _ArtGeneratorService_GetUser_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _ArtGeneratorService_ListUsers_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _ArtGeneratorService_DeleteUser_Handler,
		},
		{
			MethodName: "GetCurrentUser",
			Handler:    _ArtGeneratorService_GetCurrentUser_Handler,
		},
		{
			MethodName: "CreateArt",
			Handler:    _ArtGeneratorService_CreateArt_Handler,
		},
		{
			MethodName: "GetArt",
			Handler:    _ArtGeneratorService_GetArt_Handler,
		},
		{
			MethodName: "UpdateArt",
			Handler:    _ArtGeneratorService_UpdateArt_Handler,
		},
		{
			MethodName: "ListArts",
			Handler:    _ArtGeneratorService_ListArts_Handler,
		},
		{
			MethodName: "DeleteArt",
			Handler:    _ArtGeneratorService_DeleteArt_Handler,
		},
		{
			MethodName: "GetArtUploadUrl",
			Handler:    _ArtGeneratorService_GetArtUploadUrl_Handler,
		},
		{
			MethodName: "ConfirmArtImageUpload",
			Handler:    _ArtGeneratorService_ConfirmArtImageUpload_Handler,
		},
		{
			MethodName: "CreateComposition",
			Handler:    _ArtGeneratorService_CreateComposition_Handler,
		},
		{
			MethodName: "GetComposition",
			Handler:    _ArtGeneratorService_GetComposition_Handler,
		},
		{
			MethodName: "UpdateComposition",
			Handler:    _ArtGeneratorService_UpdateComposition_Handler,
		},
		{
			MethodName: "ListCompositions",
			Handler:    _ArtGeneratorService_ListCompositions_Handler,
		},
		{
			MethodName: "DeleteComposition",
			Handler:    _ArtGeneratorService_DeleteComposition_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services.proto",
}
