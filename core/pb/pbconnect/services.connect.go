// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: services.proto

package pbconnect

import (
	context "context"
	errors "errors"
	pb "github.com/Damione1/thread-art-generator/core/pb"
	connect_go "github.com/bufbuild/connect-go"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ArtGeneratorServiceName is the fully-qualified name of the ArtGeneratorService service.
	ArtGeneratorServiceName = "pb.ArtGeneratorService"
)

// ArtGeneratorServiceClient is a client for the pb.ArtGeneratorService service.
type ArtGeneratorServiceClient interface {
	UpdateUser(context.Context, *connect_go.Request[pb.UpdateUserRequest]) (*connect_go.Response[pb.User], error)
	GetUser(context.Context, *connect_go.Request[pb.GetUserRequest]) (*connect_go.Response[pb.User], error)
	ListUsers(context.Context, *connect_go.Request[pb.ListUsersRequest]) (*connect_go.Response[pb.ListUsersResponse], error)
	DeleteUser(context.Context, *connect_go.Request[pb.DeleteUserRequest]) (*connect_go.Response[emptypb.Empty], error)
	GetCurrentUser(context.Context, *connect_go.Request[pb.GetCurrentUserRequest]) (*connect_go.Response[pb.User], error)
	CreateArt(context.Context, *connect_go.Request[pb.CreateArtRequest]) (*connect_go.Response[pb.Art], error)
	GetArt(context.Context, *connect_go.Request[pb.GetArtRequest]) (*connect_go.Response[pb.Art], error)
	UpdateArt(context.Context, *connect_go.Request[pb.UpdateArtRequest]) (*connect_go.Response[pb.Art], error)
	ListArts(context.Context, *connect_go.Request[pb.ListArtsRequest]) (*connect_go.Response[pb.ListArtsResponse], error)
	DeleteArt(context.Context, *connect_go.Request[pb.DeleteArtRequest]) (*connect_go.Response[emptypb.Empty], error)
	GetArtUploadUrl(context.Context, *connect_go.Request[pb.GetArtUploadUrlRequest]) (*connect_go.Response[pb.GetArtUploadUrlResponse], error)
	ConfirmArtImageUpload(context.Context, *connect_go.Request[pb.ConfirmArtImageUploadRequest]) (*connect_go.Response[pb.Art], error)
	// Composition RPCs
	CreateComposition(context.Context, *connect_go.Request[pb.CreateCompositionRequest]) (*connect_go.Response[pb.Composition], error)
	GetComposition(context.Context, *connect_go.Request[pb.GetCompositionRequest]) (*connect_go.Response[pb.Composition], error)
	UpdateComposition(context.Context, *connect_go.Request[pb.UpdateCompositionRequest]) (*connect_go.Response[pb.Composition], error)
	ListCompositions(context.Context, *connect_go.Request[pb.ListCompositionsRequest]) (*connect_go.Response[pb.ListCompositionsResponse], error)
	DeleteComposition(context.Context, *connect_go.Request[pb.DeleteCompositionRequest]) (*connect_go.Response[emptypb.Empty], error)
}

// NewArtGeneratorServiceClient constructs a client for the pb.ArtGeneratorService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewArtGeneratorServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ArtGeneratorServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &artGeneratorServiceClient{
		updateUser: connect_go.NewClient[pb.UpdateUserRequest, pb.User](
			httpClient,
			baseURL+"/pb.ArtGeneratorService/UpdateUser",
			opts...,
		),
		getUser: connect_go.NewClient[pb.GetUserRequest, pb.User](
			httpClient,
			baseURL+"/pb.ArtGeneratorService/GetUser",
			opts...,
		),
		listUsers: connect_go.NewClient[pb.ListUsersRequest, pb.ListUsersResponse](
			httpClient,
			baseURL+"/pb.ArtGeneratorService/ListUsers",
			opts...,
		),
		deleteUser: connect_go.NewClient[pb.DeleteUserRequest, emptypb.Empty](
			httpClient,
			baseURL+"/pb.ArtGeneratorService/DeleteUser",
			opts...,
		),
		getCurrentUser: connect_go.NewClient[pb.GetCurrentUserRequest, pb.User](
			httpClient,
			baseURL+"/pb.ArtGeneratorService/GetCurrentUser",
			opts...,
		),
		createArt: connect_go.NewClient[pb.CreateArtRequest, pb.Art](
			httpClient,
			baseURL+"/pb.ArtGeneratorService/CreateArt",
			opts...,
		),
		getArt: connect_go.NewClient[pb.GetArtRequest, pb.Art](
			httpClient,
			baseURL+"/pb.ArtGeneratorService/GetArt",
			opts...,
		),
		updateArt: connect_go.NewClient[pb.UpdateArtRequest, pb.Art](
			httpClient,
			baseURL+"/pb.ArtGeneratorService/UpdateArt",
			opts...,
		),
		listArts: connect_go.NewClient[pb.ListArtsRequest, pb.ListArtsResponse](
			httpClient,
			baseURL+"/pb.ArtGeneratorService/ListArts",
			opts...,
		),
		deleteArt: connect_go.NewClient[pb.DeleteArtRequest, emptypb.Empty](
			httpClient,
			baseURL+"/pb.ArtGeneratorService/DeleteArt",
			opts...,
		),
		getArtUploadUrl: connect_go.NewClient[pb.GetArtUploadUrlRequest, pb.GetArtUploadUrlResponse](
			httpClient,
			baseURL+"/pb.ArtGeneratorService/GetArtUploadUrl",
			opts...,
		),
		confirmArtImageUpload: connect_go.NewClient[pb.ConfirmArtImageUploadRequest, pb.Art](
			httpClient,
			baseURL+"/pb.ArtGeneratorService/ConfirmArtImageUpload",
			opts...,
		),
		createComposition: connect_go.NewClient[pb.CreateCompositionRequest, pb.Composition](
			httpClient,
			baseURL+"/pb.ArtGeneratorService/CreateComposition",
			opts...,
		),
		getComposition: connect_go.NewClient[pb.GetCompositionRequest, pb.Composition](
			httpClient,
			baseURL+"/pb.ArtGeneratorService/GetComposition",
			opts...,
		),
		updateComposition: connect_go.NewClient[pb.UpdateCompositionRequest, pb.Composition](
			httpClient,
			baseURL+"/pb.ArtGeneratorService/UpdateComposition",
			opts...,
		),
		listCompositions: connect_go.NewClient[pb.ListCompositionsRequest, pb.ListCompositionsResponse](
			httpClient,
			baseURL+"/pb.ArtGeneratorService/ListCompositions",
			opts...,
		),
		deleteComposition: connect_go.NewClient[pb.DeleteCompositionRequest, emptypb.Empty](
			httpClient,
			baseURL+"/pb.ArtGeneratorService/DeleteComposition",
			opts...,
		),
	}
}

// artGeneratorServiceClient implements ArtGeneratorServiceClient.
type artGeneratorServiceClient struct {
	updateUser            *connect_go.Client[pb.UpdateUserRequest, pb.User]
	getUser               *connect_go.Client[pb.GetUserRequest, pb.User]
	listUsers             *connect_go.Client[pb.ListUsersRequest, pb.ListUsersResponse]
	deleteUser            *connect_go.Client[pb.DeleteUserRequest, emptypb.Empty]
	getCurrentUser        *connect_go.Client[pb.GetCurrentUserRequest, pb.User]
	createArt             *connect_go.Client[pb.CreateArtRequest, pb.Art]
	getArt                *connect_go.Client[pb.GetArtRequest, pb.Art]
	updateArt             *connect_go.Client[pb.UpdateArtRequest, pb.Art]
	listArts              *connect_go.Client[pb.ListArtsRequest, pb.ListArtsResponse]
	deleteArt             *connect_go.Client[pb.DeleteArtRequest, emptypb.Empty]
	getArtUploadUrl       *connect_go.Client[pb.GetArtUploadUrlRequest, pb.GetArtUploadUrlResponse]
	confirmArtImageUpload *connect_go.Client[pb.ConfirmArtImageUploadRequest, pb.Art]
	createComposition     *connect_go.Client[pb.CreateCompositionRequest, pb.Composition]
	getComposition        *connect_go.Client[pb.GetCompositionRequest, pb.Composition]
	updateComposition     *connect_go.Client[pb.UpdateCompositionRequest, pb.Composition]
	listCompositions      *connect_go.Client[pb.ListCompositionsRequest, pb.ListCompositionsResponse]
	deleteComposition     *connect_go.Client[pb.DeleteCompositionRequest, emptypb.Empty]
}

// UpdateUser calls pb.ArtGeneratorService.UpdateUser.
func (c *artGeneratorServiceClient) UpdateUser(ctx context.Context, req *connect_go.Request[pb.UpdateUserRequest]) (*connect_go.Response[pb.User], error) {
	return c.updateUser.CallUnary(ctx, req)
}

// GetUser calls pb.ArtGeneratorService.GetUser.
func (c *artGeneratorServiceClient) GetUser(ctx context.Context, req *connect_go.Request[pb.GetUserRequest]) (*connect_go.Response[pb.User], error) {
	return c.getUser.CallUnary(ctx, req)
}

// ListUsers calls pb.ArtGeneratorService.ListUsers.
func (c *artGeneratorServiceClient) ListUsers(ctx context.Context, req *connect_go.Request[pb.ListUsersRequest]) (*connect_go.Response[pb.ListUsersResponse], error) {
	return c.listUsers.CallUnary(ctx, req)
}

// DeleteUser calls pb.ArtGeneratorService.DeleteUser.
func (c *artGeneratorServiceClient) DeleteUser(ctx context.Context, req *connect_go.Request[pb.DeleteUserRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.deleteUser.CallUnary(ctx, req)
}

// GetCurrentUser calls pb.ArtGeneratorService.GetCurrentUser.
func (c *artGeneratorServiceClient) GetCurrentUser(ctx context.Context, req *connect_go.Request[pb.GetCurrentUserRequest]) (*connect_go.Response[pb.User], error) {
	return c.getCurrentUser.CallUnary(ctx, req)
}

// CreateArt calls pb.ArtGeneratorService.CreateArt.
func (c *artGeneratorServiceClient) CreateArt(ctx context.Context, req *connect_go.Request[pb.CreateArtRequest]) (*connect_go.Response[pb.Art], error) {
	return c.createArt.CallUnary(ctx, req)
}

// GetArt calls pb.ArtGeneratorService.GetArt.
func (c *artGeneratorServiceClient) GetArt(ctx context.Context, req *connect_go.Request[pb.GetArtRequest]) (*connect_go.Response[pb.Art], error) {
	return c.getArt.CallUnary(ctx, req)
}

// UpdateArt calls pb.ArtGeneratorService.UpdateArt.
func (c *artGeneratorServiceClient) UpdateArt(ctx context.Context, req *connect_go.Request[pb.UpdateArtRequest]) (*connect_go.Response[pb.Art], error) {
	return c.updateArt.CallUnary(ctx, req)
}

// ListArts calls pb.ArtGeneratorService.ListArts.
func (c *artGeneratorServiceClient) ListArts(ctx context.Context, req *connect_go.Request[pb.ListArtsRequest]) (*connect_go.Response[pb.ListArtsResponse], error) {
	return c.listArts.CallUnary(ctx, req)
}

// DeleteArt calls pb.ArtGeneratorService.DeleteArt.
func (c *artGeneratorServiceClient) DeleteArt(ctx context.Context, req *connect_go.Request[pb.DeleteArtRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.deleteArt.CallUnary(ctx, req)
}

// GetArtUploadUrl calls pb.ArtGeneratorService.GetArtUploadUrl.
func (c *artGeneratorServiceClient) GetArtUploadUrl(ctx context.Context, req *connect_go.Request[pb.GetArtUploadUrlRequest]) (*connect_go.Response[pb.GetArtUploadUrlResponse], error) {
	return c.getArtUploadUrl.CallUnary(ctx, req)
}

// ConfirmArtImageUpload calls pb.ArtGeneratorService.ConfirmArtImageUpload.
func (c *artGeneratorServiceClient) ConfirmArtImageUpload(ctx context.Context, req *connect_go.Request[pb.ConfirmArtImageUploadRequest]) (*connect_go.Response[pb.Art], error) {
	return c.confirmArtImageUpload.CallUnary(ctx, req)
}

// CreateComposition calls pb.ArtGeneratorService.CreateComposition.
func (c *artGeneratorServiceClient) CreateComposition(ctx context.Context, req *connect_go.Request[pb.CreateCompositionRequest]) (*connect_go.Response[pb.Composition], error) {
	return c.createComposition.CallUnary(ctx, req)
}

// GetComposition calls pb.ArtGeneratorService.GetComposition.
func (c *artGeneratorServiceClient) GetComposition(ctx context.Context, req *connect_go.Request[pb.GetCompositionRequest]) (*connect_go.Response[pb.Composition], error) {
	return c.getComposition.CallUnary(ctx, req)
}

// UpdateComposition calls pb.ArtGeneratorService.UpdateComposition.
func (c *artGeneratorServiceClient) UpdateComposition(ctx context.Context, req *connect_go.Request[pb.UpdateCompositionRequest]) (*connect_go.Response[pb.Composition], error) {
	return c.updateComposition.CallUnary(ctx, req)
}

// ListCompositions calls pb.ArtGeneratorService.ListCompositions.
func (c *artGeneratorServiceClient) ListCompositions(ctx context.Context, req *connect_go.Request[pb.ListCompositionsRequest]) (*connect_go.Response[pb.ListCompositionsResponse], error) {
	return c.listCompositions.CallUnary(ctx, req)
}

// DeleteComposition calls pb.ArtGeneratorService.DeleteComposition.
func (c *artGeneratorServiceClient) DeleteComposition(ctx context.Context, req *connect_go.Request[pb.DeleteCompositionRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.deleteComposition.CallUnary(ctx, req)
}

// ArtGeneratorServiceHandler is an implementation of the pb.ArtGeneratorService service.
type ArtGeneratorServiceHandler interface {
	UpdateUser(context.Context, *connect_go.Request[pb.UpdateUserRequest]) (*connect_go.Response[pb.User], error)
	GetUser(context.Context, *connect_go.Request[pb.GetUserRequest]) (*connect_go.Response[pb.User], error)
	ListUsers(context.Context, *connect_go.Request[pb.ListUsersRequest]) (*connect_go.Response[pb.ListUsersResponse], error)
	DeleteUser(context.Context, *connect_go.Request[pb.DeleteUserRequest]) (*connect_go.Response[emptypb.Empty], error)
	GetCurrentUser(context.Context, *connect_go.Request[pb.GetCurrentUserRequest]) (*connect_go.Response[pb.User], error)
	CreateArt(context.Context, *connect_go.Request[pb.CreateArtRequest]) (*connect_go.Response[pb.Art], error)
	GetArt(context.Context, *connect_go.Request[pb.GetArtRequest]) (*connect_go.Response[pb.Art], error)
	UpdateArt(context.Context, *connect_go.Request[pb.UpdateArtRequest]) (*connect_go.Response[pb.Art], error)
	ListArts(context.Context, *connect_go.Request[pb.ListArtsRequest]) (*connect_go.Response[pb.ListArtsResponse], error)
	DeleteArt(context.Context, *connect_go.Request[pb.DeleteArtRequest]) (*connect_go.Response[emptypb.Empty], error)
	GetArtUploadUrl(context.Context, *connect_go.Request[pb.GetArtUploadUrlRequest]) (*connect_go.Response[pb.GetArtUploadUrlResponse], error)
	ConfirmArtImageUpload(context.Context, *connect_go.Request[pb.ConfirmArtImageUploadRequest]) (*connect_go.Response[pb.Art], error)
	// Composition RPCs
	CreateComposition(context.Context, *connect_go.Request[pb.CreateCompositionRequest]) (*connect_go.Response[pb.Composition], error)
	GetComposition(context.Context, *connect_go.Request[pb.GetCompositionRequest]) (*connect_go.Response[pb.Composition], error)
	UpdateComposition(context.Context, *connect_go.Request[pb.UpdateCompositionRequest]) (*connect_go.Response[pb.Composition], error)
	ListCompositions(context.Context, *connect_go.Request[pb.ListCompositionsRequest]) (*connect_go.Response[pb.ListCompositionsResponse], error)
	DeleteComposition(context.Context, *connect_go.Request[pb.DeleteCompositionRequest]) (*connect_go.Response[emptypb.Empty], error)
}

// NewArtGeneratorServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewArtGeneratorServiceHandler(svc ArtGeneratorServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/pb.ArtGeneratorService/UpdateUser", connect_go.NewUnaryHandler(
		"/pb.ArtGeneratorService/UpdateUser",
		svc.UpdateUser,
		opts...,
	))
	mux.Handle("/pb.ArtGeneratorService/GetUser", connect_go.NewUnaryHandler(
		"/pb.ArtGeneratorService/GetUser",
		svc.GetUser,
		opts...,
	))
	mux.Handle("/pb.ArtGeneratorService/ListUsers", connect_go.NewUnaryHandler(
		"/pb.ArtGeneratorService/ListUsers",
		svc.ListUsers,
		opts...,
	))
	mux.Handle("/pb.ArtGeneratorService/DeleteUser", connect_go.NewUnaryHandler(
		"/pb.ArtGeneratorService/DeleteUser",
		svc.DeleteUser,
		opts...,
	))
	mux.Handle("/pb.ArtGeneratorService/GetCurrentUser", connect_go.NewUnaryHandler(
		"/pb.ArtGeneratorService/GetCurrentUser",
		svc.GetCurrentUser,
		opts...,
	))
	mux.Handle("/pb.ArtGeneratorService/CreateArt", connect_go.NewUnaryHandler(
		"/pb.ArtGeneratorService/CreateArt",
		svc.CreateArt,
		opts...,
	))
	mux.Handle("/pb.ArtGeneratorService/GetArt", connect_go.NewUnaryHandler(
		"/pb.ArtGeneratorService/GetArt",
		svc.GetArt,
		opts...,
	))
	mux.Handle("/pb.ArtGeneratorService/UpdateArt", connect_go.NewUnaryHandler(
		"/pb.ArtGeneratorService/UpdateArt",
		svc.UpdateArt,
		opts...,
	))
	mux.Handle("/pb.ArtGeneratorService/ListArts", connect_go.NewUnaryHandler(
		"/pb.ArtGeneratorService/ListArts",
		svc.ListArts,
		opts...,
	))
	mux.Handle("/pb.ArtGeneratorService/DeleteArt", connect_go.NewUnaryHandler(
		"/pb.ArtGeneratorService/DeleteArt",
		svc.DeleteArt,
		opts...,
	))
	mux.Handle("/pb.ArtGeneratorService/GetArtUploadUrl", connect_go.NewUnaryHandler(
		"/pb.ArtGeneratorService/GetArtUploadUrl",
		svc.GetArtUploadUrl,
		opts...,
	))
	mux.Handle("/pb.ArtGeneratorService/ConfirmArtImageUpload", connect_go.NewUnaryHandler(
		"/pb.ArtGeneratorService/ConfirmArtImageUpload",
		svc.ConfirmArtImageUpload,
		opts...,
	))
	mux.Handle("/pb.ArtGeneratorService/CreateComposition", connect_go.NewUnaryHandler(
		"/pb.ArtGeneratorService/CreateComposition",
		svc.CreateComposition,
		opts...,
	))
	mux.Handle("/pb.ArtGeneratorService/GetComposition", connect_go.NewUnaryHandler(
		"/pb.ArtGeneratorService/GetComposition",
		svc.GetComposition,
		opts...,
	))
	mux.Handle("/pb.ArtGeneratorService/UpdateComposition", connect_go.NewUnaryHandler(
		"/pb.ArtGeneratorService/UpdateComposition",
		svc.UpdateComposition,
		opts...,
	))
	mux.Handle("/pb.ArtGeneratorService/ListCompositions", connect_go.NewUnaryHandler(
		"/pb.ArtGeneratorService/ListCompositions",
		svc.ListCompositions,
		opts...,
	))
	mux.Handle("/pb.ArtGeneratorService/DeleteComposition", connect_go.NewUnaryHandler(
		"/pb.ArtGeneratorService/DeleteComposition",
		svc.DeleteComposition,
		opts...,
	))
	return "/pb.ArtGeneratorService/", mux
}

// UnimplementedArtGeneratorServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedArtGeneratorServiceHandler struct{}

func (UnimplementedArtGeneratorServiceHandler) UpdateUser(context.Context, *connect_go.Request[pb.UpdateUserRequest]) (*connect_go.Response[pb.User], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("pb.ArtGeneratorService.UpdateUser is not implemented"))
}

func (UnimplementedArtGeneratorServiceHandler) GetUser(context.Context, *connect_go.Request[pb.GetUserRequest]) (*connect_go.Response[pb.User], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("pb.ArtGeneratorService.GetUser is not implemented"))
}

func (UnimplementedArtGeneratorServiceHandler) ListUsers(context.Context, *connect_go.Request[pb.ListUsersRequest]) (*connect_go.Response[pb.ListUsersResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("pb.ArtGeneratorService.ListUsers is not implemented"))
}

func (UnimplementedArtGeneratorServiceHandler) DeleteUser(context.Context, *connect_go.Request[pb.DeleteUserRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("pb.ArtGeneratorService.DeleteUser is not implemented"))
}

func (UnimplementedArtGeneratorServiceHandler) GetCurrentUser(context.Context, *connect_go.Request[pb.GetCurrentUserRequest]) (*connect_go.Response[pb.User], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("pb.ArtGeneratorService.GetCurrentUser is not implemented"))
}

func (UnimplementedArtGeneratorServiceHandler) CreateArt(context.Context, *connect_go.Request[pb.CreateArtRequest]) (*connect_go.Response[pb.Art], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("pb.ArtGeneratorService.CreateArt is not implemented"))
}

func (UnimplementedArtGeneratorServiceHandler) GetArt(context.Context, *connect_go.Request[pb.GetArtRequest]) (*connect_go.Response[pb.Art], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("pb.ArtGeneratorService.GetArt is not implemented"))
}

func (UnimplementedArtGeneratorServiceHandler) UpdateArt(context.Context, *connect_go.Request[pb.UpdateArtRequest]) (*connect_go.Response[pb.Art], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("pb.ArtGeneratorService.UpdateArt is not implemented"))
}

func (UnimplementedArtGeneratorServiceHandler) ListArts(context.Context, *connect_go.Request[pb.ListArtsRequest]) (*connect_go.Response[pb.ListArtsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("pb.ArtGeneratorService.ListArts is not implemented"))
}

func (UnimplementedArtGeneratorServiceHandler) DeleteArt(context.Context, *connect_go.Request[pb.DeleteArtRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("pb.ArtGeneratorService.DeleteArt is not implemented"))
}

func (UnimplementedArtGeneratorServiceHandler) GetArtUploadUrl(context.Context, *connect_go.Request[pb.GetArtUploadUrlRequest]) (*connect_go.Response[pb.GetArtUploadUrlResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("pb.ArtGeneratorService.GetArtUploadUrl is not implemented"))
}

func (UnimplementedArtGeneratorServiceHandler) ConfirmArtImageUpload(context.Context, *connect_go.Request[pb.ConfirmArtImageUploadRequest]) (*connect_go.Response[pb.Art], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("pb.ArtGeneratorService.ConfirmArtImageUpload is not implemented"))
}

func (UnimplementedArtGeneratorServiceHandler) CreateComposition(context.Context, *connect_go.Request[pb.CreateCompositionRequest]) (*connect_go.Response[pb.Composition], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("pb.ArtGeneratorService.CreateComposition is not implemented"))
}

func (UnimplementedArtGeneratorServiceHandler) GetComposition(context.Context, *connect_go.Request[pb.GetCompositionRequest]) (*connect_go.Response[pb.Composition], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("pb.ArtGeneratorService.GetComposition is not implemented"))
}

func (UnimplementedArtGeneratorServiceHandler) UpdateComposition(context.Context, *connect_go.Request[pb.UpdateCompositionRequest]) (*connect_go.Response[pb.Composition], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("pb.ArtGeneratorService.UpdateComposition is not implemented"))
}

func (UnimplementedArtGeneratorServiceHandler) ListCompositions(context.Context, *connect_go.Request[pb.ListCompositionsRequest]) (*connect_go.Response[pb.ListCompositionsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("pb.ArtGeneratorService.ListCompositions is not implemented"))
}

func (UnimplementedArtGeneratorServiceHandler) DeleteComposition(context.Context, *connect_go.Request[pb.DeleteCompositionRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("pb.ArtGeneratorService.DeleteComposition is not implemented"))
}
