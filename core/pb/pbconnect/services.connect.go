// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: services.proto

package pbconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	pb "github.com/Damione1/thread-art-generator/core/pb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ArtGeneratorServiceName is the fully-qualified name of the ArtGeneratorService service.
	ArtGeneratorServiceName = "pb.ArtGeneratorService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ArtGeneratorServiceUpdateUserProcedure is the fully-qualified name of the ArtGeneratorService's
	// UpdateUser RPC.
	ArtGeneratorServiceUpdateUserProcedure = "/pb.ArtGeneratorService/UpdateUser"
	// ArtGeneratorServiceGetUserProcedure is the fully-qualified name of the ArtGeneratorService's
	// GetUser RPC.
	ArtGeneratorServiceGetUserProcedure = "/pb.ArtGeneratorService/GetUser"
	// ArtGeneratorServiceListUsersProcedure is the fully-qualified name of the ArtGeneratorService's
	// ListUsers RPC.
	ArtGeneratorServiceListUsersProcedure = "/pb.ArtGeneratorService/ListUsers"
	// ArtGeneratorServiceDeleteUserProcedure is the fully-qualified name of the ArtGeneratorService's
	// DeleteUser RPC.
	ArtGeneratorServiceDeleteUserProcedure = "/pb.ArtGeneratorService/DeleteUser"
	// ArtGeneratorServiceGetCurrentUserProcedure is the fully-qualified name of the
	// ArtGeneratorService's GetCurrentUser RPC.
	ArtGeneratorServiceGetCurrentUserProcedure = "/pb.ArtGeneratorService/GetCurrentUser"
	// ArtGeneratorServiceSyncUserFromFirebaseProcedure is the fully-qualified name of the
	// ArtGeneratorService's SyncUserFromFirebase RPC.
	ArtGeneratorServiceSyncUserFromFirebaseProcedure = "/pb.ArtGeneratorService/SyncUserFromFirebase"
	// ArtGeneratorServiceCreateArtProcedure is the fully-qualified name of the ArtGeneratorService's
	// CreateArt RPC.
	ArtGeneratorServiceCreateArtProcedure = "/pb.ArtGeneratorService/CreateArt"
	// ArtGeneratorServiceGetArtProcedure is the fully-qualified name of the ArtGeneratorService's
	// GetArt RPC.
	ArtGeneratorServiceGetArtProcedure = "/pb.ArtGeneratorService/GetArt"
	// ArtGeneratorServiceUpdateArtProcedure is the fully-qualified name of the ArtGeneratorService's
	// UpdateArt RPC.
	ArtGeneratorServiceUpdateArtProcedure = "/pb.ArtGeneratorService/UpdateArt"
	// ArtGeneratorServiceListArtsProcedure is the fully-qualified name of the ArtGeneratorService's
	// ListArts RPC.
	ArtGeneratorServiceListArtsProcedure = "/pb.ArtGeneratorService/ListArts"
	// ArtGeneratorServiceDeleteArtProcedure is the fully-qualified name of the ArtGeneratorService's
	// DeleteArt RPC.
	ArtGeneratorServiceDeleteArtProcedure = "/pb.ArtGeneratorService/DeleteArt"
	// ArtGeneratorServiceGetArtUploadUrlProcedure is the fully-qualified name of the
	// ArtGeneratorService's GetArtUploadUrl RPC.
	ArtGeneratorServiceGetArtUploadUrlProcedure = "/pb.ArtGeneratorService/GetArtUploadUrl"
	// ArtGeneratorServiceConfirmArtImageUploadProcedure is the fully-qualified name of the
	// ArtGeneratorService's ConfirmArtImageUpload RPC.
	ArtGeneratorServiceConfirmArtImageUploadProcedure = "/pb.ArtGeneratorService/ConfirmArtImageUpload"
	// ArtGeneratorServiceCreateCompositionProcedure is the fully-qualified name of the
	// ArtGeneratorService's CreateComposition RPC.
	ArtGeneratorServiceCreateCompositionProcedure = "/pb.ArtGeneratorService/CreateComposition"
	// ArtGeneratorServiceGetCompositionProcedure is the fully-qualified name of the
	// ArtGeneratorService's GetComposition RPC.
	ArtGeneratorServiceGetCompositionProcedure = "/pb.ArtGeneratorService/GetComposition"
	// ArtGeneratorServiceUpdateCompositionProcedure is the fully-qualified name of the
	// ArtGeneratorService's UpdateComposition RPC.
	ArtGeneratorServiceUpdateCompositionProcedure = "/pb.ArtGeneratorService/UpdateComposition"
	// ArtGeneratorServiceListCompositionsProcedure is the fully-qualified name of the
	// ArtGeneratorService's ListCompositions RPC.
	ArtGeneratorServiceListCompositionsProcedure = "/pb.ArtGeneratorService/ListCompositions"
	// ArtGeneratorServiceDeleteCompositionProcedure is the fully-qualified name of the
	// ArtGeneratorService's DeleteComposition RPC.
	ArtGeneratorServiceDeleteCompositionProcedure = "/pb.ArtGeneratorService/DeleteComposition"
)

// ArtGeneratorServiceClient is a client for the pb.ArtGeneratorService service.
type ArtGeneratorServiceClient interface {
	UpdateUser(context.Context, *connect.Request[pb.UpdateUserRequest]) (*connect.Response[pb.User], error)
	GetUser(context.Context, *connect.Request[pb.GetUserRequest]) (*connect.Response[pb.User], error)
	ListUsers(context.Context, *connect.Request[pb.ListUsersRequest]) (*connect.Response[pb.ListUsersResponse], error)
	DeleteUser(context.Context, *connect.Request[pb.DeleteUserRequest]) (*connect.Response[emptypb.Empty], error)
	GetCurrentUser(context.Context, *connect.Request[pb.GetCurrentUserRequest]) (*connect.Response[pb.User], error)
	SyncUserFromFirebase(context.Context, *connect.Request[pb.SyncUserFromFirebaseRequest]) (*connect.Response[pb.User], error)
	CreateArt(context.Context, *connect.Request[pb.CreateArtRequest]) (*connect.Response[pb.Art], error)
	GetArt(context.Context, *connect.Request[pb.GetArtRequest]) (*connect.Response[pb.Art], error)
	UpdateArt(context.Context, *connect.Request[pb.UpdateArtRequest]) (*connect.Response[pb.Art], error)
	ListArts(context.Context, *connect.Request[pb.ListArtsRequest]) (*connect.Response[pb.ListArtsResponse], error)
	DeleteArt(context.Context, *connect.Request[pb.DeleteArtRequest]) (*connect.Response[emptypb.Empty], error)
	GetArtUploadUrl(context.Context, *connect.Request[pb.GetArtUploadUrlRequest]) (*connect.Response[pb.GetArtUploadUrlResponse], error)
	ConfirmArtImageUpload(context.Context, *connect.Request[pb.ConfirmArtImageUploadRequest]) (*connect.Response[pb.Art], error)
	// Composition RPCs
	CreateComposition(context.Context, *connect.Request[pb.CreateCompositionRequest]) (*connect.Response[pb.Composition], error)
	GetComposition(context.Context, *connect.Request[pb.GetCompositionRequest]) (*connect.Response[pb.Composition], error)
	UpdateComposition(context.Context, *connect.Request[pb.UpdateCompositionRequest]) (*connect.Response[pb.Composition], error)
	ListCompositions(context.Context, *connect.Request[pb.ListCompositionsRequest]) (*connect.Response[pb.ListCompositionsResponse], error)
	DeleteComposition(context.Context, *connect.Request[pb.DeleteCompositionRequest]) (*connect.Response[emptypb.Empty], error)
}

// NewArtGeneratorServiceClient constructs a client for the pb.ArtGeneratorService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewArtGeneratorServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ArtGeneratorServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	artGeneratorServiceMethods := pb.File_services_proto.Services().ByName("ArtGeneratorService").Methods()
	return &artGeneratorServiceClient{
		updateUser: connect.NewClient[pb.UpdateUserRequest, pb.User](
			httpClient,
			baseURL+ArtGeneratorServiceUpdateUserProcedure,
			connect.WithSchema(artGeneratorServiceMethods.ByName("UpdateUser")),
			connect.WithClientOptions(opts...),
		),
		getUser: connect.NewClient[pb.GetUserRequest, pb.User](
			httpClient,
			baseURL+ArtGeneratorServiceGetUserProcedure,
			connect.WithSchema(artGeneratorServiceMethods.ByName("GetUser")),
			connect.WithClientOptions(opts...),
		),
		listUsers: connect.NewClient[pb.ListUsersRequest, pb.ListUsersResponse](
			httpClient,
			baseURL+ArtGeneratorServiceListUsersProcedure,
			connect.WithSchema(artGeneratorServiceMethods.ByName("ListUsers")),
			connect.WithClientOptions(opts...),
		),
		deleteUser: connect.NewClient[pb.DeleteUserRequest, emptypb.Empty](
			httpClient,
			baseURL+ArtGeneratorServiceDeleteUserProcedure,
			connect.WithSchema(artGeneratorServiceMethods.ByName("DeleteUser")),
			connect.WithClientOptions(opts...),
		),
		getCurrentUser: connect.NewClient[pb.GetCurrentUserRequest, pb.User](
			httpClient,
			baseURL+ArtGeneratorServiceGetCurrentUserProcedure,
			connect.WithSchema(artGeneratorServiceMethods.ByName("GetCurrentUser")),
			connect.WithClientOptions(opts...),
		),
		syncUserFromFirebase: connect.NewClient[pb.SyncUserFromFirebaseRequest, pb.User](
			httpClient,
			baseURL+ArtGeneratorServiceSyncUserFromFirebaseProcedure,
			connect.WithSchema(artGeneratorServiceMethods.ByName("SyncUserFromFirebase")),
			connect.WithClientOptions(opts...),
		),
		createArt: connect.NewClient[pb.CreateArtRequest, pb.Art](
			httpClient,
			baseURL+ArtGeneratorServiceCreateArtProcedure,
			connect.WithSchema(artGeneratorServiceMethods.ByName("CreateArt")),
			connect.WithClientOptions(opts...),
		),
		getArt: connect.NewClient[pb.GetArtRequest, pb.Art](
			httpClient,
			baseURL+ArtGeneratorServiceGetArtProcedure,
			connect.WithSchema(artGeneratorServiceMethods.ByName("GetArt")),
			connect.WithClientOptions(opts...),
		),
		updateArt: connect.NewClient[pb.UpdateArtRequest, pb.Art](
			httpClient,
			baseURL+ArtGeneratorServiceUpdateArtProcedure,
			connect.WithSchema(artGeneratorServiceMethods.ByName("UpdateArt")),
			connect.WithClientOptions(opts...),
		),
		listArts: connect.NewClient[pb.ListArtsRequest, pb.ListArtsResponse](
			httpClient,
			baseURL+ArtGeneratorServiceListArtsProcedure,
			connect.WithSchema(artGeneratorServiceMethods.ByName("ListArts")),
			connect.WithClientOptions(opts...),
		),
		deleteArt: connect.NewClient[pb.DeleteArtRequest, emptypb.Empty](
			httpClient,
			baseURL+ArtGeneratorServiceDeleteArtProcedure,
			connect.WithSchema(artGeneratorServiceMethods.ByName("DeleteArt")),
			connect.WithClientOptions(opts...),
		),
		getArtUploadUrl: connect.NewClient[pb.GetArtUploadUrlRequest, pb.GetArtUploadUrlResponse](
			httpClient,
			baseURL+ArtGeneratorServiceGetArtUploadUrlProcedure,
			connect.WithSchema(artGeneratorServiceMethods.ByName("GetArtUploadUrl")),
			connect.WithClientOptions(opts...),
		),
		confirmArtImageUpload: connect.NewClient[pb.ConfirmArtImageUploadRequest, pb.Art](
			httpClient,
			baseURL+ArtGeneratorServiceConfirmArtImageUploadProcedure,
			connect.WithSchema(artGeneratorServiceMethods.ByName("ConfirmArtImageUpload")),
			connect.WithClientOptions(opts...),
		),
		createComposition: connect.NewClient[pb.CreateCompositionRequest, pb.Composition](
			httpClient,
			baseURL+ArtGeneratorServiceCreateCompositionProcedure,
			connect.WithSchema(artGeneratorServiceMethods.ByName("CreateComposition")),
			connect.WithClientOptions(opts...),
		),
		getComposition: connect.NewClient[pb.GetCompositionRequest, pb.Composition](
			httpClient,
			baseURL+ArtGeneratorServiceGetCompositionProcedure,
			connect.WithSchema(artGeneratorServiceMethods.ByName("GetComposition")),
			connect.WithClientOptions(opts...),
		),
		updateComposition: connect.NewClient[pb.UpdateCompositionRequest, pb.Composition](
			httpClient,
			baseURL+ArtGeneratorServiceUpdateCompositionProcedure,
			connect.WithSchema(artGeneratorServiceMethods.ByName("UpdateComposition")),
			connect.WithClientOptions(opts...),
		),
		listCompositions: connect.NewClient[pb.ListCompositionsRequest, pb.ListCompositionsResponse](
			httpClient,
			baseURL+ArtGeneratorServiceListCompositionsProcedure,
			connect.WithSchema(artGeneratorServiceMethods.ByName("ListCompositions")),
			connect.WithClientOptions(opts...),
		),
		deleteComposition: connect.NewClient[pb.DeleteCompositionRequest, emptypb.Empty](
			httpClient,
			baseURL+ArtGeneratorServiceDeleteCompositionProcedure,
			connect.WithSchema(artGeneratorServiceMethods.ByName("DeleteComposition")),
			connect.WithClientOptions(opts...),
		),
	}
}

// artGeneratorServiceClient implements ArtGeneratorServiceClient.
type artGeneratorServiceClient struct {
	updateUser            *connect.Client[pb.UpdateUserRequest, pb.User]
	getUser               *connect.Client[pb.GetUserRequest, pb.User]
	listUsers             *connect.Client[pb.ListUsersRequest, pb.ListUsersResponse]
	deleteUser            *connect.Client[pb.DeleteUserRequest, emptypb.Empty]
	getCurrentUser        *connect.Client[pb.GetCurrentUserRequest, pb.User]
	syncUserFromFirebase  *connect.Client[pb.SyncUserFromFirebaseRequest, pb.User]
	createArt             *connect.Client[pb.CreateArtRequest, pb.Art]
	getArt                *connect.Client[pb.GetArtRequest, pb.Art]
	updateArt             *connect.Client[pb.UpdateArtRequest, pb.Art]
	listArts              *connect.Client[pb.ListArtsRequest, pb.ListArtsResponse]
	deleteArt             *connect.Client[pb.DeleteArtRequest, emptypb.Empty]
	getArtUploadUrl       *connect.Client[pb.GetArtUploadUrlRequest, pb.GetArtUploadUrlResponse]
	confirmArtImageUpload *connect.Client[pb.ConfirmArtImageUploadRequest, pb.Art]
	createComposition     *connect.Client[pb.CreateCompositionRequest, pb.Composition]
	getComposition        *connect.Client[pb.GetCompositionRequest, pb.Composition]
	updateComposition     *connect.Client[pb.UpdateCompositionRequest, pb.Composition]
	listCompositions      *connect.Client[pb.ListCompositionsRequest, pb.ListCompositionsResponse]
	deleteComposition     *connect.Client[pb.DeleteCompositionRequest, emptypb.Empty]
}

// UpdateUser calls pb.ArtGeneratorService.UpdateUser.
func (c *artGeneratorServiceClient) UpdateUser(ctx context.Context, req *connect.Request[pb.UpdateUserRequest]) (*connect.Response[pb.User], error) {
	return c.updateUser.CallUnary(ctx, req)
}

// GetUser calls pb.ArtGeneratorService.GetUser.
func (c *artGeneratorServiceClient) GetUser(ctx context.Context, req *connect.Request[pb.GetUserRequest]) (*connect.Response[pb.User], error) {
	return c.getUser.CallUnary(ctx, req)
}

// ListUsers calls pb.ArtGeneratorService.ListUsers.
func (c *artGeneratorServiceClient) ListUsers(ctx context.Context, req *connect.Request[pb.ListUsersRequest]) (*connect.Response[pb.ListUsersResponse], error) {
	return c.listUsers.CallUnary(ctx, req)
}

// DeleteUser calls pb.ArtGeneratorService.DeleteUser.
func (c *artGeneratorServiceClient) DeleteUser(ctx context.Context, req *connect.Request[pb.DeleteUserRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteUser.CallUnary(ctx, req)
}

// GetCurrentUser calls pb.ArtGeneratorService.GetCurrentUser.
func (c *artGeneratorServiceClient) GetCurrentUser(ctx context.Context, req *connect.Request[pb.GetCurrentUserRequest]) (*connect.Response[pb.User], error) {
	return c.getCurrentUser.CallUnary(ctx, req)
}

// SyncUserFromFirebase calls pb.ArtGeneratorService.SyncUserFromFirebase.
func (c *artGeneratorServiceClient) SyncUserFromFirebase(ctx context.Context, req *connect.Request[pb.SyncUserFromFirebaseRequest]) (*connect.Response[pb.User], error) {
	return c.syncUserFromFirebase.CallUnary(ctx, req)
}

// CreateArt calls pb.ArtGeneratorService.CreateArt.
func (c *artGeneratorServiceClient) CreateArt(ctx context.Context, req *connect.Request[pb.CreateArtRequest]) (*connect.Response[pb.Art], error) {
	return c.createArt.CallUnary(ctx, req)
}

// GetArt calls pb.ArtGeneratorService.GetArt.
func (c *artGeneratorServiceClient) GetArt(ctx context.Context, req *connect.Request[pb.GetArtRequest]) (*connect.Response[pb.Art], error) {
	return c.getArt.CallUnary(ctx, req)
}

// UpdateArt calls pb.ArtGeneratorService.UpdateArt.
func (c *artGeneratorServiceClient) UpdateArt(ctx context.Context, req *connect.Request[pb.UpdateArtRequest]) (*connect.Response[pb.Art], error) {
	return c.updateArt.CallUnary(ctx, req)
}

// ListArts calls pb.ArtGeneratorService.ListArts.
func (c *artGeneratorServiceClient) ListArts(ctx context.Context, req *connect.Request[pb.ListArtsRequest]) (*connect.Response[pb.ListArtsResponse], error) {
	return c.listArts.CallUnary(ctx, req)
}

// DeleteArt calls pb.ArtGeneratorService.DeleteArt.
func (c *artGeneratorServiceClient) DeleteArt(ctx context.Context, req *connect.Request[pb.DeleteArtRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteArt.CallUnary(ctx, req)
}

// GetArtUploadUrl calls pb.ArtGeneratorService.GetArtUploadUrl.
func (c *artGeneratorServiceClient) GetArtUploadUrl(ctx context.Context, req *connect.Request[pb.GetArtUploadUrlRequest]) (*connect.Response[pb.GetArtUploadUrlResponse], error) {
	return c.getArtUploadUrl.CallUnary(ctx, req)
}

// ConfirmArtImageUpload calls pb.ArtGeneratorService.ConfirmArtImageUpload.
func (c *artGeneratorServiceClient) ConfirmArtImageUpload(ctx context.Context, req *connect.Request[pb.ConfirmArtImageUploadRequest]) (*connect.Response[pb.Art], error) {
	return c.confirmArtImageUpload.CallUnary(ctx, req)
}

// CreateComposition calls pb.ArtGeneratorService.CreateComposition.
func (c *artGeneratorServiceClient) CreateComposition(ctx context.Context, req *connect.Request[pb.CreateCompositionRequest]) (*connect.Response[pb.Composition], error) {
	return c.createComposition.CallUnary(ctx, req)
}

// GetComposition calls pb.ArtGeneratorService.GetComposition.
func (c *artGeneratorServiceClient) GetComposition(ctx context.Context, req *connect.Request[pb.GetCompositionRequest]) (*connect.Response[pb.Composition], error) {
	return c.getComposition.CallUnary(ctx, req)
}

// UpdateComposition calls pb.ArtGeneratorService.UpdateComposition.
func (c *artGeneratorServiceClient) UpdateComposition(ctx context.Context, req *connect.Request[pb.UpdateCompositionRequest]) (*connect.Response[pb.Composition], error) {
	return c.updateComposition.CallUnary(ctx, req)
}

// ListCompositions calls pb.ArtGeneratorService.ListCompositions.
func (c *artGeneratorServiceClient) ListCompositions(ctx context.Context, req *connect.Request[pb.ListCompositionsRequest]) (*connect.Response[pb.ListCompositionsResponse], error) {
	return c.listCompositions.CallUnary(ctx, req)
}

// DeleteComposition calls pb.ArtGeneratorService.DeleteComposition.
func (c *artGeneratorServiceClient) DeleteComposition(ctx context.Context, req *connect.Request[pb.DeleteCompositionRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteComposition.CallUnary(ctx, req)
}

// ArtGeneratorServiceHandler is an implementation of the pb.ArtGeneratorService service.
type ArtGeneratorServiceHandler interface {
	UpdateUser(context.Context, *connect.Request[pb.UpdateUserRequest]) (*connect.Response[pb.User], error)
	GetUser(context.Context, *connect.Request[pb.GetUserRequest]) (*connect.Response[pb.User], error)
	ListUsers(context.Context, *connect.Request[pb.ListUsersRequest]) (*connect.Response[pb.ListUsersResponse], error)
	DeleteUser(context.Context, *connect.Request[pb.DeleteUserRequest]) (*connect.Response[emptypb.Empty], error)
	GetCurrentUser(context.Context, *connect.Request[pb.GetCurrentUserRequest]) (*connect.Response[pb.User], error)
	SyncUserFromFirebase(context.Context, *connect.Request[pb.SyncUserFromFirebaseRequest]) (*connect.Response[pb.User], error)
	CreateArt(context.Context, *connect.Request[pb.CreateArtRequest]) (*connect.Response[pb.Art], error)
	GetArt(context.Context, *connect.Request[pb.GetArtRequest]) (*connect.Response[pb.Art], error)
	UpdateArt(context.Context, *connect.Request[pb.UpdateArtRequest]) (*connect.Response[pb.Art], error)
	ListArts(context.Context, *connect.Request[pb.ListArtsRequest]) (*connect.Response[pb.ListArtsResponse], error)
	DeleteArt(context.Context, *connect.Request[pb.DeleteArtRequest]) (*connect.Response[emptypb.Empty], error)
	GetArtUploadUrl(context.Context, *connect.Request[pb.GetArtUploadUrlRequest]) (*connect.Response[pb.GetArtUploadUrlResponse], error)
	ConfirmArtImageUpload(context.Context, *connect.Request[pb.ConfirmArtImageUploadRequest]) (*connect.Response[pb.Art], error)
	// Composition RPCs
	CreateComposition(context.Context, *connect.Request[pb.CreateCompositionRequest]) (*connect.Response[pb.Composition], error)
	GetComposition(context.Context, *connect.Request[pb.GetCompositionRequest]) (*connect.Response[pb.Composition], error)
	UpdateComposition(context.Context, *connect.Request[pb.UpdateCompositionRequest]) (*connect.Response[pb.Composition], error)
	ListCompositions(context.Context, *connect.Request[pb.ListCompositionsRequest]) (*connect.Response[pb.ListCompositionsResponse], error)
	DeleteComposition(context.Context, *connect.Request[pb.DeleteCompositionRequest]) (*connect.Response[emptypb.Empty], error)
}

// NewArtGeneratorServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewArtGeneratorServiceHandler(svc ArtGeneratorServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	artGeneratorServiceMethods := pb.File_services_proto.Services().ByName("ArtGeneratorService").Methods()
	artGeneratorServiceUpdateUserHandler := connect.NewUnaryHandler(
		ArtGeneratorServiceUpdateUserProcedure,
		svc.UpdateUser,
		connect.WithSchema(artGeneratorServiceMethods.ByName("UpdateUser")),
		connect.WithHandlerOptions(opts...),
	)
	artGeneratorServiceGetUserHandler := connect.NewUnaryHandler(
		ArtGeneratorServiceGetUserProcedure,
		svc.GetUser,
		connect.WithSchema(artGeneratorServiceMethods.ByName("GetUser")),
		connect.WithHandlerOptions(opts...),
	)
	artGeneratorServiceListUsersHandler := connect.NewUnaryHandler(
		ArtGeneratorServiceListUsersProcedure,
		svc.ListUsers,
		connect.WithSchema(artGeneratorServiceMethods.ByName("ListUsers")),
		connect.WithHandlerOptions(opts...),
	)
	artGeneratorServiceDeleteUserHandler := connect.NewUnaryHandler(
		ArtGeneratorServiceDeleteUserProcedure,
		svc.DeleteUser,
		connect.WithSchema(artGeneratorServiceMethods.ByName("DeleteUser")),
		connect.WithHandlerOptions(opts...),
	)
	artGeneratorServiceGetCurrentUserHandler := connect.NewUnaryHandler(
		ArtGeneratorServiceGetCurrentUserProcedure,
		svc.GetCurrentUser,
		connect.WithSchema(artGeneratorServiceMethods.ByName("GetCurrentUser")),
		connect.WithHandlerOptions(opts...),
	)
	artGeneratorServiceSyncUserFromFirebaseHandler := connect.NewUnaryHandler(
		ArtGeneratorServiceSyncUserFromFirebaseProcedure,
		svc.SyncUserFromFirebase,
		connect.WithSchema(artGeneratorServiceMethods.ByName("SyncUserFromFirebase")),
		connect.WithHandlerOptions(opts...),
	)
	artGeneratorServiceCreateArtHandler := connect.NewUnaryHandler(
		ArtGeneratorServiceCreateArtProcedure,
		svc.CreateArt,
		connect.WithSchema(artGeneratorServiceMethods.ByName("CreateArt")),
		connect.WithHandlerOptions(opts...),
	)
	artGeneratorServiceGetArtHandler := connect.NewUnaryHandler(
		ArtGeneratorServiceGetArtProcedure,
		svc.GetArt,
		connect.WithSchema(artGeneratorServiceMethods.ByName("GetArt")),
		connect.WithHandlerOptions(opts...),
	)
	artGeneratorServiceUpdateArtHandler := connect.NewUnaryHandler(
		ArtGeneratorServiceUpdateArtProcedure,
		svc.UpdateArt,
		connect.WithSchema(artGeneratorServiceMethods.ByName("UpdateArt")),
		connect.WithHandlerOptions(opts...),
	)
	artGeneratorServiceListArtsHandler := connect.NewUnaryHandler(
		ArtGeneratorServiceListArtsProcedure,
		svc.ListArts,
		connect.WithSchema(artGeneratorServiceMethods.ByName("ListArts")),
		connect.WithHandlerOptions(opts...),
	)
	artGeneratorServiceDeleteArtHandler := connect.NewUnaryHandler(
		ArtGeneratorServiceDeleteArtProcedure,
		svc.DeleteArt,
		connect.WithSchema(artGeneratorServiceMethods.ByName("DeleteArt")),
		connect.WithHandlerOptions(opts...),
	)
	artGeneratorServiceGetArtUploadUrlHandler := connect.NewUnaryHandler(
		ArtGeneratorServiceGetArtUploadUrlProcedure,
		svc.GetArtUploadUrl,
		connect.WithSchema(artGeneratorServiceMethods.ByName("GetArtUploadUrl")),
		connect.WithHandlerOptions(opts...),
	)
	artGeneratorServiceConfirmArtImageUploadHandler := connect.NewUnaryHandler(
		ArtGeneratorServiceConfirmArtImageUploadProcedure,
		svc.ConfirmArtImageUpload,
		connect.WithSchema(artGeneratorServiceMethods.ByName("ConfirmArtImageUpload")),
		connect.WithHandlerOptions(opts...),
	)
	artGeneratorServiceCreateCompositionHandler := connect.NewUnaryHandler(
		ArtGeneratorServiceCreateCompositionProcedure,
		svc.CreateComposition,
		connect.WithSchema(artGeneratorServiceMethods.ByName("CreateComposition")),
		connect.WithHandlerOptions(opts...),
	)
	artGeneratorServiceGetCompositionHandler := connect.NewUnaryHandler(
		ArtGeneratorServiceGetCompositionProcedure,
		svc.GetComposition,
		connect.WithSchema(artGeneratorServiceMethods.ByName("GetComposition")),
		connect.WithHandlerOptions(opts...),
	)
	artGeneratorServiceUpdateCompositionHandler := connect.NewUnaryHandler(
		ArtGeneratorServiceUpdateCompositionProcedure,
		svc.UpdateComposition,
		connect.WithSchema(artGeneratorServiceMethods.ByName("UpdateComposition")),
		connect.WithHandlerOptions(opts...),
	)
	artGeneratorServiceListCompositionsHandler := connect.NewUnaryHandler(
		ArtGeneratorServiceListCompositionsProcedure,
		svc.ListCompositions,
		connect.WithSchema(artGeneratorServiceMethods.ByName("ListCompositions")),
		connect.WithHandlerOptions(opts...),
	)
	artGeneratorServiceDeleteCompositionHandler := connect.NewUnaryHandler(
		ArtGeneratorServiceDeleteCompositionProcedure,
		svc.DeleteComposition,
		connect.WithSchema(artGeneratorServiceMethods.ByName("DeleteComposition")),
		connect.WithHandlerOptions(opts...),
	)
	return "/pb.ArtGeneratorService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ArtGeneratorServiceUpdateUserProcedure:
			artGeneratorServiceUpdateUserHandler.ServeHTTP(w, r)
		case ArtGeneratorServiceGetUserProcedure:
			artGeneratorServiceGetUserHandler.ServeHTTP(w, r)
		case ArtGeneratorServiceListUsersProcedure:
			artGeneratorServiceListUsersHandler.ServeHTTP(w, r)
		case ArtGeneratorServiceDeleteUserProcedure:
			artGeneratorServiceDeleteUserHandler.ServeHTTP(w, r)
		case ArtGeneratorServiceGetCurrentUserProcedure:
			artGeneratorServiceGetCurrentUserHandler.ServeHTTP(w, r)
		case ArtGeneratorServiceSyncUserFromFirebaseProcedure:
			artGeneratorServiceSyncUserFromFirebaseHandler.ServeHTTP(w, r)
		case ArtGeneratorServiceCreateArtProcedure:
			artGeneratorServiceCreateArtHandler.ServeHTTP(w, r)
		case ArtGeneratorServiceGetArtProcedure:
			artGeneratorServiceGetArtHandler.ServeHTTP(w, r)
		case ArtGeneratorServiceUpdateArtProcedure:
			artGeneratorServiceUpdateArtHandler.ServeHTTP(w, r)
		case ArtGeneratorServiceListArtsProcedure:
			artGeneratorServiceListArtsHandler.ServeHTTP(w, r)
		case ArtGeneratorServiceDeleteArtProcedure:
			artGeneratorServiceDeleteArtHandler.ServeHTTP(w, r)
		case ArtGeneratorServiceGetArtUploadUrlProcedure:
			artGeneratorServiceGetArtUploadUrlHandler.ServeHTTP(w, r)
		case ArtGeneratorServiceConfirmArtImageUploadProcedure:
			artGeneratorServiceConfirmArtImageUploadHandler.ServeHTTP(w, r)
		case ArtGeneratorServiceCreateCompositionProcedure:
			artGeneratorServiceCreateCompositionHandler.ServeHTTP(w, r)
		case ArtGeneratorServiceGetCompositionProcedure:
			artGeneratorServiceGetCompositionHandler.ServeHTTP(w, r)
		case ArtGeneratorServiceUpdateCompositionProcedure:
			artGeneratorServiceUpdateCompositionHandler.ServeHTTP(w, r)
		case ArtGeneratorServiceListCompositionsProcedure:
			artGeneratorServiceListCompositionsHandler.ServeHTTP(w, r)
		case ArtGeneratorServiceDeleteCompositionProcedure:
			artGeneratorServiceDeleteCompositionHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedArtGeneratorServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedArtGeneratorServiceHandler struct{}

func (UnimplementedArtGeneratorServiceHandler) UpdateUser(context.Context, *connect.Request[pb.UpdateUserRequest]) (*connect.Response[pb.User], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pb.ArtGeneratorService.UpdateUser is not implemented"))
}

func (UnimplementedArtGeneratorServiceHandler) GetUser(context.Context, *connect.Request[pb.GetUserRequest]) (*connect.Response[pb.User], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pb.ArtGeneratorService.GetUser is not implemented"))
}

func (UnimplementedArtGeneratorServiceHandler) ListUsers(context.Context, *connect.Request[pb.ListUsersRequest]) (*connect.Response[pb.ListUsersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pb.ArtGeneratorService.ListUsers is not implemented"))
}

func (UnimplementedArtGeneratorServiceHandler) DeleteUser(context.Context, *connect.Request[pb.DeleteUserRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pb.ArtGeneratorService.DeleteUser is not implemented"))
}

func (UnimplementedArtGeneratorServiceHandler) GetCurrentUser(context.Context, *connect.Request[pb.GetCurrentUserRequest]) (*connect.Response[pb.User], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pb.ArtGeneratorService.GetCurrentUser is not implemented"))
}

func (UnimplementedArtGeneratorServiceHandler) SyncUserFromFirebase(context.Context, *connect.Request[pb.SyncUserFromFirebaseRequest]) (*connect.Response[pb.User], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pb.ArtGeneratorService.SyncUserFromFirebase is not implemented"))
}

func (UnimplementedArtGeneratorServiceHandler) CreateArt(context.Context, *connect.Request[pb.CreateArtRequest]) (*connect.Response[pb.Art], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pb.ArtGeneratorService.CreateArt is not implemented"))
}

func (UnimplementedArtGeneratorServiceHandler) GetArt(context.Context, *connect.Request[pb.GetArtRequest]) (*connect.Response[pb.Art], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pb.ArtGeneratorService.GetArt is not implemented"))
}

func (UnimplementedArtGeneratorServiceHandler) UpdateArt(context.Context, *connect.Request[pb.UpdateArtRequest]) (*connect.Response[pb.Art], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pb.ArtGeneratorService.UpdateArt is not implemented"))
}

func (UnimplementedArtGeneratorServiceHandler) ListArts(context.Context, *connect.Request[pb.ListArtsRequest]) (*connect.Response[pb.ListArtsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pb.ArtGeneratorService.ListArts is not implemented"))
}

func (UnimplementedArtGeneratorServiceHandler) DeleteArt(context.Context, *connect.Request[pb.DeleteArtRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pb.ArtGeneratorService.DeleteArt is not implemented"))
}

func (UnimplementedArtGeneratorServiceHandler) GetArtUploadUrl(context.Context, *connect.Request[pb.GetArtUploadUrlRequest]) (*connect.Response[pb.GetArtUploadUrlResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pb.ArtGeneratorService.GetArtUploadUrl is not implemented"))
}

func (UnimplementedArtGeneratorServiceHandler) ConfirmArtImageUpload(context.Context, *connect.Request[pb.ConfirmArtImageUploadRequest]) (*connect.Response[pb.Art], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pb.ArtGeneratorService.ConfirmArtImageUpload is not implemented"))
}

func (UnimplementedArtGeneratorServiceHandler) CreateComposition(context.Context, *connect.Request[pb.CreateCompositionRequest]) (*connect.Response[pb.Composition], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pb.ArtGeneratorService.CreateComposition is not implemented"))
}

func (UnimplementedArtGeneratorServiceHandler) GetComposition(context.Context, *connect.Request[pb.GetCompositionRequest]) (*connect.Response[pb.Composition], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pb.ArtGeneratorService.GetComposition is not implemented"))
}

func (UnimplementedArtGeneratorServiceHandler) UpdateComposition(context.Context, *connect.Request[pb.UpdateCompositionRequest]) (*connect.Response[pb.Composition], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pb.ArtGeneratorService.UpdateComposition is not implemented"))
}

func (UnimplementedArtGeneratorServiceHandler) ListCompositions(context.Context, *connect.Request[pb.ListCompositionsRequest]) (*connect.Response[pb.ListCompositionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pb.ArtGeneratorService.ListCompositions is not implemented"))
}

func (UnimplementedArtGeneratorServiceHandler) DeleteComposition(context.Context, *connect.Request[pb.DeleteCompositionRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pb.ArtGeneratorService.DeleteComposition is not implemented"))
}
