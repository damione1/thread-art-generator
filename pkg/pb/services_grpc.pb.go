// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: services.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ArtGeneratorService_CreateSession_FullMethodName       = "/pb.ArtGeneratorService/CreateSession"
	ArtGeneratorService_DeleteSession_FullMethodName       = "/pb.ArtGeneratorService/DeleteSession"
	ArtGeneratorService_RefreshToken_FullMethodName        = "/pb.ArtGeneratorService/RefreshToken"
	ArtGeneratorService_UpdateUser_FullMethodName          = "/pb.ArtGeneratorService/UpdateUser"
	ArtGeneratorService_GetUser_FullMethodName             = "/pb.ArtGeneratorService/GetUser"
	ArtGeneratorService_ListUsers_FullMethodName           = "/pb.ArtGeneratorService/ListUsers"
	ArtGeneratorService_CreateUser_FullMethodName          = "/pb.ArtGeneratorService/CreateUser"
	ArtGeneratorService_DeleteUser_FullMethodName          = "/pb.ArtGeneratorService/DeleteUser"
	ArtGeneratorService_ResetPassword_FullMethodName       = "/pb.ArtGeneratorService/ResetPassword"
	ArtGeneratorService_ValidateEmail_FullMethodName       = "/pb.ArtGeneratorService/ValidateEmail"
	ArtGeneratorService_SendValidationEmail_FullMethodName = "/pb.ArtGeneratorService/SendValidationEmail"
	ArtGeneratorService_CreateArt_FullMethodName           = "/pb.ArtGeneratorService/CreateArt"
	ArtGeneratorService_GetArt_FullMethodName              = "/pb.ArtGeneratorService/GetArt"
	ArtGeneratorService_UpdateArt_FullMethodName           = "/pb.ArtGeneratorService/UpdateArt"
	ArtGeneratorService_ListArts_FullMethodName            = "/pb.ArtGeneratorService/ListArts"
	ArtGeneratorService_DeleteArt_FullMethodName           = "/pb.ArtGeneratorService/DeleteArt"
	ArtGeneratorService_UploadArt_FullMethodName           = "/pb.ArtGeneratorService/UploadArt"
)

// ArtGeneratorServiceClient is the client API for ArtGeneratorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArtGeneratorServiceClient interface {
	CreateSession(ctx context.Context, in *CreateSessionRequest, opts ...grpc.CallOption) (*CreateSessionResponse, error)
	DeleteSession(ctx context.Context, in *DeleteSessionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*RefreshTokenResponse, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*User, error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*User, error)
	ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error)
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*User, error)
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ValidateEmail(ctx context.Context, in *ValidateEmailRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SendValidationEmail(ctx context.Context, in *SendValidationEmailRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateArt(ctx context.Context, in *CreateArtRequest, opts ...grpc.CallOption) (*Art, error)
	GetArt(ctx context.Context, in *GetArtRequest, opts ...grpc.CallOption) (*Art, error)
	UpdateArt(ctx context.Context, in *UpdateArtRequest, opts ...grpc.CallOption) (*Art, error)
	ListArts(ctx context.Context, in *ListArtsRequest, opts ...grpc.CallOption) (*ListArtsResponse, error)
	DeleteArt(ctx context.Context, in *DeleteArtRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UploadArt(ctx context.Context, opts ...grpc.CallOption) (ArtGeneratorService_UploadArtClient, error)
}

type artGeneratorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewArtGeneratorServiceClient(cc grpc.ClientConnInterface) ArtGeneratorServiceClient {
	return &artGeneratorServiceClient{cc}
}

func (c *artGeneratorServiceClient) CreateSession(ctx context.Context, in *CreateSessionRequest, opts ...grpc.CallOption) (*CreateSessionResponse, error) {
	out := new(CreateSessionResponse)
	err := c.cc.Invoke(ctx, ArtGeneratorService_CreateSession_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artGeneratorServiceClient) DeleteSession(ctx context.Context, in *DeleteSessionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ArtGeneratorService_DeleteSession_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artGeneratorServiceClient) RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*RefreshTokenResponse, error) {
	out := new(RefreshTokenResponse)
	err := c.cc.Invoke(ctx, ArtGeneratorService_RefreshToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artGeneratorServiceClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, ArtGeneratorService_UpdateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artGeneratorServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, ArtGeneratorService_GetUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artGeneratorServiceClient) ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error) {
	out := new(ListUsersResponse)
	err := c.cc.Invoke(ctx, ArtGeneratorService_ListUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artGeneratorServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, ArtGeneratorService_CreateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artGeneratorServiceClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ArtGeneratorService_DeleteUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artGeneratorServiceClient) ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ArtGeneratorService_ResetPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artGeneratorServiceClient) ValidateEmail(ctx context.Context, in *ValidateEmailRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ArtGeneratorService_ValidateEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artGeneratorServiceClient) SendValidationEmail(ctx context.Context, in *SendValidationEmailRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ArtGeneratorService_SendValidationEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artGeneratorServiceClient) CreateArt(ctx context.Context, in *CreateArtRequest, opts ...grpc.CallOption) (*Art, error) {
	out := new(Art)
	err := c.cc.Invoke(ctx, ArtGeneratorService_CreateArt_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artGeneratorServiceClient) GetArt(ctx context.Context, in *GetArtRequest, opts ...grpc.CallOption) (*Art, error) {
	out := new(Art)
	err := c.cc.Invoke(ctx, ArtGeneratorService_GetArt_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artGeneratorServiceClient) UpdateArt(ctx context.Context, in *UpdateArtRequest, opts ...grpc.CallOption) (*Art, error) {
	out := new(Art)
	err := c.cc.Invoke(ctx, ArtGeneratorService_UpdateArt_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artGeneratorServiceClient) ListArts(ctx context.Context, in *ListArtsRequest, opts ...grpc.CallOption) (*ListArtsResponse, error) {
	out := new(ListArtsResponse)
	err := c.cc.Invoke(ctx, ArtGeneratorService_ListArts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artGeneratorServiceClient) DeleteArt(ctx context.Context, in *DeleteArtRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ArtGeneratorService_DeleteArt_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artGeneratorServiceClient) UploadArt(ctx context.Context, opts ...grpc.CallOption) (ArtGeneratorService_UploadArtClient, error) {
	stream, err := c.cc.NewStream(ctx, &ArtGeneratorService_ServiceDesc.Streams[0], ArtGeneratorService_UploadArt_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &artGeneratorServiceUploadArtClient{stream}
	return x, nil
}

type ArtGeneratorService_UploadArtClient interface {
	Send(*UploadArtRequest) error
	CloseAndRecv() (*Art, error)
	grpc.ClientStream
}

type artGeneratorServiceUploadArtClient struct {
	grpc.ClientStream
}

func (x *artGeneratorServiceUploadArtClient) Send(m *UploadArtRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *artGeneratorServiceUploadArtClient) CloseAndRecv() (*Art, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Art)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ArtGeneratorServiceServer is the server API for ArtGeneratorService service.
// All implementations must embed UnimplementedArtGeneratorServiceServer
// for forward compatibility
type ArtGeneratorServiceServer interface {
	CreateSession(context.Context, *CreateSessionRequest) (*CreateSessionResponse, error)
	DeleteSession(context.Context, *DeleteSessionRequest) (*emptypb.Empty, error)
	RefreshToken(context.Context, *RefreshTokenRequest) (*RefreshTokenResponse, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*User, error)
	GetUser(context.Context, *GetUserRequest) (*User, error)
	ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error)
	CreateUser(context.Context, *CreateUserRequest) (*User, error)
	DeleteUser(context.Context, *DeleteUserRequest) (*emptypb.Empty, error)
	ResetPassword(context.Context, *ResetPasswordRequest) (*emptypb.Empty, error)
	ValidateEmail(context.Context, *ValidateEmailRequest) (*emptypb.Empty, error)
	SendValidationEmail(context.Context, *SendValidationEmailRequest) (*emptypb.Empty, error)
	CreateArt(context.Context, *CreateArtRequest) (*Art, error)
	GetArt(context.Context, *GetArtRequest) (*Art, error)
	UpdateArt(context.Context, *UpdateArtRequest) (*Art, error)
	ListArts(context.Context, *ListArtsRequest) (*ListArtsResponse, error)
	DeleteArt(context.Context, *DeleteArtRequest) (*emptypb.Empty, error)
	UploadArt(ArtGeneratorService_UploadArtServer) error
	mustEmbedUnimplementedArtGeneratorServiceServer()
}

// UnimplementedArtGeneratorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedArtGeneratorServiceServer struct {
}

func (UnimplementedArtGeneratorServiceServer) CreateSession(context.Context, *CreateSessionRequest) (*CreateSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSession not implemented")
}
func (UnimplementedArtGeneratorServiceServer) DeleteSession(context.Context, *DeleteSessionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSession not implemented")
}
func (UnimplementedArtGeneratorServiceServer) RefreshToken(context.Context, *RefreshTokenRequest) (*RefreshTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshToken not implemented")
}
func (UnimplementedArtGeneratorServiceServer) UpdateUser(context.Context, *UpdateUserRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedArtGeneratorServiceServer) GetUser(context.Context, *GetUserRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedArtGeneratorServiceServer) ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (UnimplementedArtGeneratorServiceServer) CreateUser(context.Context, *CreateUserRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedArtGeneratorServiceServer) DeleteUser(context.Context, *DeleteUserRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedArtGeneratorServiceServer) ResetPassword(context.Context, *ResetPasswordRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPassword not implemented")
}
func (UnimplementedArtGeneratorServiceServer) ValidateEmail(context.Context, *ValidateEmailRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateEmail not implemented")
}
func (UnimplementedArtGeneratorServiceServer) SendValidationEmail(context.Context, *SendValidationEmailRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendValidationEmail not implemented")
}
func (UnimplementedArtGeneratorServiceServer) CreateArt(context.Context, *CreateArtRequest) (*Art, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateArt not implemented")
}
func (UnimplementedArtGeneratorServiceServer) GetArt(context.Context, *GetArtRequest) (*Art, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArt not implemented")
}
func (UnimplementedArtGeneratorServiceServer) UpdateArt(context.Context, *UpdateArtRequest) (*Art, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateArt not implemented")
}
func (UnimplementedArtGeneratorServiceServer) ListArts(context.Context, *ListArtsRequest) (*ListArtsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListArts not implemented")
}
func (UnimplementedArtGeneratorServiceServer) DeleteArt(context.Context, *DeleteArtRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteArt not implemented")
}
func (UnimplementedArtGeneratorServiceServer) UploadArt(ArtGeneratorService_UploadArtServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadArt not implemented")
}
func (UnimplementedArtGeneratorServiceServer) mustEmbedUnimplementedArtGeneratorServiceServer() {}

// UnsafeArtGeneratorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArtGeneratorServiceServer will
// result in compilation errors.
type UnsafeArtGeneratorServiceServer interface {
	mustEmbedUnimplementedArtGeneratorServiceServer()
}

func RegisterArtGeneratorServiceServer(s grpc.ServiceRegistrar, srv ArtGeneratorServiceServer) {
	s.RegisterService(&ArtGeneratorService_ServiceDesc, srv)
}

func _ArtGeneratorService_CreateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtGeneratorServiceServer).CreateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtGeneratorService_CreateSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtGeneratorServiceServer).CreateSession(ctx, req.(*CreateSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtGeneratorService_DeleteSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtGeneratorServiceServer).DeleteSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtGeneratorService_DeleteSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtGeneratorServiceServer).DeleteSession(ctx, req.(*DeleteSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtGeneratorService_RefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtGeneratorServiceServer).RefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtGeneratorService_RefreshToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtGeneratorServiceServer).RefreshToken(ctx, req.(*RefreshTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtGeneratorService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtGeneratorServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtGeneratorService_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtGeneratorServiceServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtGeneratorService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtGeneratorServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtGeneratorService_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtGeneratorServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtGeneratorService_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtGeneratorServiceServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtGeneratorService_ListUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtGeneratorServiceServer).ListUsers(ctx, req.(*ListUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtGeneratorService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtGeneratorServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtGeneratorService_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtGeneratorServiceServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtGeneratorService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtGeneratorServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtGeneratorService_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtGeneratorServiceServer).DeleteUser(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtGeneratorService_ResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtGeneratorServiceServer).ResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtGeneratorService_ResetPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtGeneratorServiceServer).ResetPassword(ctx, req.(*ResetPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtGeneratorService_ValidateEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtGeneratorServiceServer).ValidateEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtGeneratorService_ValidateEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtGeneratorServiceServer).ValidateEmail(ctx, req.(*ValidateEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtGeneratorService_SendValidationEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendValidationEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtGeneratorServiceServer).SendValidationEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtGeneratorService_SendValidationEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtGeneratorServiceServer).SendValidationEmail(ctx, req.(*SendValidationEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtGeneratorService_CreateArt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateArtRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtGeneratorServiceServer).CreateArt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtGeneratorService_CreateArt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtGeneratorServiceServer).CreateArt(ctx, req.(*CreateArtRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtGeneratorService_GetArt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArtRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtGeneratorServiceServer).GetArt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtGeneratorService_GetArt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtGeneratorServiceServer).GetArt(ctx, req.(*GetArtRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtGeneratorService_UpdateArt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateArtRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtGeneratorServiceServer).UpdateArt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtGeneratorService_UpdateArt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtGeneratorServiceServer).UpdateArt(ctx, req.(*UpdateArtRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtGeneratorService_ListArts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListArtsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtGeneratorServiceServer).ListArts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtGeneratorService_ListArts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtGeneratorServiceServer).ListArts(ctx, req.(*ListArtsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtGeneratorService_DeleteArt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteArtRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtGeneratorServiceServer).DeleteArt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtGeneratorService_DeleteArt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtGeneratorServiceServer).DeleteArt(ctx, req.(*DeleteArtRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtGeneratorService_UploadArt_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ArtGeneratorServiceServer).UploadArt(&artGeneratorServiceUploadArtServer{stream})
}

type ArtGeneratorService_UploadArtServer interface {
	SendAndClose(*Art) error
	Recv() (*UploadArtRequest, error)
	grpc.ServerStream
}

type artGeneratorServiceUploadArtServer struct {
	grpc.ServerStream
}

func (x *artGeneratorServiceUploadArtServer) SendAndClose(m *Art) error {
	return x.ServerStream.SendMsg(m)
}

func (x *artGeneratorServiceUploadArtServer) Recv() (*UploadArtRequest, error) {
	m := new(UploadArtRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ArtGeneratorService_ServiceDesc is the grpc.ServiceDesc for ArtGeneratorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ArtGeneratorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ArtGeneratorService",
	HandlerType: (*ArtGeneratorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSession",
			Handler:    _ArtGeneratorService_CreateSession_Handler,
		},
		{
			MethodName: "DeleteSession",
			Handler:    _ArtGeneratorService_DeleteSession_Handler,
		},
		{
			MethodName: "RefreshToken",
			Handler:    _ArtGeneratorService_RefreshToken_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _ArtGeneratorService_UpdateUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _ArtGeneratorService_GetUser_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _ArtGeneratorService_ListUsers_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _ArtGeneratorService_CreateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _ArtGeneratorService_DeleteUser_Handler,
		},
		{
			MethodName: "ResetPassword",
			Handler:    _ArtGeneratorService_ResetPassword_Handler,
		},
		{
			MethodName: "ValidateEmail",
			Handler:    _ArtGeneratorService_ValidateEmail_Handler,
		},
		{
			MethodName: "SendValidationEmail",
			Handler:    _ArtGeneratorService_SendValidationEmail_Handler,
		},
		{
			MethodName: "CreateArt",
			Handler:    _ArtGeneratorService_CreateArt_Handler,
		},
		{
			MethodName: "GetArt",
			Handler:    _ArtGeneratorService_GetArt_Handler,
		},
		{
			MethodName: "UpdateArt",
			Handler:    _ArtGeneratorService_UpdateArt_Handler,
		},
		{
			MethodName: "ListArts",
			Handler:    _ArtGeneratorService_ListArts_Handler,
		},
		{
			MethodName: "DeleteArt",
			Handler:    _ArtGeneratorService_DeleteArt_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadArt",
			Handler:       _ArtGeneratorService_UploadArt_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "services.proto",
}
