// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Media is an object representing the database table.
type Media struct {
	ID               string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	OriginalFilename string    `boil:"original_filename" json:"original_filename" toml:"original_filename" yaml:"original_filename"`
	OriginalURL      string    `boil:"original_url" json:"original_url" toml:"original_url" yaml:"original_url"`
	ThumbnailURL     string    `boil:"thumbnail_url" json:"thumbnail_url" toml:"thumbnail_url" yaml:"thumbnail_url"`
	CreatedAt        null.Time `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`

	R *mediaR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L mediaL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MediaColumns = struct {
	ID               string
	OriginalFilename string
	OriginalURL      string
	ThumbnailURL     string
	CreatedAt        string
}{
	ID:               "id",
	OriginalFilename: "original_filename",
	OriginalURL:      "original_url",
	ThumbnailURL:     "thumbnail_url",
	CreatedAt:        "created_at",
}

var MediaTableColumns = struct {
	ID               string
	OriginalFilename string
	OriginalURL      string
	ThumbnailURL     string
	CreatedAt        string
}{
	ID:               "medias.id",
	OriginalFilename: "medias.original_filename",
	OriginalURL:      "medias.original_url",
	ThumbnailURL:     "medias.thumbnail_url",
	CreatedAt:        "medias.created_at",
}

// Generated where

var MediaWhere = struct {
	ID               whereHelperstring
	OriginalFilename whereHelperstring
	OriginalURL      whereHelperstring
	ThumbnailURL     whereHelperstring
	CreatedAt        whereHelpernull_Time
}{
	ID:               whereHelperstring{field: "\"medias\".\"id\""},
	OriginalFilename: whereHelperstring{field: "\"medias\".\"original_filename\""},
	OriginalURL:      whereHelperstring{field: "\"medias\".\"original_url\""},
	ThumbnailURL:     whereHelperstring{field: "\"medias\".\"thumbnail_url\""},
	CreatedAt:        whereHelpernull_Time{field: "\"medias\".\"created_at\""},
}

// MediaRels is where relationship names are stored.
var MediaRels = struct {
	ImageArtVariations string
	ImageArts          string
	AvatarUsers        string
}{
	ImageArtVariations: "ImageArtVariations",
	ImageArts:          "ImageArts",
	AvatarUsers:        "AvatarUsers",
}

// mediaR is where relationships are stored.
type mediaR struct {
	ImageArtVariations ArtVariationSlice `boil:"ImageArtVariations" json:"ImageArtVariations" toml:"ImageArtVariations" yaml:"ImageArtVariations"`
	ImageArts          ArtSlice          `boil:"ImageArts" json:"ImageArts" toml:"ImageArts" yaml:"ImageArts"`
	AvatarUsers        UserSlice         `boil:"AvatarUsers" json:"AvatarUsers" toml:"AvatarUsers" yaml:"AvatarUsers"`
}

// NewStruct creates a new relationship struct
func (*mediaR) NewStruct() *mediaR {
	return &mediaR{}
}

func (r *mediaR) GetImageArtVariations() ArtVariationSlice {
	if r == nil {
		return nil
	}
	return r.ImageArtVariations
}

func (r *mediaR) GetImageArts() ArtSlice {
	if r == nil {
		return nil
	}
	return r.ImageArts
}

func (r *mediaR) GetAvatarUsers() UserSlice {
	if r == nil {
		return nil
	}
	return r.AvatarUsers
}

// mediaL is where Load methods for each relationship are stored.
type mediaL struct{}

var (
	mediaAllColumns            = []string{"id", "original_filename", "original_url", "thumbnail_url", "created_at"}
	mediaColumnsWithoutDefault = []string{"original_filename", "original_url", "thumbnail_url"}
	mediaColumnsWithDefault    = []string{"id", "created_at"}
	mediaPrimaryKeyColumns     = []string{"id"}
	mediaGeneratedColumns      = []string{}
)

type (
	// MediaSlice is an alias for a slice of pointers to Media.
	// This should almost always be used instead of []Media.
	MediaSlice []*Media
	// MediaHook is the signature for custom Media hook methods
	MediaHook func(context.Context, boil.ContextExecutor, *Media) error

	mediaQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	mediaType                 = reflect.TypeOf(&Media{})
	mediaMapping              = queries.MakeStructMapping(mediaType)
	mediaPrimaryKeyMapping, _ = queries.BindMapping(mediaType, mediaMapping, mediaPrimaryKeyColumns)
	mediaInsertCacheMut       sync.RWMutex
	mediaInsertCache          = make(map[string]insertCache)
	mediaUpdateCacheMut       sync.RWMutex
	mediaUpdateCache          = make(map[string]updateCache)
	mediaUpsertCacheMut       sync.RWMutex
	mediaUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var mediaAfterSelectMu sync.Mutex
var mediaAfterSelectHooks []MediaHook

var mediaBeforeInsertMu sync.Mutex
var mediaBeforeInsertHooks []MediaHook
var mediaAfterInsertMu sync.Mutex
var mediaAfterInsertHooks []MediaHook

var mediaBeforeUpdateMu sync.Mutex
var mediaBeforeUpdateHooks []MediaHook
var mediaAfterUpdateMu sync.Mutex
var mediaAfterUpdateHooks []MediaHook

var mediaBeforeDeleteMu sync.Mutex
var mediaBeforeDeleteHooks []MediaHook
var mediaAfterDeleteMu sync.Mutex
var mediaAfterDeleteHooks []MediaHook

var mediaBeforeUpsertMu sync.Mutex
var mediaBeforeUpsertHooks []MediaHook
var mediaAfterUpsertMu sync.Mutex
var mediaAfterUpsertHooks []MediaHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Media) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mediaAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Media) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mediaBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Media) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mediaAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Media) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mediaBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Media) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mediaAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Media) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mediaBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Media) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mediaAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Media) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mediaBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Media) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mediaAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMediaHook registers your hook function for all future operations.
func AddMediaHook(hookPoint boil.HookPoint, mediaHook MediaHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		mediaAfterSelectMu.Lock()
		mediaAfterSelectHooks = append(mediaAfterSelectHooks, mediaHook)
		mediaAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		mediaBeforeInsertMu.Lock()
		mediaBeforeInsertHooks = append(mediaBeforeInsertHooks, mediaHook)
		mediaBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		mediaAfterInsertMu.Lock()
		mediaAfterInsertHooks = append(mediaAfterInsertHooks, mediaHook)
		mediaAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		mediaBeforeUpdateMu.Lock()
		mediaBeforeUpdateHooks = append(mediaBeforeUpdateHooks, mediaHook)
		mediaBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		mediaAfterUpdateMu.Lock()
		mediaAfterUpdateHooks = append(mediaAfterUpdateHooks, mediaHook)
		mediaAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		mediaBeforeDeleteMu.Lock()
		mediaBeforeDeleteHooks = append(mediaBeforeDeleteHooks, mediaHook)
		mediaBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		mediaAfterDeleteMu.Lock()
		mediaAfterDeleteHooks = append(mediaAfterDeleteHooks, mediaHook)
		mediaAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		mediaBeforeUpsertMu.Lock()
		mediaBeforeUpsertHooks = append(mediaBeforeUpsertHooks, mediaHook)
		mediaBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		mediaAfterUpsertMu.Lock()
		mediaAfterUpsertHooks = append(mediaAfterUpsertHooks, mediaHook)
		mediaAfterUpsertMu.Unlock()
	}
}

// OneG returns a single media record from the query using the global executor.
func (q mediaQuery) OneG(ctx context.Context) (*Media, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single media record from the query.
func (q mediaQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Media, error) {
	o := &Media{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for medias")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Media records from the query using the global executor.
func (q mediaQuery) AllG(ctx context.Context) (MediaSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Media records from the query.
func (q mediaQuery) All(ctx context.Context, exec boil.ContextExecutor) (MediaSlice, error) {
	var o []*Media

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Media slice")
	}

	if len(mediaAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Media records in the query using the global executor
func (q mediaQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Media records in the query.
func (q mediaQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count medias rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q mediaQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q mediaQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if medias exists")
	}

	return count > 0, nil
}

// ImageArtVariations retrieves all the art_variation's ArtVariations with an executor via image_id column.
func (o *Media) ImageArtVariations(mods ...qm.QueryMod) artVariationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"art_variations\".\"image_id\"=?", o.ID),
	)

	return ArtVariations(queryMods...)
}

// ImageArts retrieves all the art's Arts with an executor via image_id column.
func (o *Media) ImageArts(mods ...qm.QueryMod) artQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"arts\".\"image_id\"=?", o.ID),
	)

	return Arts(queryMods...)
}

// AvatarUsers retrieves all the user's Users with an executor via avatar_id column.
func (o *Media) AvatarUsers(mods ...qm.QueryMod) userQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"users\".\"avatar_id\"=?", o.ID),
	)

	return Users(queryMods...)
}

// LoadImageArtVariations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (mediaL) LoadImageArtVariations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMedia interface{}, mods queries.Applicator) error {
	var slice []*Media
	var object *Media

	if singular {
		var ok bool
		object, ok = maybeMedia.(*Media)
		if !ok {
			object = new(Media)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMedia)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMedia))
			}
		}
	} else {
		s, ok := maybeMedia.(*[]*Media)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMedia)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMedia))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &mediaR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mediaR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`art_variations`),
		qm.WhereIn(`art_variations.image_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load art_variations")
	}

	var resultSlice []*ArtVariation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice art_variations")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on art_variations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for art_variations")
	}

	if len(artVariationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ImageArtVariations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &artVariationR{}
			}
			foreign.R.Image = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.ImageID) {
				local.R.ImageArtVariations = append(local.R.ImageArtVariations, foreign)
				if foreign.R == nil {
					foreign.R = &artVariationR{}
				}
				foreign.R.Image = local
				break
			}
		}
	}

	return nil
}

// LoadImageArts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (mediaL) LoadImageArts(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMedia interface{}, mods queries.Applicator) error {
	var slice []*Media
	var object *Media

	if singular {
		var ok bool
		object, ok = maybeMedia.(*Media)
		if !ok {
			object = new(Media)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMedia)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMedia))
			}
		}
	} else {
		s, ok := maybeMedia.(*[]*Media)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMedia)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMedia))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &mediaR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mediaR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`arts`),
		qm.WhereIn(`arts.image_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load arts")
	}

	var resultSlice []*Art
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice arts")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on arts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for arts")
	}

	if len(artAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ImageArts = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &artR{}
			}
			foreign.R.Image = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.ImageID) {
				local.R.ImageArts = append(local.R.ImageArts, foreign)
				if foreign.R == nil {
					foreign.R = &artR{}
				}
				foreign.R.Image = local
				break
			}
		}
	}

	return nil
}

// LoadAvatarUsers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (mediaL) LoadAvatarUsers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMedia interface{}, mods queries.Applicator) error {
	var slice []*Media
	var object *Media

	if singular {
		var ok bool
		object, ok = maybeMedia.(*Media)
		if !ok {
			object = new(Media)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMedia)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMedia))
			}
		}
	} else {
		s, ok := maybeMedia.(*[]*Media)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMedia)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMedia))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &mediaR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mediaR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.avatar_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load users")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice users")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.AvatarUsers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userR{}
			}
			foreign.R.Avatar = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.AvatarID) {
				local.R.AvatarUsers = append(local.R.AvatarUsers, foreign)
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.Avatar = local
				break
			}
		}
	}

	return nil
}

// AddImageArtVariationsG adds the given related objects to the existing relationships
// of the medias, optionally inserting them as new records.
// Appends related to o.R.ImageArtVariations.
// Sets related.R.Image appropriately.
// Uses the global database handle.
func (o *Media) AddImageArtVariationsG(ctx context.Context, insert bool, related ...*ArtVariation) error {
	return o.AddImageArtVariations(ctx, boil.GetContextDB(), insert, related...)
}

// AddImageArtVariations adds the given related objects to the existing relationships
// of the medias, optionally inserting them as new records.
// Appends related to o.R.ImageArtVariations.
// Sets related.R.Image appropriately.
func (o *Media) AddImageArtVariations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ArtVariation) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ImageID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"art_variations\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"image_id"}),
				strmangle.WhereClause("\"", "\"", 2, artVariationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ImageID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &mediaR{
			ImageArtVariations: related,
		}
	} else {
		o.R.ImageArtVariations = append(o.R.ImageArtVariations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &artVariationR{
				Image: o,
			}
		} else {
			rel.R.Image = o
		}
	}
	return nil
}

// SetImageArtVariationsG removes all previously related items of the
// medias replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Image's ImageArtVariations accordingly.
// Replaces o.R.ImageArtVariations with related.
// Sets related.R.Image's ImageArtVariations accordingly.
// Uses the global database handle.
func (o *Media) SetImageArtVariationsG(ctx context.Context, insert bool, related ...*ArtVariation) error {
	return o.SetImageArtVariations(ctx, boil.GetContextDB(), insert, related...)
}

// SetImageArtVariations removes all previously related items of the
// medias replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Image's ImageArtVariations accordingly.
// Replaces o.R.ImageArtVariations with related.
// Sets related.R.Image's ImageArtVariations accordingly.
func (o *Media) SetImageArtVariations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ArtVariation) error {
	query := "update \"art_variations\" set \"image_id\" = null where \"image_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ImageArtVariations {
			queries.SetScanner(&rel.ImageID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Image = nil
		}
		o.R.ImageArtVariations = nil
	}

	return o.AddImageArtVariations(ctx, exec, insert, related...)
}

// RemoveImageArtVariationsG relationships from objects passed in.
// Removes related items from R.ImageArtVariations (uses pointer comparison, removal does not keep order)
// Sets related.R.Image.
// Uses the global database handle.
func (o *Media) RemoveImageArtVariationsG(ctx context.Context, related ...*ArtVariation) error {
	return o.RemoveImageArtVariations(ctx, boil.GetContextDB(), related...)
}

// RemoveImageArtVariations relationships from objects passed in.
// Removes related items from R.ImageArtVariations (uses pointer comparison, removal does not keep order)
// Sets related.R.Image.
func (o *Media) RemoveImageArtVariations(ctx context.Context, exec boil.ContextExecutor, related ...*ArtVariation) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ImageID, nil)
		if rel.R != nil {
			rel.R.Image = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("image_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ImageArtVariations {
			if rel != ri {
				continue
			}

			ln := len(o.R.ImageArtVariations)
			if ln > 1 && i < ln-1 {
				o.R.ImageArtVariations[i] = o.R.ImageArtVariations[ln-1]
			}
			o.R.ImageArtVariations = o.R.ImageArtVariations[:ln-1]
			break
		}
	}

	return nil
}

// AddImageArtsG adds the given related objects to the existing relationships
// of the medias, optionally inserting them as new records.
// Appends related to o.R.ImageArts.
// Sets related.R.Image appropriately.
// Uses the global database handle.
func (o *Media) AddImageArtsG(ctx context.Context, insert bool, related ...*Art) error {
	return o.AddImageArts(ctx, boil.GetContextDB(), insert, related...)
}

// AddImageArts adds the given related objects to the existing relationships
// of the medias, optionally inserting them as new records.
// Appends related to o.R.ImageArts.
// Sets related.R.Image appropriately.
func (o *Media) AddImageArts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Art) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ImageID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"arts\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"image_id"}),
				strmangle.WhereClause("\"", "\"", 2, artPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ImageID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &mediaR{
			ImageArts: related,
		}
	} else {
		o.R.ImageArts = append(o.R.ImageArts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &artR{
				Image: o,
			}
		} else {
			rel.R.Image = o
		}
	}
	return nil
}

// SetImageArtsG removes all previously related items of the
// medias replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Image's ImageArts accordingly.
// Replaces o.R.ImageArts with related.
// Sets related.R.Image's ImageArts accordingly.
// Uses the global database handle.
func (o *Media) SetImageArtsG(ctx context.Context, insert bool, related ...*Art) error {
	return o.SetImageArts(ctx, boil.GetContextDB(), insert, related...)
}

// SetImageArts removes all previously related items of the
// medias replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Image's ImageArts accordingly.
// Replaces o.R.ImageArts with related.
// Sets related.R.Image's ImageArts accordingly.
func (o *Media) SetImageArts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Art) error {
	query := "update \"arts\" set \"image_id\" = null where \"image_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ImageArts {
			queries.SetScanner(&rel.ImageID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Image = nil
		}
		o.R.ImageArts = nil
	}

	return o.AddImageArts(ctx, exec, insert, related...)
}

// RemoveImageArtsG relationships from objects passed in.
// Removes related items from R.ImageArts (uses pointer comparison, removal does not keep order)
// Sets related.R.Image.
// Uses the global database handle.
func (o *Media) RemoveImageArtsG(ctx context.Context, related ...*Art) error {
	return o.RemoveImageArts(ctx, boil.GetContextDB(), related...)
}

// RemoveImageArts relationships from objects passed in.
// Removes related items from R.ImageArts (uses pointer comparison, removal does not keep order)
// Sets related.R.Image.
func (o *Media) RemoveImageArts(ctx context.Context, exec boil.ContextExecutor, related ...*Art) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ImageID, nil)
		if rel.R != nil {
			rel.R.Image = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("image_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ImageArts {
			if rel != ri {
				continue
			}

			ln := len(o.R.ImageArts)
			if ln > 1 && i < ln-1 {
				o.R.ImageArts[i] = o.R.ImageArts[ln-1]
			}
			o.R.ImageArts = o.R.ImageArts[:ln-1]
			break
		}
	}

	return nil
}

// AddAvatarUsersG adds the given related objects to the existing relationships
// of the medias, optionally inserting them as new records.
// Appends related to o.R.AvatarUsers.
// Sets related.R.Avatar appropriately.
// Uses the global database handle.
func (o *Media) AddAvatarUsersG(ctx context.Context, insert bool, related ...*User) error {
	return o.AddAvatarUsers(ctx, boil.GetContextDB(), insert, related...)
}

// AddAvatarUsers adds the given related objects to the existing relationships
// of the medias, optionally inserting them as new records.
// Appends related to o.R.AvatarUsers.
// Sets related.R.Avatar appropriately.
func (o *Media) AddAvatarUsers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*User) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.AvatarID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"users\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"avatar_id"}),
				strmangle.WhereClause("\"", "\"", 2, userPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.AvatarID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &mediaR{
			AvatarUsers: related,
		}
	} else {
		o.R.AvatarUsers = append(o.R.AvatarUsers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userR{
				Avatar: o,
			}
		} else {
			rel.R.Avatar = o
		}
	}
	return nil
}

// SetAvatarUsersG removes all previously related items of the
// medias replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Avatar's AvatarUsers accordingly.
// Replaces o.R.AvatarUsers with related.
// Sets related.R.Avatar's AvatarUsers accordingly.
// Uses the global database handle.
func (o *Media) SetAvatarUsersG(ctx context.Context, insert bool, related ...*User) error {
	return o.SetAvatarUsers(ctx, boil.GetContextDB(), insert, related...)
}

// SetAvatarUsers removes all previously related items of the
// medias replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Avatar's AvatarUsers accordingly.
// Replaces o.R.AvatarUsers with related.
// Sets related.R.Avatar's AvatarUsers accordingly.
func (o *Media) SetAvatarUsers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*User) error {
	query := "update \"users\" set \"avatar_id\" = null where \"avatar_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.AvatarUsers {
			queries.SetScanner(&rel.AvatarID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Avatar = nil
		}
		o.R.AvatarUsers = nil
	}

	return o.AddAvatarUsers(ctx, exec, insert, related...)
}

// RemoveAvatarUsersG relationships from objects passed in.
// Removes related items from R.AvatarUsers (uses pointer comparison, removal does not keep order)
// Sets related.R.Avatar.
// Uses the global database handle.
func (o *Media) RemoveAvatarUsersG(ctx context.Context, related ...*User) error {
	return o.RemoveAvatarUsers(ctx, boil.GetContextDB(), related...)
}

// RemoveAvatarUsers relationships from objects passed in.
// Removes related items from R.AvatarUsers (uses pointer comparison, removal does not keep order)
// Sets related.R.Avatar.
func (o *Media) RemoveAvatarUsers(ctx context.Context, exec boil.ContextExecutor, related ...*User) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.AvatarID, nil)
		if rel.R != nil {
			rel.R.Avatar = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("avatar_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.AvatarUsers {
			if rel != ri {
				continue
			}

			ln := len(o.R.AvatarUsers)
			if ln > 1 && i < ln-1 {
				o.R.AvatarUsers[i] = o.R.AvatarUsers[ln-1]
			}
			o.R.AvatarUsers = o.R.AvatarUsers[:ln-1]
			break
		}
	}

	return nil
}

// Medias retrieves all the records using an executor.
func Medias(mods ...qm.QueryMod) mediaQuery {
	mods = append(mods, qm.From("\"medias\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"medias\".*"})
	}

	return mediaQuery{q}
}

// FindMediaG retrieves a single record by ID.
func FindMediaG(ctx context.Context, iD string, selectCols ...string) (*Media, error) {
	return FindMedia(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindMedia retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMedia(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Media, error) {
	mediaObj := &Media{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"medias\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, mediaObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from medias")
	}

	if err = mediaObj.doAfterSelectHooks(ctx, exec); err != nil {
		return mediaObj, err
	}

	return mediaObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Media) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Media) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no medias provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mediaColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	mediaInsertCacheMut.RLock()
	cache, cached := mediaInsertCache[key]
	mediaInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			mediaAllColumns,
			mediaColumnsWithDefault,
			mediaColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(mediaType, mediaMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(mediaType, mediaMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"medias\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"medias\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into medias")
	}

	if !cached {
		mediaInsertCacheMut.Lock()
		mediaInsertCache[key] = cache
		mediaInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single Media record using the global executor.
// See Update for more documentation.
func (o *Media) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Media.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Media) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	mediaUpdateCacheMut.RLock()
	cache, cached := mediaUpdateCache[key]
	mediaUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			mediaAllColumns,
			mediaPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update medias, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"medias\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, mediaPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(mediaType, mediaMapping, append(wl, mediaPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update medias row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for medias")
	}

	if !cached {
		mediaUpdateCacheMut.Lock()
		mediaUpdateCache[key] = cache
		mediaUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q mediaQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q mediaQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for medias")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for medias")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o MediaSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MediaSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mediaPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"medias\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, mediaPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in media slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all media")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Media) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Media) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no medias provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mediaColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	mediaUpsertCacheMut.RLock()
	cache, cached := mediaUpsertCache[key]
	mediaUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			mediaAllColumns,
			mediaColumnsWithDefault,
			mediaColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			mediaAllColumns,
			mediaPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert medias, could not build update column list")
		}

		ret := strmangle.SetComplement(mediaAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(mediaPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert medias, could not build conflict column list")
			}

			conflict = make([]string, len(mediaPrimaryKeyColumns))
			copy(conflict, mediaPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"medias\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(mediaType, mediaMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(mediaType, mediaMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert medias")
	}

	if !cached {
		mediaUpsertCacheMut.Lock()
		mediaUpsertCache[key] = cache
		mediaUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single Media record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Media) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Media record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Media) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Media provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), mediaPrimaryKeyMapping)
	sql := "DELETE FROM \"medias\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from medias")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for medias")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q mediaQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q mediaQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no mediaQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from medias")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for medias")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o MediaSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MediaSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(mediaBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mediaPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"medias\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, mediaPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from media slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for medias")
	}

	if len(mediaAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Media) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no Media provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Media) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMedia(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MediaSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty MediaSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MediaSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MediaSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mediaPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"medias\".* FROM \"medias\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, mediaPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in MediaSlice")
	}

	*o = slice

	return nil
}

// MediaExistsG checks if the Media row exists.
func MediaExistsG(ctx context.Context, iD string) (bool, error) {
	return MediaExists(ctx, boil.GetContextDB(), iD)
}

// MediaExists checks if the Media row exists.
func MediaExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"medias\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if medias exists")
	}

	return exists, nil
}

// Exists checks if the Media row exists.
func (o *Media) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return MediaExists(ctx, exec, o.ID)
}
