// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Art is an object representing the database table.
type Art struct {
	ID        string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Title     string      `boil:"title" json:"title" toml:"title" yaml:"title"`
	ImageID   null.String `boil:"image_id" json:"image_id,omitempty" toml:"image_id" yaml:"image_id,omitempty"`
	AuthorID  string      `boil:"author_id" json:"author_id" toml:"author_id" yaml:"author_id"`
	CreatedAt time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt null.Time   `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *artR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L artL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ArtColumns = struct {
	ID        string
	Title     string
	ImageID   string
	AuthorID  string
	CreatedAt string
	UpdatedAt string
	DeletedAt string
}{
	ID:        "id",
	Title:     "title",
	ImageID:   "image_id",
	AuthorID:  "author_id",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	DeletedAt: "deleted_at",
}

var ArtTableColumns = struct {
	ID        string
	Title     string
	ImageID   string
	AuthorID  string
	CreatedAt string
	UpdatedAt string
	DeletedAt string
}{
	ID:        "arts.id",
	Title:     "arts.title",
	ImageID:   "arts.image_id",
	AuthorID:  "arts.author_id",
	CreatedAt: "arts.created_at",
	UpdatedAt: "arts.updated_at",
	DeletedAt: "arts.deleted_at",
}

// Generated where

var ArtWhere = struct {
	ID        whereHelperstring
	Title     whereHelperstring
	ImageID   whereHelpernull_String
	AuthorID  whereHelperstring
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
	DeletedAt whereHelpernull_Time
}{
	ID:        whereHelperstring{field: "\"arts\".\"id\""},
	Title:     whereHelperstring{field: "\"arts\".\"title\""},
	ImageID:   whereHelpernull_String{field: "\"arts\".\"image_id\""},
	AuthorID:  whereHelperstring{field: "\"arts\".\"author_id\""},
	CreatedAt: whereHelpertime_Time{field: "\"arts\".\"created_at\""},
	UpdatedAt: whereHelpertime_Time{field: "\"arts\".\"updated_at\""},
	DeletedAt: whereHelpernull_Time{field: "\"arts\".\"deleted_at\""},
}

// ArtRels is where relationship names are stored.
var ArtRels = struct {
	Author        string
	Image         string
	ArtVariations string
}{
	Author:        "Author",
	Image:         "Image",
	ArtVariations: "ArtVariations",
}

// artR is where relationships are stored.
type artR struct {
	Author        *User             `boil:"Author" json:"Author" toml:"Author" yaml:"Author"`
	Image         *Medium           `boil:"Image" json:"Image" toml:"Image" yaml:"Image"`
	ArtVariations ArtVariationSlice `boil:"ArtVariations" json:"ArtVariations" toml:"ArtVariations" yaml:"ArtVariations"`
}

// NewStruct creates a new relationship struct
func (*artR) NewStruct() *artR {
	return &artR{}
}

func (r *artR) GetAuthor() *User {
	if r == nil {
		return nil
	}
	return r.Author
}

func (r *artR) GetImage() *Medium {
	if r == nil {
		return nil
	}
	return r.Image
}

func (r *artR) GetArtVariations() ArtVariationSlice {
	if r == nil {
		return nil
	}
	return r.ArtVariations
}

// artL is where Load methods for each relationship are stored.
type artL struct{}

var (
	artAllColumns            = []string{"id", "title", "image_id", "author_id", "created_at", "updated_at", "deleted_at"}
	artColumnsWithoutDefault = []string{"title", "author_id"}
	artColumnsWithDefault    = []string{"id", "image_id", "created_at", "updated_at", "deleted_at"}
	artPrimaryKeyColumns     = []string{"id"}
	artGeneratedColumns      = []string{}
)

type (
	// ArtSlice is an alias for a slice of pointers to Art.
	// This should almost always be used instead of []Art.
	ArtSlice []*Art
	// ArtHook is the signature for custom Art hook methods
	ArtHook func(context.Context, boil.ContextExecutor, *Art) error

	artQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	artType                 = reflect.TypeOf(&Art{})
	artMapping              = queries.MakeStructMapping(artType)
	artPrimaryKeyMapping, _ = queries.BindMapping(artType, artMapping, artPrimaryKeyColumns)
	artInsertCacheMut       sync.RWMutex
	artInsertCache          = make(map[string]insertCache)
	artUpdateCacheMut       sync.RWMutex
	artUpdateCache          = make(map[string]updateCache)
	artUpsertCacheMut       sync.RWMutex
	artUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var artAfterSelectMu sync.Mutex
var artAfterSelectHooks []ArtHook

var artBeforeInsertMu sync.Mutex
var artBeforeInsertHooks []ArtHook
var artAfterInsertMu sync.Mutex
var artAfterInsertHooks []ArtHook

var artBeforeUpdateMu sync.Mutex
var artBeforeUpdateHooks []ArtHook
var artAfterUpdateMu sync.Mutex
var artAfterUpdateHooks []ArtHook

var artBeforeDeleteMu sync.Mutex
var artBeforeDeleteHooks []ArtHook
var artAfterDeleteMu sync.Mutex
var artAfterDeleteHooks []ArtHook

var artBeforeUpsertMu sync.Mutex
var artBeforeUpsertHooks []ArtHook
var artAfterUpsertMu sync.Mutex
var artAfterUpsertHooks []ArtHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Art) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range artAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Art) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range artBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Art) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range artAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Art) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range artBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Art) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range artAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Art) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range artBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Art) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range artAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Art) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range artBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Art) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range artAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddArtHook registers your hook function for all future operations.
func AddArtHook(hookPoint boil.HookPoint, artHook ArtHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		artAfterSelectMu.Lock()
		artAfterSelectHooks = append(artAfterSelectHooks, artHook)
		artAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		artBeforeInsertMu.Lock()
		artBeforeInsertHooks = append(artBeforeInsertHooks, artHook)
		artBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		artAfterInsertMu.Lock()
		artAfterInsertHooks = append(artAfterInsertHooks, artHook)
		artAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		artBeforeUpdateMu.Lock()
		artBeforeUpdateHooks = append(artBeforeUpdateHooks, artHook)
		artBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		artAfterUpdateMu.Lock()
		artAfterUpdateHooks = append(artAfterUpdateHooks, artHook)
		artAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		artBeforeDeleteMu.Lock()
		artBeforeDeleteHooks = append(artBeforeDeleteHooks, artHook)
		artBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		artAfterDeleteMu.Lock()
		artAfterDeleteHooks = append(artAfterDeleteHooks, artHook)
		artAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		artBeforeUpsertMu.Lock()
		artBeforeUpsertHooks = append(artBeforeUpsertHooks, artHook)
		artBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		artAfterUpsertMu.Lock()
		artAfterUpsertHooks = append(artAfterUpsertHooks, artHook)
		artAfterUpsertMu.Unlock()
	}
}

// OneG returns a single art record from the query using the global executor.
func (q artQuery) OneG(ctx context.Context) (*Art, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single art record from the query.
func (q artQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Art, error) {
	o := &Art{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for arts")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Art records from the query using the global executor.
func (q artQuery) AllG(ctx context.Context) (ArtSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Art records from the query.
func (q artQuery) All(ctx context.Context, exec boil.ContextExecutor) (ArtSlice, error) {
	var o []*Art

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Art slice")
	}

	if len(artAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Art records in the query using the global executor
func (q artQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Art records in the query.
func (q artQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count arts rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q artQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q artQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if arts exists")
	}

	return count > 0, nil
}

// Author pointed to by the foreign key.
func (o *Art) Author(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.AuthorID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// Image pointed to by the foreign key.
func (o *Art) Image(mods ...qm.QueryMod) mediumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ImageID),
	}

	queryMods = append(queryMods, mods...)

	return Media(queryMods...)
}

// ArtVariations retrieves all the art_variation's ArtVariations with an executor.
func (o *Art) ArtVariations(mods ...qm.QueryMod) artVariationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"art_variations\".\"art_id\"=?", o.ID),
	)

	return ArtVariations(queryMods...)
}

// LoadAuthor allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (artL) LoadAuthor(ctx context.Context, e boil.ContextExecutor, singular bool, maybeArt interface{}, mods queries.Applicator) error {
	var slice []*Art
	var object *Art

	if singular {
		var ok bool
		object, ok = maybeArt.(*Art)
		if !ok {
			object = new(Art)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeArt)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeArt))
			}
		}
	} else {
		s, ok := maybeArt.(*[]*Art)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeArt)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeArt))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &artR{}
		}
		args[object.AuthorID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &artR{}
			}

			args[obj.AuthorID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Author = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.AuthorArts = append(foreign.R.AuthorArts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AuthorID == foreign.ID {
				local.R.Author = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.AuthorArts = append(foreign.R.AuthorArts, local)
				break
			}
		}
	}

	return nil
}

// LoadImage allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (artL) LoadImage(ctx context.Context, e boil.ContextExecutor, singular bool, maybeArt interface{}, mods queries.Applicator) error {
	var slice []*Art
	var object *Art

	if singular {
		var ok bool
		object, ok = maybeArt.(*Art)
		if !ok {
			object = new(Art)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeArt)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeArt))
			}
		}
	} else {
		s, ok := maybeArt.(*[]*Art)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeArt)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeArt))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &artR{}
		}
		if !queries.IsNil(object.ImageID) {
			args[object.ImageID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &artR{}
			}

			if !queries.IsNil(obj.ImageID) {
				args[obj.ImageID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`media`),
		qm.WhereIn(`media.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Medium")
	}

	var resultSlice []*Medium
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Medium")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for media")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for media")
	}

	if len(mediumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Image = foreign
		if foreign.R == nil {
			foreign.R = &mediumR{}
		}
		foreign.R.ImageArts = append(foreign.R.ImageArts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ImageID, foreign.ID) {
				local.R.Image = foreign
				if foreign.R == nil {
					foreign.R = &mediumR{}
				}
				foreign.R.ImageArts = append(foreign.R.ImageArts, local)
				break
			}
		}
	}

	return nil
}

// LoadArtVariations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (artL) LoadArtVariations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeArt interface{}, mods queries.Applicator) error {
	var slice []*Art
	var object *Art

	if singular {
		var ok bool
		object, ok = maybeArt.(*Art)
		if !ok {
			object = new(Art)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeArt)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeArt))
			}
		}
	} else {
		s, ok := maybeArt.(*[]*Art)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeArt)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeArt))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &artR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &artR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`art_variations`),
		qm.WhereIn(`art_variations.art_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load art_variations")
	}

	var resultSlice []*ArtVariation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice art_variations")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on art_variations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for art_variations")
	}

	if len(artVariationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ArtVariations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &artVariationR{}
			}
			foreign.R.Art = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.ArtID) {
				local.R.ArtVariations = append(local.R.ArtVariations, foreign)
				if foreign.R == nil {
					foreign.R = &artVariationR{}
				}
				foreign.R.Art = local
				break
			}
		}
	}

	return nil
}

// SetAuthorG of the art to the related item.
// Sets o.R.Author to related.
// Adds o to related.R.AuthorArts.
// Uses the global database handle.
func (o *Art) SetAuthorG(ctx context.Context, insert bool, related *User) error {
	return o.SetAuthor(ctx, boil.GetContextDB(), insert, related)
}

// SetAuthor of the art to the related item.
// Sets o.R.Author to related.
// Adds o to related.R.AuthorArts.
func (o *Art) SetAuthor(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"arts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"author_id"}),
		strmangle.WhereClause("\"", "\"", 2, artPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AuthorID = related.ID
	if o.R == nil {
		o.R = &artR{
			Author: related,
		}
	} else {
		o.R.Author = related
	}

	if related.R == nil {
		related.R = &userR{
			AuthorArts: ArtSlice{o},
		}
	} else {
		related.R.AuthorArts = append(related.R.AuthorArts, o)
	}

	return nil
}

// SetImageG of the art to the related item.
// Sets o.R.Image to related.
// Adds o to related.R.ImageArts.
// Uses the global database handle.
func (o *Art) SetImageG(ctx context.Context, insert bool, related *Medium) error {
	return o.SetImage(ctx, boil.GetContextDB(), insert, related)
}

// SetImage of the art to the related item.
// Sets o.R.Image to related.
// Adds o to related.R.ImageArts.
func (o *Art) SetImage(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Medium) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"arts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"image_id"}),
		strmangle.WhereClause("\"", "\"", 2, artPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ImageID, related.ID)
	if o.R == nil {
		o.R = &artR{
			Image: related,
		}
	} else {
		o.R.Image = related
	}

	if related.R == nil {
		related.R = &mediumR{
			ImageArts: ArtSlice{o},
		}
	} else {
		related.R.ImageArts = append(related.R.ImageArts, o)
	}

	return nil
}

// RemoveImageG relationship.
// Sets o.R.Image to nil.
// Removes o from all passed in related items' relationships struct.
// Uses the global database handle.
func (o *Art) RemoveImageG(ctx context.Context, related *Medium) error {
	return o.RemoveImage(ctx, boil.GetContextDB(), related)
}

// RemoveImage relationship.
// Sets o.R.Image to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Art) RemoveImage(ctx context.Context, exec boil.ContextExecutor, related *Medium) error {
	var err error

	queries.SetScanner(&o.ImageID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("image_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Image = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ImageArts {
		if queries.Equal(o.ImageID, ri.ImageID) {
			continue
		}

		ln := len(related.R.ImageArts)
		if ln > 1 && i < ln-1 {
			related.R.ImageArts[i] = related.R.ImageArts[ln-1]
		}
		related.R.ImageArts = related.R.ImageArts[:ln-1]
		break
	}
	return nil
}

// AddArtVariationsG adds the given related objects to the existing relationships
// of the art, optionally inserting them as new records.
// Appends related to o.R.ArtVariations.
// Sets related.R.Art appropriately.
// Uses the global database handle.
func (o *Art) AddArtVariationsG(ctx context.Context, insert bool, related ...*ArtVariation) error {
	return o.AddArtVariations(ctx, boil.GetContextDB(), insert, related...)
}

// AddArtVariations adds the given related objects to the existing relationships
// of the art, optionally inserting them as new records.
// Appends related to o.R.ArtVariations.
// Sets related.R.Art appropriately.
func (o *Art) AddArtVariations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ArtVariation) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ArtID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"art_variations\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"art_id"}),
				strmangle.WhereClause("\"", "\"", 2, artVariationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ArtID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &artR{
			ArtVariations: related,
		}
	} else {
		o.R.ArtVariations = append(o.R.ArtVariations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &artVariationR{
				Art: o,
			}
		} else {
			rel.R.Art = o
		}
	}
	return nil
}

// SetArtVariationsG removes all previously related items of the
// art replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Art's ArtVariations accordingly.
// Replaces o.R.ArtVariations with related.
// Sets related.R.Art's ArtVariations accordingly.
// Uses the global database handle.
func (o *Art) SetArtVariationsG(ctx context.Context, insert bool, related ...*ArtVariation) error {
	return o.SetArtVariations(ctx, boil.GetContextDB(), insert, related...)
}

// SetArtVariations removes all previously related items of the
// art replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Art's ArtVariations accordingly.
// Replaces o.R.ArtVariations with related.
// Sets related.R.Art's ArtVariations accordingly.
func (o *Art) SetArtVariations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ArtVariation) error {
	query := "update \"art_variations\" set \"art_id\" = null where \"art_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ArtVariations {
			queries.SetScanner(&rel.ArtID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Art = nil
		}
		o.R.ArtVariations = nil
	}

	return o.AddArtVariations(ctx, exec, insert, related...)
}

// RemoveArtVariationsG relationships from objects passed in.
// Removes related items from R.ArtVariations (uses pointer comparison, removal does not keep order)
// Sets related.R.Art.
// Uses the global database handle.
func (o *Art) RemoveArtVariationsG(ctx context.Context, related ...*ArtVariation) error {
	return o.RemoveArtVariations(ctx, boil.GetContextDB(), related...)
}

// RemoveArtVariations relationships from objects passed in.
// Removes related items from R.ArtVariations (uses pointer comparison, removal does not keep order)
// Sets related.R.Art.
func (o *Art) RemoveArtVariations(ctx context.Context, exec boil.ContextExecutor, related ...*ArtVariation) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ArtID, nil)
		if rel.R != nil {
			rel.R.Art = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("art_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ArtVariations {
			if rel != ri {
				continue
			}

			ln := len(o.R.ArtVariations)
			if ln > 1 && i < ln-1 {
				o.R.ArtVariations[i] = o.R.ArtVariations[ln-1]
			}
			o.R.ArtVariations = o.R.ArtVariations[:ln-1]
			break
		}
	}

	return nil
}

// Arts retrieves all the records using an executor.
func Arts(mods ...qm.QueryMod) artQuery {
	mods = append(mods, qm.From("\"arts\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"arts\".*"})
	}

	return artQuery{q}
}

// FindArtG retrieves a single record by ID.
func FindArtG(ctx context.Context, iD string, selectCols ...string) (*Art, error) {
	return FindArt(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindArt retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindArt(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Art, error) {
	artObj := &Art{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"arts\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, artObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from arts")
	}

	if err = artObj.doAfterSelectHooks(ctx, exec); err != nil {
		return artObj, err
	}

	return artObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Art) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Art) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no arts provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(artColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	artInsertCacheMut.RLock()
	cache, cached := artInsertCache[key]
	artInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			artAllColumns,
			artColumnsWithDefault,
			artColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(artType, artMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(artType, artMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"arts\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"arts\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into arts")
	}

	if !cached {
		artInsertCacheMut.Lock()
		artInsertCache[key] = cache
		artInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single Art record using the global executor.
// See Update for more documentation.
func (o *Art) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Art.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Art) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	artUpdateCacheMut.RLock()
	cache, cached := artUpdateCache[key]
	artUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			artAllColumns,
			artPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update arts, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"arts\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, artPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(artType, artMapping, append(wl, artPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update arts row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for arts")
	}

	if !cached {
		artUpdateCacheMut.Lock()
		artUpdateCache[key] = cache
		artUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q artQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q artQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for arts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for arts")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ArtSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ArtSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), artPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"arts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, artPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in art slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all art")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Art) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Art) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no arts provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(artColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	artUpsertCacheMut.RLock()
	cache, cached := artUpsertCache[key]
	artUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			artAllColumns,
			artColumnsWithDefault,
			artColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			artAllColumns,
			artPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert arts, could not build update column list")
		}

		ret := strmangle.SetComplement(artAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(artPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert arts, could not build conflict column list")
			}

			conflict = make([]string, len(artPrimaryKeyColumns))
			copy(conflict, artPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"arts\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(artType, artMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(artType, artMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert arts")
	}

	if !cached {
		artUpsertCacheMut.Lock()
		artUpsertCache[key] = cache
		artUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single Art record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Art) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Art record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Art) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Art provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), artPrimaryKeyMapping)
	sql := "DELETE FROM \"arts\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from arts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for arts")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q artQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q artQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no artQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from arts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for arts")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o ArtSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ArtSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(artBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), artPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"arts\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, artPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from art slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for arts")
	}

	if len(artAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Art) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no Art provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Art) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindArt(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ArtSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty ArtSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ArtSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ArtSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), artPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"arts\".* FROM \"arts\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, artPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ArtSlice")
	}

	*o = slice

	return nil
}

// ArtExistsG checks if the Art row exists.
func ArtExistsG(ctx context.Context, iD string) (bool, error) {
	return ArtExists(ctx, boil.GetContextDB(), iD)
}

// ArtExists checks if the Art row exists.
func ArtExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"arts\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if arts exists")
	}

	return exists, nil
}

// Exists checks if the Art row exists.
func (o *Art) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ArtExists(ctx, exec, o.ID)
}
