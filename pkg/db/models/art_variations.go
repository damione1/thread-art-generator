// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ArtVariation is an object representing the database table.
type ArtVariation struct {
	ID        string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	ArtID     null.String `boil:"art_id" json:"art_id,omitempty" toml:"art_id" yaml:"art_id,omitempty"`
	ImageID   null.String `boil:"image_id" json:"image_id,omitempty" toml:"image_id" yaml:"image_id,omitempty"`
	AuthorID  string      `boil:"author_id" json:"author_id" toml:"author_id" yaml:"author_id"`
	CreatedAt time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt null.Time   `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *artVariationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L artVariationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ArtVariationColumns = struct {
	ID        string
	ArtID     string
	ImageID   string
	AuthorID  string
	CreatedAt string
	UpdatedAt string
	DeletedAt string
}{
	ID:        "id",
	ArtID:     "art_id",
	ImageID:   "image_id",
	AuthorID:  "author_id",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	DeletedAt: "deleted_at",
}

var ArtVariationTableColumns = struct {
	ID        string
	ArtID     string
	ImageID   string
	AuthorID  string
	CreatedAt string
	UpdatedAt string
	DeletedAt string
}{
	ID:        "art_variations.id",
	ArtID:     "art_variations.art_id",
	ImageID:   "art_variations.image_id",
	AuthorID:  "art_variations.author_id",
	CreatedAt: "art_variations.created_at",
	UpdatedAt: "art_variations.updated_at",
	DeletedAt: "art_variations.deleted_at",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) LIKE(x string) qm.QueryMod   { return qm.Where(w.field+" LIKE ?", x) }
func (w whereHelperstring) NLIKE(x string) qm.QueryMod  { return qm.Where(w.field+" NOT LIKE ?", x) }
func (w whereHelperstring) ILIKE(x string) qm.QueryMod  { return qm.Where(w.field+" ILIKE ?", x) }
func (w whereHelperstring) NILIKE(x string) qm.QueryMod { return qm.Where(w.field+" NOT ILIKE ?", x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) LIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" LIKE ?", x)
}
func (w whereHelpernull_String) NLIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT LIKE ?", x)
}
func (w whereHelpernull_String) ILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" ILIKE ?", x)
}
func (w whereHelpernull_String) NILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT ILIKE ?", x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var ArtVariationWhere = struct {
	ID        whereHelperstring
	ArtID     whereHelpernull_String
	ImageID   whereHelpernull_String
	AuthorID  whereHelperstring
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
	DeletedAt whereHelpernull_Time
}{
	ID:        whereHelperstring{field: "\"art_variations\".\"id\""},
	ArtID:     whereHelpernull_String{field: "\"art_variations\".\"art_id\""},
	ImageID:   whereHelpernull_String{field: "\"art_variations\".\"image_id\""},
	AuthorID:  whereHelperstring{field: "\"art_variations\".\"author_id\""},
	CreatedAt: whereHelpertime_Time{field: "\"art_variations\".\"created_at\""},
	UpdatedAt: whereHelpertime_Time{field: "\"art_variations\".\"updated_at\""},
	DeletedAt: whereHelpernull_Time{field: "\"art_variations\".\"deleted_at\""},
}

// ArtVariationRels is where relationship names are stored.
var ArtVariationRels = struct {
	Art    string
	Author string
	Image  string
}{
	Art:    "Art",
	Author: "Author",
	Image:  "Image",
}

// artVariationR is where relationships are stored.
type artVariationR struct {
	Art    *Art    `boil:"Art" json:"Art" toml:"Art" yaml:"Art"`
	Author *User   `boil:"Author" json:"Author" toml:"Author" yaml:"Author"`
	Image  *Medium `boil:"Image" json:"Image" toml:"Image" yaml:"Image"`
}

// NewStruct creates a new relationship struct
func (*artVariationR) NewStruct() *artVariationR {
	return &artVariationR{}
}

func (r *artVariationR) GetArt() *Art {
	if r == nil {
		return nil
	}
	return r.Art
}

func (r *artVariationR) GetAuthor() *User {
	if r == nil {
		return nil
	}
	return r.Author
}

func (r *artVariationR) GetImage() *Medium {
	if r == nil {
		return nil
	}
	return r.Image
}

// artVariationL is where Load methods for each relationship are stored.
type artVariationL struct{}

var (
	artVariationAllColumns            = []string{"id", "art_id", "image_id", "author_id", "created_at", "updated_at", "deleted_at"}
	artVariationColumnsWithoutDefault = []string{"author_id"}
	artVariationColumnsWithDefault    = []string{"id", "art_id", "image_id", "created_at", "updated_at", "deleted_at"}
	artVariationPrimaryKeyColumns     = []string{"id"}
	artVariationGeneratedColumns      = []string{}
)

type (
	// ArtVariationSlice is an alias for a slice of pointers to ArtVariation.
	// This should almost always be used instead of []ArtVariation.
	ArtVariationSlice []*ArtVariation
	// ArtVariationHook is the signature for custom ArtVariation hook methods
	ArtVariationHook func(context.Context, boil.ContextExecutor, *ArtVariation) error

	artVariationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	artVariationType                 = reflect.TypeOf(&ArtVariation{})
	artVariationMapping              = queries.MakeStructMapping(artVariationType)
	artVariationPrimaryKeyMapping, _ = queries.BindMapping(artVariationType, artVariationMapping, artVariationPrimaryKeyColumns)
	artVariationInsertCacheMut       sync.RWMutex
	artVariationInsertCache          = make(map[string]insertCache)
	artVariationUpdateCacheMut       sync.RWMutex
	artVariationUpdateCache          = make(map[string]updateCache)
	artVariationUpsertCacheMut       sync.RWMutex
	artVariationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var artVariationAfterSelectMu sync.Mutex
var artVariationAfterSelectHooks []ArtVariationHook

var artVariationBeforeInsertMu sync.Mutex
var artVariationBeforeInsertHooks []ArtVariationHook
var artVariationAfterInsertMu sync.Mutex
var artVariationAfterInsertHooks []ArtVariationHook

var artVariationBeforeUpdateMu sync.Mutex
var artVariationBeforeUpdateHooks []ArtVariationHook
var artVariationAfterUpdateMu sync.Mutex
var artVariationAfterUpdateHooks []ArtVariationHook

var artVariationBeforeDeleteMu sync.Mutex
var artVariationBeforeDeleteHooks []ArtVariationHook
var artVariationAfterDeleteMu sync.Mutex
var artVariationAfterDeleteHooks []ArtVariationHook

var artVariationBeforeUpsertMu sync.Mutex
var artVariationBeforeUpsertHooks []ArtVariationHook
var artVariationAfterUpsertMu sync.Mutex
var artVariationAfterUpsertHooks []ArtVariationHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ArtVariation) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range artVariationAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ArtVariation) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range artVariationBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ArtVariation) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range artVariationAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ArtVariation) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range artVariationBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ArtVariation) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range artVariationAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ArtVariation) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range artVariationBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ArtVariation) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range artVariationAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ArtVariation) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range artVariationBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ArtVariation) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range artVariationAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddArtVariationHook registers your hook function for all future operations.
func AddArtVariationHook(hookPoint boil.HookPoint, artVariationHook ArtVariationHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		artVariationAfterSelectMu.Lock()
		artVariationAfterSelectHooks = append(artVariationAfterSelectHooks, artVariationHook)
		artVariationAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		artVariationBeforeInsertMu.Lock()
		artVariationBeforeInsertHooks = append(artVariationBeforeInsertHooks, artVariationHook)
		artVariationBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		artVariationAfterInsertMu.Lock()
		artVariationAfterInsertHooks = append(artVariationAfterInsertHooks, artVariationHook)
		artVariationAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		artVariationBeforeUpdateMu.Lock()
		artVariationBeforeUpdateHooks = append(artVariationBeforeUpdateHooks, artVariationHook)
		artVariationBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		artVariationAfterUpdateMu.Lock()
		artVariationAfterUpdateHooks = append(artVariationAfterUpdateHooks, artVariationHook)
		artVariationAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		artVariationBeforeDeleteMu.Lock()
		artVariationBeforeDeleteHooks = append(artVariationBeforeDeleteHooks, artVariationHook)
		artVariationBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		artVariationAfterDeleteMu.Lock()
		artVariationAfterDeleteHooks = append(artVariationAfterDeleteHooks, artVariationHook)
		artVariationAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		artVariationBeforeUpsertMu.Lock()
		artVariationBeforeUpsertHooks = append(artVariationBeforeUpsertHooks, artVariationHook)
		artVariationBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		artVariationAfterUpsertMu.Lock()
		artVariationAfterUpsertHooks = append(artVariationAfterUpsertHooks, artVariationHook)
		artVariationAfterUpsertMu.Unlock()
	}
}

// OneG returns a single artVariation record from the query using the global executor.
func (q artVariationQuery) OneG(ctx context.Context) (*ArtVariation, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single artVariation record from the query.
func (q artVariationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ArtVariation, error) {
	o := &ArtVariation{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for art_variations")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all ArtVariation records from the query using the global executor.
func (q artVariationQuery) AllG(ctx context.Context) (ArtVariationSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all ArtVariation records from the query.
func (q artVariationQuery) All(ctx context.Context, exec boil.ContextExecutor) (ArtVariationSlice, error) {
	var o []*ArtVariation

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ArtVariation slice")
	}

	if len(artVariationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all ArtVariation records in the query using the global executor
func (q artVariationQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all ArtVariation records in the query.
func (q artVariationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count art_variations rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q artVariationQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q artVariationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if art_variations exists")
	}

	return count > 0, nil
}

// Art pointed to by the foreign key.
func (o *ArtVariation) Art(mods ...qm.QueryMod) artQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ArtID),
	}

	queryMods = append(queryMods, mods...)

	return Arts(queryMods...)
}

// Author pointed to by the foreign key.
func (o *ArtVariation) Author(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.AuthorID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// Image pointed to by the foreign key.
func (o *ArtVariation) Image(mods ...qm.QueryMod) mediumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ImageID),
	}

	queryMods = append(queryMods, mods...)

	return Media(queryMods...)
}

// LoadArt allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (artVariationL) LoadArt(ctx context.Context, e boil.ContextExecutor, singular bool, maybeArtVariation interface{}, mods queries.Applicator) error {
	var slice []*ArtVariation
	var object *ArtVariation

	if singular {
		var ok bool
		object, ok = maybeArtVariation.(*ArtVariation)
		if !ok {
			object = new(ArtVariation)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeArtVariation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeArtVariation))
			}
		}
	} else {
		s, ok := maybeArtVariation.(*[]*ArtVariation)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeArtVariation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeArtVariation))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &artVariationR{}
		}
		if !queries.IsNil(object.ArtID) {
			args[object.ArtID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &artVariationR{}
			}

			if !queries.IsNil(obj.ArtID) {
				args[obj.ArtID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`arts`),
		qm.WhereIn(`arts.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Art")
	}

	var resultSlice []*Art
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Art")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for arts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for arts")
	}

	if len(artAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Art = foreign
		if foreign.R == nil {
			foreign.R = &artR{}
		}
		foreign.R.ArtVariations = append(foreign.R.ArtVariations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ArtID, foreign.ID) {
				local.R.Art = foreign
				if foreign.R == nil {
					foreign.R = &artR{}
				}
				foreign.R.ArtVariations = append(foreign.R.ArtVariations, local)
				break
			}
		}
	}

	return nil
}

// LoadAuthor allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (artVariationL) LoadAuthor(ctx context.Context, e boil.ContextExecutor, singular bool, maybeArtVariation interface{}, mods queries.Applicator) error {
	var slice []*ArtVariation
	var object *ArtVariation

	if singular {
		var ok bool
		object, ok = maybeArtVariation.(*ArtVariation)
		if !ok {
			object = new(ArtVariation)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeArtVariation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeArtVariation))
			}
		}
	} else {
		s, ok := maybeArtVariation.(*[]*ArtVariation)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeArtVariation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeArtVariation))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &artVariationR{}
		}
		args[object.AuthorID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &artVariationR{}
			}

			args[obj.AuthorID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Author = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.AuthorArtVariations = append(foreign.R.AuthorArtVariations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AuthorID == foreign.ID {
				local.R.Author = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.AuthorArtVariations = append(foreign.R.AuthorArtVariations, local)
				break
			}
		}
	}

	return nil
}

// LoadImage allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (artVariationL) LoadImage(ctx context.Context, e boil.ContextExecutor, singular bool, maybeArtVariation interface{}, mods queries.Applicator) error {
	var slice []*ArtVariation
	var object *ArtVariation

	if singular {
		var ok bool
		object, ok = maybeArtVariation.(*ArtVariation)
		if !ok {
			object = new(ArtVariation)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeArtVariation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeArtVariation))
			}
		}
	} else {
		s, ok := maybeArtVariation.(*[]*ArtVariation)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeArtVariation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeArtVariation))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &artVariationR{}
		}
		if !queries.IsNil(object.ImageID) {
			args[object.ImageID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &artVariationR{}
			}

			if !queries.IsNil(obj.ImageID) {
				args[obj.ImageID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`media`),
		qm.WhereIn(`media.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Medium")
	}

	var resultSlice []*Medium
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Medium")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for media")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for media")
	}

	if len(mediumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Image = foreign
		if foreign.R == nil {
			foreign.R = &mediumR{}
		}
		foreign.R.ImageArtVariations = append(foreign.R.ImageArtVariations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ImageID, foreign.ID) {
				local.R.Image = foreign
				if foreign.R == nil {
					foreign.R = &mediumR{}
				}
				foreign.R.ImageArtVariations = append(foreign.R.ImageArtVariations, local)
				break
			}
		}
	}

	return nil
}

// SetArtG of the artVariation to the related item.
// Sets o.R.Art to related.
// Adds o to related.R.ArtVariations.
// Uses the global database handle.
func (o *ArtVariation) SetArtG(ctx context.Context, insert bool, related *Art) error {
	return o.SetArt(ctx, boil.GetContextDB(), insert, related)
}

// SetArt of the artVariation to the related item.
// Sets o.R.Art to related.
// Adds o to related.R.ArtVariations.
func (o *ArtVariation) SetArt(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Art) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"art_variations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"art_id"}),
		strmangle.WhereClause("\"", "\"", 2, artVariationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ArtID, related.ID)
	if o.R == nil {
		o.R = &artVariationR{
			Art: related,
		}
	} else {
		o.R.Art = related
	}

	if related.R == nil {
		related.R = &artR{
			ArtVariations: ArtVariationSlice{o},
		}
	} else {
		related.R.ArtVariations = append(related.R.ArtVariations, o)
	}

	return nil
}

// RemoveArtG relationship.
// Sets o.R.Art to nil.
// Removes o from all passed in related items' relationships struct.
// Uses the global database handle.
func (o *ArtVariation) RemoveArtG(ctx context.Context, related *Art) error {
	return o.RemoveArt(ctx, boil.GetContextDB(), related)
}

// RemoveArt relationship.
// Sets o.R.Art to nil.
// Removes o from all passed in related items' relationships struct.
func (o *ArtVariation) RemoveArt(ctx context.Context, exec boil.ContextExecutor, related *Art) error {
	var err error

	queries.SetScanner(&o.ArtID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("art_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Art = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ArtVariations {
		if queries.Equal(o.ArtID, ri.ArtID) {
			continue
		}

		ln := len(related.R.ArtVariations)
		if ln > 1 && i < ln-1 {
			related.R.ArtVariations[i] = related.R.ArtVariations[ln-1]
		}
		related.R.ArtVariations = related.R.ArtVariations[:ln-1]
		break
	}
	return nil
}

// SetAuthorG of the artVariation to the related item.
// Sets o.R.Author to related.
// Adds o to related.R.AuthorArtVariations.
// Uses the global database handle.
func (o *ArtVariation) SetAuthorG(ctx context.Context, insert bool, related *User) error {
	return o.SetAuthor(ctx, boil.GetContextDB(), insert, related)
}

// SetAuthor of the artVariation to the related item.
// Sets o.R.Author to related.
// Adds o to related.R.AuthorArtVariations.
func (o *ArtVariation) SetAuthor(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"art_variations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"author_id"}),
		strmangle.WhereClause("\"", "\"", 2, artVariationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AuthorID = related.ID
	if o.R == nil {
		o.R = &artVariationR{
			Author: related,
		}
	} else {
		o.R.Author = related
	}

	if related.R == nil {
		related.R = &userR{
			AuthorArtVariations: ArtVariationSlice{o},
		}
	} else {
		related.R.AuthorArtVariations = append(related.R.AuthorArtVariations, o)
	}

	return nil
}

// SetImageG of the artVariation to the related item.
// Sets o.R.Image to related.
// Adds o to related.R.ImageArtVariations.
// Uses the global database handle.
func (o *ArtVariation) SetImageG(ctx context.Context, insert bool, related *Medium) error {
	return o.SetImage(ctx, boil.GetContextDB(), insert, related)
}

// SetImage of the artVariation to the related item.
// Sets o.R.Image to related.
// Adds o to related.R.ImageArtVariations.
func (o *ArtVariation) SetImage(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Medium) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"art_variations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"image_id"}),
		strmangle.WhereClause("\"", "\"", 2, artVariationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ImageID, related.ID)
	if o.R == nil {
		o.R = &artVariationR{
			Image: related,
		}
	} else {
		o.R.Image = related
	}

	if related.R == nil {
		related.R = &mediumR{
			ImageArtVariations: ArtVariationSlice{o},
		}
	} else {
		related.R.ImageArtVariations = append(related.R.ImageArtVariations, o)
	}

	return nil
}

// RemoveImageG relationship.
// Sets o.R.Image to nil.
// Removes o from all passed in related items' relationships struct.
// Uses the global database handle.
func (o *ArtVariation) RemoveImageG(ctx context.Context, related *Medium) error {
	return o.RemoveImage(ctx, boil.GetContextDB(), related)
}

// RemoveImage relationship.
// Sets o.R.Image to nil.
// Removes o from all passed in related items' relationships struct.
func (o *ArtVariation) RemoveImage(ctx context.Context, exec boil.ContextExecutor, related *Medium) error {
	var err error

	queries.SetScanner(&o.ImageID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("image_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Image = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ImageArtVariations {
		if queries.Equal(o.ImageID, ri.ImageID) {
			continue
		}

		ln := len(related.R.ImageArtVariations)
		if ln > 1 && i < ln-1 {
			related.R.ImageArtVariations[i] = related.R.ImageArtVariations[ln-1]
		}
		related.R.ImageArtVariations = related.R.ImageArtVariations[:ln-1]
		break
	}
	return nil
}

// ArtVariations retrieves all the records using an executor.
func ArtVariations(mods ...qm.QueryMod) artVariationQuery {
	mods = append(mods, qm.From("\"art_variations\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"art_variations\".*"})
	}

	return artVariationQuery{q}
}

// FindArtVariationG retrieves a single record by ID.
func FindArtVariationG(ctx context.Context, iD string, selectCols ...string) (*ArtVariation, error) {
	return FindArtVariation(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindArtVariation retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindArtVariation(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*ArtVariation, error) {
	artVariationObj := &ArtVariation{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"art_variations\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, artVariationObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from art_variations")
	}

	if err = artVariationObj.doAfterSelectHooks(ctx, exec); err != nil {
		return artVariationObj, err
	}

	return artVariationObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *ArtVariation) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ArtVariation) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no art_variations provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(artVariationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	artVariationInsertCacheMut.RLock()
	cache, cached := artVariationInsertCache[key]
	artVariationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			artVariationAllColumns,
			artVariationColumnsWithDefault,
			artVariationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(artVariationType, artVariationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(artVariationType, artVariationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"art_variations\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"art_variations\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into art_variations")
	}

	if !cached {
		artVariationInsertCacheMut.Lock()
		artVariationInsertCache[key] = cache
		artVariationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single ArtVariation record using the global executor.
// See Update for more documentation.
func (o *ArtVariation) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the ArtVariation.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ArtVariation) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	artVariationUpdateCacheMut.RLock()
	cache, cached := artVariationUpdateCache[key]
	artVariationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			artVariationAllColumns,
			artVariationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update art_variations, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"art_variations\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, artVariationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(artVariationType, artVariationMapping, append(wl, artVariationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update art_variations row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for art_variations")
	}

	if !cached {
		artVariationUpdateCacheMut.Lock()
		artVariationUpdateCache[key] = cache
		artVariationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q artVariationQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q artVariationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for art_variations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for art_variations")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ArtVariationSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ArtVariationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), artVariationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"art_variations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, artVariationPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in artVariation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all artVariation")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *ArtVariation) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ArtVariation) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no art_variations provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(artVariationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	artVariationUpsertCacheMut.RLock()
	cache, cached := artVariationUpsertCache[key]
	artVariationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			artVariationAllColumns,
			artVariationColumnsWithDefault,
			artVariationColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			artVariationAllColumns,
			artVariationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert art_variations, could not build update column list")
		}

		ret := strmangle.SetComplement(artVariationAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(artVariationPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert art_variations, could not build conflict column list")
			}

			conflict = make([]string, len(artVariationPrimaryKeyColumns))
			copy(conflict, artVariationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"art_variations\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(artVariationType, artVariationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(artVariationType, artVariationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert art_variations")
	}

	if !cached {
		artVariationUpsertCacheMut.Lock()
		artVariationUpsertCache[key] = cache
		artVariationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single ArtVariation record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *ArtVariation) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single ArtVariation record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ArtVariation) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ArtVariation provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), artVariationPrimaryKeyMapping)
	sql := "DELETE FROM \"art_variations\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from art_variations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for art_variations")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q artVariationQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q artVariationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no artVariationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from art_variations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for art_variations")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o ArtVariationSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ArtVariationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(artVariationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), artVariationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"art_variations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, artVariationPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from artVariation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for art_variations")
	}

	if len(artVariationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *ArtVariation) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no ArtVariation provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ArtVariation) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindArtVariation(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ArtVariationSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty ArtVariationSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ArtVariationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ArtVariationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), artVariationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"art_variations\".* FROM \"art_variations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, artVariationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ArtVariationSlice")
	}

	*o = slice

	return nil
}

// ArtVariationExistsG checks if the ArtVariation row exists.
func ArtVariationExistsG(ctx context.Context, iD string) (bool, error) {
	return ArtVariationExists(ctx, boil.GetContextDB(), iD)
}

// ArtVariationExists checks if the ArtVariation row exists.
func ArtVariationExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"art_variations\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if art_variations exists")
	}

	return exists, nil
}

// Exists checks if the ArtVariation row exists.
func (o *ArtVariation) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ArtVariationExists(ctx, exec, o.ID)
}
